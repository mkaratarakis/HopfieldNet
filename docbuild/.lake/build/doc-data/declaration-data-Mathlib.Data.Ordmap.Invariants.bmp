{"name":"Mathlib.Data.Ordmap.Invariants","instances":[{"typeNames":["Ordnode.BalancedSz"],"name":"Ordnode.BalancedSz.dec","className":"Decidable"},{"typeNames":["Ordnode.Balanced"],"name":"Ordnode.Balanced.dec","className":"Decidable"}],"imports":["Init","Mathlib.Algebra.Order.Ring.Nat","Mathlib.Data.Nat.Dist","Mathlib.Data.Ordmap.Ordnode","Mathlib.Tactic.Abel"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L833-L837","name":"Ordnode.Bounded.to_sep","line":833,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.to_sep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.to_sep\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">to_sep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithBot\">WithBot</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithTop\">WithTop</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">(↑<span class=\"fn\">x</span>)</span> <span class=\"fn\">o₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">(fun (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">(fun (<span class=\"fn\">z</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">z</span>)</span> <span class=\"fn\">t₂</span></span>)</span> <span class=\"fn\">t₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L828-L831","name":"Ordnode.Bounded.of_gt","line":828,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.of_gt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.of_gt\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">of_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithBot\">WithBot</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithTop\">WithTop</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">o₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.nil\">nil</a>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">(↑<span class=\"fn\">x</span>)</span> <span class=\"fn\">o₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">(fun (<span class=\"fn\">x_1</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x_1</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">(↑<span class=\"fn\">x</span>)</span> <span class=\"fn\">o₂</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L823-L826","name":"Ordnode.Bounded.of_lt","line":823,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.of_lt\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithBot\">WithBot</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithTop\">WithTop</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">o₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.nil\">nil</a>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">(fun (<span class=\"fn\">x_1</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x_1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L819-L821","name":"Ordnode.Bounded.mem_gt","line":819,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.mem_gt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.mem_gt\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">mem_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithTop\">WithTop</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">(↑<span class=\"fn\">x</span>)</span> <span class=\"fn\">o</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">(fun (<span class=\"fn\">x_1</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x_1</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L814-L817","name":"Ordnode.Bounded.mem_lt","line":814,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.mem_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.mem_lt\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">mem_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithBot\">WithBot</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o</span> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">(fun (<span class=\"fn\">x_1</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x_1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L809-L812","name":"Ordnode.Bounded.trans_right","line":809,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.trans_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.trans_right\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">trans_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithBot\">WithBot</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithTop\">WithTop</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">(↑<span class=\"fn\">x</span>)</span> <span class=\"fn\">o₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">o₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L804-L807","name":"Ordnode.Bounded.trans_left","line":804,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.trans_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.trans_left\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">trans_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithBot\">WithBot</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithTop\">WithTop</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">(↑<span class=\"fn\">x</span>)</span> <span class=\"fn\">o₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">o₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L799-L802","name":"Ordnode.Bounded.to_nil","line":799,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.to_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.to_nil\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">to_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithBot\">WithBot</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithTop\">WithTop</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">o₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.nil\">nil</a>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">o₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L795-L797","name":"Ordnode.Bounded.to_lt","line":795,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.to_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.to_lt\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">to_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">↑<span class=\"fn\">x</span></span> <span class=\"fn\">↑<span class=\"fn\">y</span></span></span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L789-L793","name":"Ordnode.Bounded.mono_right","line":789,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.mono_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.mono_right\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">mono_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xy</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithBot\">WithBot</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o</span> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o</span> <span class=\"fn\">↑<span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L783-L787","name":"Ordnode.Bounded.mono_left","line":783,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.mono_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.mono_left\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">mono_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xy</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithTop\">WithTop</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">(↑<span class=\"fn\">y</span>)</span> <span class=\"fn\">o</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">(↑<span class=\"fn\">x</span>)</span> <span class=\"fn\">o</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L780-L781","name":"Ordnode.Bounded.weak","line":780,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.weak","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.weak\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">weak</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithBot\">WithBot</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithTop\">WithTop</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">o₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L776-L778","name":"Ordnode.Bounded.weak_right","line":776,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.weak_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.weak_right\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">weak_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithBot\">WithBot</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithTop\">WithTop</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">o₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L772-L774","name":"Ordnode.Bounded.weak_left","line":772,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.weak_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.weak_left\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">weak_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithBot\">WithBot</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithTop\">WithTop</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">o₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a> <span class=\"fn\">o₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L767-L770","name":"Ordnode.Bounded.dual_iff","line":767,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.dual_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.dual_iff\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">dual_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithBot\">WithBot</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithTop\">WithTop</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">o₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₂</span> <span class=\"fn\">o₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L762-L765","name":"Ordnode.Bounded.dual","line":762,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.dual","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded.dual\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">dual</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithBot\">WithBot</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithTop\">WithTop</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₁</span> <span class=\"fn\">o₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\">Bounded</a></span> <span class=\"fn\">o₂</span> <span class=\"fn\">o₁</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L754-L760","name":"Ordnode.Bounded","line":754,"kind":"def","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded","doc":"`Bounded t lo hi` says that every element `x ∈ t` is in the range `lo < x < hi`, and also this\nproperty holds recursively in subtrees, making the full tree a BST. The bounds can be set to\n`lo = ⊥` and `hi = ⊤` if we care only about the internal ordering constraints. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Bounded\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Bounded</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithBot\">WithBot</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/TypeTags.html#WithTop\">WithTop</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L743-L748","name":"Ordnode.all_balanceR","line":743,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_balanceR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_balanceR\"><span class=\"name\">Ordnode</span>.<span class=\"name\">all_balanceR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">(∃ (<span class=\"fn\">l'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">l'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\">l'</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (<span class=\"fn\">r'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\">r'</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">r'</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.balanceR\">balanceR</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L737-L741","name":"Ordnode.size_balanceR","line":737,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.size_balanceR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.size_balanceR\"><span class=\"name\">Ordnode</span>.<span class=\"name\">size_balanceR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">(∃ (<span class=\"fn\">l'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">l'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\">l'</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (<span class=\"fn\">r'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\">r'</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">r'</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.balanceR\">balanceR</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L728-L735","name":"Ordnode.balanceR_eq_balance'","line":728,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balanceR_eq_balance'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balanceR_eq_balance'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">balanceR_eq_balance'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">(∃ (<span class=\"fn\">l'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">l'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\">l'</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (<span class=\"fn\">r'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\">r'</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">r'</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.balanceR\">balanceR</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balance'\">balance'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L721-L726","name":"Ordnode.all_balanceL","line":721,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_balanceL","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_balanceL\"><span class=\"name\">Ordnode</span>.<span class=\"name\">all_balanceL</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">(∃ (<span class=\"fn\">l'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\">l'</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\">l'</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (<span class=\"fn\">r'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">r'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">r'</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.balanceL\">balanceL</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L715-L719","name":"Ordnode.size_balanceL","line":715,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.size_balanceL","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.size_balanceL\"><span class=\"name\">Ordnode</span>.<span class=\"name\">size_balanceL</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">(∃ (<span class=\"fn\">l'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\">l'</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\">l'</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (<span class=\"fn\">r'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">r'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">r'</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.balanceL\">balanceL</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L705-L713","name":"Ordnode.balance_sz_dual","line":705,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balance_sz_dual","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balance_sz_dual\"><span class=\"name\">Ordnode</span>.<span class=\"name\">balance_sz_dual</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">(∃ (<span class=\"fn\">l'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">l'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\">l'</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (<span class=\"fn\">r'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\">r'</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">r'</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∃ (<span class=\"fn\">l'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\">l'</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\">l'</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a>   <span class=\"fn\">∃ (<span class=\"fn\">r'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">r'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">r'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L687-L703","name":"Ordnode.balanceL_eq_balance'","line":687,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balanceL_eq_balance'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balanceL_eq_balance'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">balanceL_eq_balance'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">(∃ (<span class=\"fn\">l'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\">l'</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\">l'</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (<span class=\"fn\">r'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">r'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\">r'</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.balanceL\">balanceL</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balance'\">balance'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L680-L685","name":"Ordnode.Raised.right","line":680,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised.right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised.right\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Raised</span>.<span class=\"name\">right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₁ </span><span class=\"fn\">x₂</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r₁ </span><span class=\"fn\">r₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\"><span class=\"fn\">r₁</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\"><span class=\"fn\">r₂</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node'\">node'</a></span> <span class=\"fn\">x₁</span> <span class=\"fn\">r₁</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node'\">node'</a></span> <span class=\"fn\">x₂</span> <span class=\"fn\">r₂</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L677-L678","name":"Ordnode.Raised.add_right","line":677,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised.add_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised.add_right\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Raised</span>.<span class=\"name\">add_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span>) (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L672-L675","name":"Ordnode.Raised.add_left","line":672,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised.add_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised.add_left\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Raised</span>.<span class=\"name\">add_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span>) (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L669-L670","name":"Ordnode.Raised.dist_le'","line":669,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised.dist_le'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised.dist_le'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Raised</span>.<span class=\"name\">dist_le'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Nat/Dist.html#Nat.dist\">dist</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L666-L667","name":"Ordnode.Raised.dist_le","line":666,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised.dist_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised.dist_le\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Raised</span>.<span class=\"name\">dist_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Data/Nat/Dist.html#Nat.dist\">dist</a></span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L656-L664","name":"Ordnode.raised_iff","line":656,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.raised_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.raised_iff\"><span class=\"name\">Ordnode</span>.<span class=\"name\">raised_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\">Raised</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L652-L654","name":"Ordnode.Raised","line":652,"kind":"def","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised","doc":"`Raised n m` means `m` is either equal or one up from `n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Raised\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Raised</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L637-L650","name":"Ordnode.balanceL_eq_balance","line":637,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balanceL_eq_balance","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balanceL_eq_balance\"><span class=\"name\">Ordnode</span>.<span class=\"name\">balanceL_eq_balance</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H1</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H2</span> : <span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> → <span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> → <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.delta\">delta</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.balanceL\">balanceL</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.balance\">balance</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L551-L635","name":"Ordnode.balance_eq_balance'","line":551,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balance_eq_balance'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balance_eq_balance'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">balance_eq_balance'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.balance\">balance</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balance'\">balance'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L539-L546","name":"Ordnode.dual_insert","line":539,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_insert\"><span class=\"name\">Ordnode</span>.<span class=\"name\">dual_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#IsTotal\">IsTotal</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x2</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLE\">DecidableLE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.insert\">Ordnode.insert</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.insert\">Ordnode.insert</a> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L528-L534","name":"Ordnode.merge_node","line":528,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.merge_node","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.merge_node\"><span class=\"name\">Ordnode</span>.<span class=\"name\">merge_node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ls</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ll</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lx</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lr</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rs</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rl</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rx</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rr</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">ls</span> <span class=\"fn\">ll</span> <span class=\"fn\">lx</span> <span class=\"fn\">lr</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.merge\">merge</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">rs</span> <span class=\"fn\">rl</span> <span class=\"fn\">rx</span> <span class=\"fn\">rr</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <a href=\"./Init/Prelude.html#ite\">if</a> <a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.delta\">delta</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ls</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">rs</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">ls</span> <span class=\"fn\">ll</span> <span class=\"fn\">lx</span> <span class=\"fn\">lr</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.merge\">merge</a></span> <span class=\"fn\">rl</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.balanceL\">balanceL</a></span> <span class=\"fn\">rx</span> <span class=\"fn\">rr</span></span>\n  <a href=\"./Init/Prelude.html#ite\">else</a>     <a href=\"./Init/Prelude.html#ite\">if</a> <a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.delta\">delta</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">rs</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">ls</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ll</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.balanceR\">balanceR</a></span> <span class=\"fn\">lx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">lr</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.merge\">merge</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">rs</span> <span class=\"fn\">rl</span> <span class=\"fn\">rx</span> <span class=\"fn\">rr</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">ls</span> <span class=\"fn\">ll</span> <span class=\"fn\">lx</span> <span class=\"fn\">lr</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.glue\">glue</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">rs</span> <span class=\"fn\">rl</span> <span class=\"fn\">rx</span> <span class=\"fn\">rr</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L524-L526","name":"Ordnode.merge_nil_right","line":524,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.merge_nil_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.merge_nil_right\"><span class=\"name\">Ordnode</span>.<span class=\"name\">merge_nil_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.nil\">nil</a>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.merge\">merge</a></span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">t</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L521-L522","name":"Ordnode.merge_nil_left","line":521,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.merge_nil_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.merge_nil_left\"><span class=\"name\">Ordnode</span>.<span class=\"name\">merge_nil_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.merge\">merge</a></span> <a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.nil\">nil</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">t</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L510-L513","name":"Ordnode.findMax'_all","line":510,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.findMax'_all","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.findMax'_all\"><span class=\"name\">Ordnode</span>.<span class=\"name\">findMax'_all</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.findMax'\">findMax'</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L505-L508","name":"Ordnode.findMin'_all","line":505,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.findMin'_all","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.findMin'_all\"><span class=\"name\">Ordnode</span>.<span class=\"name\">findMin'_all</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.findMin'\">findMin'</a></span> <span class=\"fn\">x</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L500-L503","name":"Ordnode.splitMax_eq","line":500,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.splitMax_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.splitMax_eq\"><span class=\"name\">Ordnode</span>.<span class=\"name\">splitMax_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.splitMax'\">splitMax'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">s</span> <span class=\"fn\">l</span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.eraseMax\">eraseMax</a></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.findMax'\">findMax'</a> <span class=\"fn\">x</span> <span class=\"fn\">r</span></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L495-L498","name":"Ordnode.splitMin_eq","line":495,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.splitMin_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.splitMin_eq\"><span class=\"name\">Ordnode</span>.<span class=\"name\">splitMin_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.splitMin'\">splitMin'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.findMin'\">findMin'</a></span> <span class=\"fn\">x</span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">s</span> <span class=\"fn\">l</span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.eraseMin\">eraseMin</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L492-L493","name":"Ordnode.dual_eraseMax","line":492,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_eraseMax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_eraseMax\"><span class=\"name\">Ordnode</span>.<span class=\"name\">dual_eraseMax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.eraseMax\">eraseMax</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.eraseMin\">eraseMin</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L486-L490","name":"Ordnode.dual_eraseMin","line":486,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_eraseMin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_eraseMin\"><span class=\"name\">Ordnode</span>.<span class=\"name\">dual_eraseMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.eraseMin\">eraseMin</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.eraseMax\">eraseMax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L483-L484","name":"Ordnode.findMax_dual","line":483,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.findMax_dual","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.findMax_dual\"><span class=\"name\">Ordnode</span>.<span class=\"name\">findMax_dual</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.findMax\">findMax</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.findMin\">findMin</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L479-L481","name":"Ordnode.findMin_dual","line":479,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.findMin_dual","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.findMin_dual\"><span class=\"name\">Ordnode</span>.<span class=\"name\">findMin_dual</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.findMin\">findMin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.findMax\">findMax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L476-L477","name":"Ordnode.findMax'_dual","line":476,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.findMax'_dual","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.findMax'_dual\"><span class=\"name\">Ordnode</span>.<span class=\"name\">findMax'_dual</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.findMax'\">findMax'</a> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.findMin'\">findMin'</a></span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L472-L474","name":"Ordnode.findMin'_dual","line":472,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.findMin'_dual","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.findMin'_dual\"><span class=\"name\">Ordnode</span>.<span class=\"name\">findMin'_dual</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.findMin'\">findMin'</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.findMax'\">findMax'</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L466-L467","name":"Ordnode.pos_size_of_mem","line":466,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.pos_size_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.pos_size_of_mem\"><span class=\"name\">Ordnode</span>.<span class=\"name\">pos_size_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLE\">DecidableLE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_mem</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L459-L461","name":"Ordnode.equiv_iff","line":459,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.equiv_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.equiv_iff\"><span class=\"name\">Ordnode</span>.<span class=\"name\">equiv_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t₂</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.toList\">toList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L456-L457","name":"Ordnode.length_toList","line":456,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.length_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.length_toList\"><span class=\"name\">Ordnode</span>.<span class=\"name\">length_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.toList\">toList</a></span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L450-L454","name":"Ordnode.length_toList'","line":450,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.length_toList'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.length_toList'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">length_toList'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.toList\">toList</a></span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.realSize\">realSize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L447-L448","name":"Ordnode.emem_iff_mem_toList","line":447,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.emem_iff_mem_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.emem_iff_mem_toList\"><span class=\"name\">Ordnode</span>.<span class=\"name\">emem_iff_mem_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.Emem\">Emem</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.toList\">toList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L443-L445","name":"Ordnode.toList_node","line":443,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.toList_node","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.toList_node\"><span class=\"name\">Ordnode</span>.<span class=\"name\">toList_node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">s</span> <span class=\"fn\">l</span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.toList\">toList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L439-L441","name":"Ordnode.toList_nil","line":439,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.toList_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.toList_nil\"><span class=\"name\">Ordnode</span>.<span class=\"name\">toList_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.nil\">nil</a>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L433-L437","name":"Ordnode.foldr_cons_eq_toList","line":433,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.foldr_cons_eq_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.foldr_cons_eq_toList\"><span class=\"name\">Ordnode</span>.<span class=\"name\">foldr_cons_eq_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.foldr\">foldr</a> <a href=\"./Init/Prelude.html#List.cons\">List.cons</a> <span class=\"fn\">t</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L427-L428","name":"Ordnode.all_balance'","line":427,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_balance'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_balance'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">all_balance'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balance'\">balance'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L424-L425","name":"Ordnode.all_rotateR","line":424,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_rotateR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_rotateR\"><span class=\"name\">Ordnode</span>.<span class=\"name\">all_rotateR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateR\">rotateR</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L420-L422","name":"Ordnode.all_rotateL","line":420,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_rotateL","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_rotateL\"><span class=\"name\">Ordnode</span>.<span class=\"name\">all_rotateL</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateL\">rotateL</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L416-L418","name":"Ordnode.all_node4R","line":416,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_node4R","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_node4R\"><span class=\"name\">Ordnode</span>.<span class=\"name\">all_node4R</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4R\">node4R</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L412-L414","name":"Ordnode.all_node4L","line":412,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_node4L","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_node4L\"><span class=\"name\">Ordnode</span>.<span class=\"name\">all_node4L</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4L\">node4L</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L408-L410","name":"Ordnode.all_node3R","line":408,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_node3R","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_node3R\"><span class=\"name\">Ordnode</span>.<span class=\"name\">all_node3R</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3R\">node3R</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L404-L406","name":"Ordnode.all_node3L","line":404,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_node3L","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_node3L\"><span class=\"name\">Ordnode</span>.<span class=\"name\">all_node3L</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3L\">node3L</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L401-L402","name":"Ordnode.all_node'","line":401,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_node'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_node'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">all_node'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node'\">node'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L398-L399","name":"Ordnode.emem_iff_all","line":398,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.emem_iff_all","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.emem_iff_all\"><span class=\"name\">Ordnode</span>.<span class=\"name\">emem_iff_all</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.Emem\">Emem</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L394-L396","name":"Ordnode.any_iff_exists","line":394,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.any_iff_exists","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.any_iff_exists\"><span class=\"name\">Ordnode</span>.<span class=\"name\">any_iff_exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.Any\">Any</a> <span class=\"fn\">P</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.Emem\">Emem</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L390-L392","name":"Ordnode.all_iff_forall","line":390,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_iff_forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_iff_forall\"><span class=\"name\">Ordnode</span>.<span class=\"name\">all_iff_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.Emem\">Emem</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L384-L388","name":"Ordnode.all_dual","line":384,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_dual","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_dual\"><span class=\"name\">Ordnode</span>.<span class=\"name\">all_dual</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L381-L382","name":"Ordnode.any_singleton","line":381,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.any_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.any_singleton\"><span class=\"name\">Ordnode</span>.<span class=\"name\">any_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.Any\">Any</a> <span class=\"fn\">P</span> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L378-L379","name":"Ordnode.all_singleton","line":378,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.all_singleton\"><span class=\"name\">Ordnode</span>.<span class=\"name\">all_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L374-L376","name":"Ordnode.Any.imp","line":374,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Any.imp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Any.imp\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Any</span>.<span class=\"name\">imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">a</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.Any\">Any</a> <span class=\"fn\">P</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.Any\">Any</a> <span class=\"fn\">Q</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L370-L372","name":"Ordnode.All.imp","line":370,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.All.imp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.All.imp\"><span class=\"name\">Ordnode</span>.<span class=\"name\">All</span>.<span class=\"name\">imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">a</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">P</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.All\">All</a> <span class=\"fn\">Q</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L359-L365","name":"Ordnode.size_balance'","line":359,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.size_balance'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.size_balance'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">size_balance'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balance'\">balance'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L352-L357","name":"Ordnode.Sized.balance'","line":352,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.balance'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.balance'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">balance'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balance'\">balance'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L348-L350","name":"Ordnode.Sized.rotateR_size","line":348,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.rotateR_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.rotateR_size\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">rotateR_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateR\">rotateR</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L342-L346","name":"Ordnode.Sized.rotateL_size","line":342,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.rotateL_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.rotateL_size\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">rotateL_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hm</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateL\">rotateL</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L339-L340","name":"Ordnode.Sized.rotateR","line":339,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.rotateR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.rotateR\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">rotateR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateR\">rotateR</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L333-L337","name":"Ordnode.Sized.rotateL","line":333,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.rotateL","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.rotateL\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">rotateL</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateL\">rotateL</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L330-L331","name":"Ordnode.Sized.dual_iff","line":330,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.dual_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.dual_iff\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">dual_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L326-L328","name":"Ordnode.Sized.dual","line":326,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.dual","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.dual\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">dual</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L322-L324","name":"Ordnode.node4L_size","line":322,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4L_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4L_size\"><span class=\"name\">Ordnode</span>.<span class=\"name\">node4L_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hm</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4L\">node4L</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L319-L320","name":"Ordnode.node3R_size","line":319,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3R_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3R_size\"><span class=\"name\">Ordnode</span>.<span class=\"name\">node3R_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3R\">node3R</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L316-L317","name":"Ordnode.node3L_size","line":316,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3L_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3L_size\"><span class=\"name\">Ordnode</span>.<span class=\"name\">node3L_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3L\">node3L</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L312-L314","name":"Ordnode.Sized.node4L","line":312,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.node4L","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.node4L\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">node4L</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hm</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4L\">node4L</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L308-L310","name":"Ordnode.Sized.node3R","line":308,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.node3R","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.node3R\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">node3R</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hm</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3R\">node3R</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L304-L306","name":"Ordnode.Sized.node3L","line":304,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.node3L","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.node3L\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">node3L</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hm</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3L\">node3L</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L300-L302","name":"Ordnode.dual_balanceR","line":300,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_balanceR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_balanceR\"><span class=\"name\">Ordnode</span>.<span class=\"name\">dual_balanceR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.balanceR\">balanceR</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.balanceL\">balanceL</a></span> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L285-L298","name":"Ordnode.dual_balanceL","line":285,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_balanceL","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_balanceL\"><span class=\"name\">Ordnode</span>.<span class=\"name\">dual_balanceL</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.balanceL\">balanceL</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.balanceR\">balanceR</a></span> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L279-L283","name":"Ordnode.dual_balance'","line":279,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_balance'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_balance'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">dual_balance'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balance'\">balance'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balance'\">balance'</a></span> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L275-L277","name":"Ordnode.dual_rotateR","line":275,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_rotateR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_rotateR\"><span class=\"name\">Ordnode</span>.<span class=\"name\">dual_rotateR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateR\">rotateR</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateL\">rotateL</a></span> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L270-L273","name":"Ordnode.dual_rotateL","line":270,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_rotateL","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_rotateL\"><span class=\"name\">Ordnode</span>.<span class=\"name\">dual_rotateL</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateL\">rotateL</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateR\">rotateR</a></span> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L266-L268","name":"Ordnode.dual_node4R","line":266,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_node4R","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_node4R\"><span class=\"name\">Ordnode</span>.<span class=\"name\">dual_node4R</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4R\">node4R</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4L\">node4L</a></span> <span class=\"fn\">y</span> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L262-L264","name":"Ordnode.dual_node4L","line":262,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_node4L","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_node4L\"><span class=\"name\">Ordnode</span>.<span class=\"name\">dual_node4L</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4L\">node4L</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4R\">node4R</a></span> <span class=\"fn\">y</span> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L258-L260","name":"Ordnode.dual_node3R","line":258,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_node3R","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_node3R\"><span class=\"name\">Ordnode</span>.<span class=\"name\">dual_node3R</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3R\">node3R</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3L\">node3L</a></span> <span class=\"fn\">y</span> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L254-L256","name":"Ordnode.dual_node3L","line":254,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_node3L","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_node3L\"><span class=\"name\">Ordnode</span>.<span class=\"name\">dual_node3L</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3L\">node3L</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3R\">node3R</a></span> <span class=\"fn\">y</span> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L251-L252","name":"Ordnode.dual_node'","line":251,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_node'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_node'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">dual_node'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node'\">node'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node'\">node'</a></span> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L243-L249","name":"Ordnode.balance'","line":243,"kind":"def","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balance'","doc":"The full balance operation. This is the same as `balance`, but with less manual inlining.\nIt is somewhat easier to work with this version in proofs. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balance'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">balance'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L237-L241","name":"Ordnode.balanceR'","line":237,"kind":"def","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balanceR'","doc":"A right balance operation. This will rebalance a concatenation, assuming the original nodes are\nnot too far from balanced. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balanceR'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">balanceR'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L231-L235","name":"Ordnode.balanceL'","line":231,"kind":"def","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balanceL'","doc":"A left balance operation. This will rebalance a concatenation, assuming the original nodes are\nnot too far from balanced. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balanceL'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">balanceL'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L227-L228","name":"Ordnode.rotateR_nil","line":227,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateR_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateR_nil\"><span class=\"name\">Ordnode</span>.<span class=\"name\">rotateR_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.nil\">nil</a>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateR\">rotateR</a></span> <span class=\"fn\">y</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.nil\">nil</a>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node'\">node'</a></span> <span class=\"fn\">y</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L222-L225","name":"Ordnode.rotateR_node","line":222,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateR_node","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateR_node\"><span class=\"name\">Ordnode</span>.<span class=\"name\">rotateR_node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sz</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">sz</span> <span class=\"fn\">l</span> <span class=\"fn\">x</span> <span class=\"fn\">m</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateR\">rotateR</a></span> <span class=\"fn\">y</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.ratio\">ratio</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3R\">node3R</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4R\">node4R</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L216-L220","name":"Ordnode.rotateR","line":216,"kind":"def","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateR","doc":"Concatenate two nodes, performing a right rotation `(x y) z -> (x (y z))`\nif balance is upset. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateR\"><span class=\"name\">Ordnode</span>.<span class=\"name\">rotateR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L212-L213","name":"Ordnode.rotateL_nil","line":212,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateL_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateL_nil\"><span class=\"name\">Ordnode</span>.<span class=\"name\">rotateL_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateL\">rotateL</a></span> <span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.nil\">nil</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node'\">node'</a></span> <span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.nil\">nil</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L207-L210","name":"Ordnode.rotateL_node","line":207,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateL_node","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateL_node\"><span class=\"name\">Ordnode</span>.<span class=\"name\">rotateL_node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sz</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateL\">rotateL</a></span> <span class=\"fn\">x</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">sz</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.ratio\">ratio</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3L\">node3L</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4L\">node4L</a></span> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">y</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L201-L205","name":"Ordnode.rotateL","line":201,"kind":"def","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateL","doc":"Concatenate two nodes, performing a left rotation `x (y z) -> ((x y) z)`\nif balance is upset. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.rotateL\"><span class=\"name\">Ordnode</span>.<span class=\"name\">rotateL</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L195-L198","name":"Ordnode.node4R","line":195,"kind":"def","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4R","doc":"Build a tree from three nodes, with `a () b -> a (() b)` and `a (b c) d -> ((a b) (c d))`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4R\"><span class=\"name\">Ordnode</span>.<span class=\"name\">node4R</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L189-L192","name":"Ordnode.node4L","line":189,"kind":"def","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4L","doc":"Build a tree from three nodes, with `a () b -> (a ()) b` and `a (b c) d -> ((a b) (c d))`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node4L\"><span class=\"name\">Ordnode</span>.<span class=\"name\">node4L</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L185-L187","name":"Ordnode.node3R","line":185,"kind":"def","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3R","doc":"Build a tree from three nodes, right associated (ignores the invariants). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3R\"><span class=\"name\">Ordnode</span>.<span class=\"name\">node3R</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L181-L183","name":"Ordnode.node3L","line":181,"kind":"def","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3L","doc":"Build a tree from three nodes, left associated (ignores the invariants). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.node3L\"><span class=\"name\">Ordnode</span>.<span class=\"name\">node3L</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L174-L176","name":"Ordnode.Balanced.dual","line":174,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced.dual","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced.dual\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">dual</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L169-L172","name":"Ordnode.balancedSz_down","line":169,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balancedSz_down","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balancedSz_down\"><span class=\"name\">Ordnode</span>.<span class=\"name\">balancedSz_down</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r₁ </span><span class=\"fn\">r₂</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">r₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">r₂</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.delta\">delta</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">r₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\">l</span> <span class=\"fn\">r₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\">l</span> <span class=\"fn\">r₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L157-L167","name":"Ordnode.balancedSz_up","line":157,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balancedSz_up","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balancedSz_up\"><span class=\"name\">Ordnode</span>.<span class=\"name\">balancedSz_up</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r₁ </span><span class=\"fn\">r₂</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">r₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">r₂</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">r₂</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.delta\">delta</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\">l</span> <span class=\"fn\">r₁</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\">l</span> <span class=\"fn\">r₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L154-L155","name":"Ordnode.balancedSz_zero","line":154,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balancedSz_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.balancedSz_zero\"><span class=\"name\">Ordnode</span>.<span class=\"name\">balancedSz_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\">l</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L150-L152","name":"Ordnode.BalancedSz.symm","line":150,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz.symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz.symm\"><span class=\"name\">Ordnode</span>.<span class=\"name\">BalancedSz</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a> <span class=\"fn\">r</span> <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L140-L148","name":"Ordnode.Balanced.dec","line":140,"kind":"instance","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced.dec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced.dec\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">dec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\">Balanced</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L134-L138","name":"Ordnode.Balanced","line":134,"kind":"def","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced","doc":"The `Balanced t` asserts that the tree `t` satisfies the balance invariants\n(at every level). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Balanced\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Balanced</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L132-L132","name":"Ordnode.BalancedSz.dec","line":132,"kind":"instance","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz.dec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz.dec\"><span class=\"name\">Ordnode</span>.<span class=\"name\">BalancedSz</span>.<span class=\"name\">dec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\">BalancedSz</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L126-L130","name":"Ordnode.BalancedSz","line":126,"kind":"def","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz","doc":"The `BalancedSz l r` asserts that a hypothetical tree with children of sizes `l` and `r` is\nbalanced: either `l ≤ δ * r` and `r ≤ δ * r`, or the tree is trivial with a singleton on one side\nand nothing on the other. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.BalancedSz\"><span class=\"name\">Ordnode</span>.<span class=\"name\">BalancedSz</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">r</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L120-L121","name":"Ordnode.size_dual","line":120,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.size_dual","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.size_dual\"><span class=\"name\">Ordnode</span>.<span class=\"name\">size_dual</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L116-L118","name":"Ordnode.dual_dual","line":116,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_dual","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.dual_dual\"><span class=\"name\">Ordnode</span>.<span class=\"name\">dual_dual</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.dual\">dual</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">t</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L110-L111","name":"Ordnode.Sized.pos","line":110,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.pos\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">s</span> <span class=\"fn\">l</span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">s</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L106-L108","name":"Ordnode.Sized.size_eq_zero","line":106,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.size_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.size_eq_zero\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">size_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.nil\">nil</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L101-L104","name":"Ordnode.size_eq_realSize","line":101,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.size_eq_realSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.size_eq_realSize\"><span class=\"name\">Ordnode</span>.<span class=\"name\">size_eq_realSize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span> → <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.realSize\">realSize</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L92-L99","name":"Ordnode.Sized.induction","line":92,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.induction","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.induction\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">induction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H0</span> : <span class=\"fn\"><span class=\"fn\">C</span> <a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.nil\">nil</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H1</span> : <span class=\"fn\">∀ (<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">l</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">r</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node'\">node'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L88-L90","name":"Ordnode.Sized.size_eq","line":88,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.size_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.size_eq\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">size_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">s</span> <span class=\"fn\">l</span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">s</span> <span class=\"fn\">l</span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L85-L86","name":"Ordnode.Sized.eq_node'","line":85,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.eq_node'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.eq_node'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">eq_node'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">s</span> <span class=\"fn\">l</span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node\">node</a> <span class=\"fn\">s</span> <span class=\"fn\">l</span> <span class=\"fn\">x</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node'\">node'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L82-L83","name":"Ordnode.Sized.node'","line":82,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.node'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized.node'\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span>.<span class=\"name\">node'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.node'\">node'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\">Sized</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L76-L80","name":"Ordnode.Sized","line":76,"kind":"def","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized","doc":"The `Sized` property asserts that all the `size` fields in nodes match the actual size of the\nrespective subtrees. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.Sized\"><span class=\"name\">Ordnode</span>.<span class=\"name\">Sized</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L68-L71","name":"Ordnode.realSize","line":68,"kind":"def","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.realSize","doc":"O(n). Computes the actual number of elements in the set, ignoring the cached `size` field. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.realSize\"><span class=\"name\">Ordnode</span>.<span class=\"name\">realSize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode\">Ordnode</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L58-L60","name":"Ordnode.delta_lt_false","line":58,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.delta_lt_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.delta_lt_false\"><span class=\"name\">Ordnode</span>.<span class=\"name\">delta_lt_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.delta\">delta</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.delta\">delta</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#False\">False</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Data/Ordmap/Invariants.lean#L55-L56","name":"Ordnode.not_le_delta","line":55,"kind":"theorem","docLink":"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.not_le_delta","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ordmap/Invariants.html#Ordnode.not_le_delta\"><span class=\"name\">Ordnode</span>.<span class=\"name\">not_le_delta</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">s</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Mathlib/Data/Ordmap/Ordnode.html#Ordnode.delta\">delta</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">0</span></div></div>"}]}