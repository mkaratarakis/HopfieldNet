{"name":"Mathlib.MeasureTheory.Constructions.Pi","instances":[{"typeNames":["MeasureTheory.Measure.tprod"],"name":"MeasureTheory.Measure.sigmaFinite_tprod","className":"MeasureTheory.SigmaFinite"},{"typeNames":[],"name":"MeasureTheory.MeasureSpace.pi","className":"MeasureTheory.MeasureSpace"},{"typeNames":["MeasureTheory.Measure.pi"],"name":"MeasureTheory.Measure.pi.sigmaFinite","className":"MeasureTheory.SigmaFinite"},{"typeNames":["MeasureTheory.MeasureSpace.volume"],"name":"MeasureTheory.Measure.instSigmaFiniteForallVolume","className":"MeasureTheory.SigmaFinite"},{"typeNames":["MeasureTheory.Measure.pi"],"name":"MeasureTheory.Measure.pi.instIsFiniteMeasure","className":"MeasureTheory.IsFiniteMeasure"},{"typeNames":["MeasureTheory.MeasureSpace.volume"],"name":"MeasureTheory.Measure.instIsFiniteMeasureForallVolume","className":"MeasureTheory.IsFiniteMeasure"},{"typeNames":["MeasureTheory.Measure.pi"],"name":"MeasureTheory.Measure.pi.instIsProbabilityMeasure","className":"MeasureTheory.IsProbabilityMeasure"},{"typeNames":["MeasureTheory.MeasureSpace.volume"],"name":"MeasureTheory.Measure.instIsProbabilityMeasureForallVolume","className":"MeasureTheory.IsProbabilityMeasure"},{"typeNames":["MeasureTheory.Measure.pi"],"name":"MeasureTheory.Measure.pi_noAtoms'","className":"MeasureTheory.NoAtoms"},{"typeNames":["MeasureTheory.MeasureSpace.volume"],"name":"MeasureTheory.Measure.instNoAtomsForallVolumeOfNonemptyOfSigmaFinite","className":"MeasureTheory.NoAtoms"},{"typeNames":["MeasureTheory.Measure.pi"],"name":"MeasureTheory.Measure.pi.isLocallyFiniteMeasure","className":"MeasureTheory.IsLocallyFiniteMeasure"},{"typeNames":["MeasureTheory.MeasureSpace.volume"],"name":"MeasureTheory.Measure.instIsLocallyFiniteMeasureForallVolumeOfSigmaFinite","className":"MeasureTheory.IsLocallyFiniteMeasure"},{"typeNames":["MeasureTheory.Measure.pi"],"name":"MeasureTheory.Measure.pi.isMulLeftInvariant","className":"MeasureTheory.Measure.IsMulLeftInvariant"},{"typeNames":["MeasureTheory.Measure.pi"],"name":"MeasureTheory.Measure.pi.isAddLeftInvariant","className":"MeasureTheory.Measure.IsAddLeftInvariant"},{"typeNames":["MeasureTheory.MeasureSpace.volume"],"name":"MeasureTheory.Measure.instIsMulLeftInvariantForallVolumeOfMeasurableMulOfSigmaFinite","className":"MeasureTheory.Measure.IsMulLeftInvariant"},{"typeNames":["MeasureTheory.MeasureSpace.volume"],"name":"MeasureTheory.Measure.instIsAddLeftInvariantForallVolumeOfMeasurableAddOfSigmaFinite","className":"MeasureTheory.Measure.IsAddLeftInvariant"},{"typeNames":["MeasureTheory.Measure.pi"],"name":"MeasureTheory.Measure.pi.isMulRightInvariant","className":"MeasureTheory.Measure.IsMulRightInvariant"},{"typeNames":["MeasureTheory.Measure.pi"],"name":"MeasureTheory.Measure.pi.isAddRightInvariant","className":"MeasureTheory.Measure.IsAddRightInvariant"},{"typeNames":["MeasureTheory.MeasureSpace.volume"],"name":"MeasureTheory.Measure.instIsMulRightInvariantForallVolumeOfMeasurableMulOfSigmaFinite","className":"MeasureTheory.Measure.IsMulRightInvariant"},{"typeNames":["MeasureTheory.MeasureSpace.volume"],"name":"MeasureTheory.Measure.instIsAddRightInvariantForallVolumeOfMeasurableAddOfSigmaFinite","className":"MeasureTheory.Measure.IsAddRightInvariant"},{"typeNames":["MeasureTheory.Measure.pi"],"name":"MeasureTheory.Measure.pi.isInvInvariant","className":"MeasureTheory.Measure.IsInvInvariant"},{"typeNames":["MeasureTheory.Measure.pi"],"name":"MeasureTheory.Measure.pi.isNegInvariant","className":"MeasureTheory.Measure.IsNegInvariant"},{"typeNames":["MeasureTheory.MeasureSpace.volume"],"name":"MeasureTheory.Measure.instIsInvInvariantForallVolumeOfMeasurableInvOfSigmaFinite","className":"MeasureTheory.Measure.IsInvInvariant"},{"typeNames":["MeasureTheory.MeasureSpace.volume"],"name":"MeasureTheory.Measure.instIsNegInvariantForallVolumeOfMeasurableNegOfSigmaFinite","className":"MeasureTheory.Measure.IsNegInvariant"},{"typeNames":["MeasureTheory.Measure.pi"],"name":"MeasureTheory.Measure.pi.isOpenPosMeasure","className":"MeasureTheory.Measure.IsOpenPosMeasure"},{"typeNames":["MeasureTheory.MeasureSpace.volume"],"name":"MeasureTheory.Measure.instIsOpenPosMeasureForallVolumeOfSigmaFinite","className":"MeasureTheory.Measure.IsOpenPosMeasure"},{"typeNames":["MeasureTheory.Measure.pi"],"name":"MeasureTheory.Measure.pi.isFiniteMeasureOnCompacts","className":"MeasureTheory.IsFiniteMeasureOnCompacts"},{"typeNames":["MeasureTheory.MeasureSpace.volume"],"name":"MeasureTheory.Measure.instIsFiniteMeasureOnCompactsForallVolumeOfSigmaFinite","className":"MeasureTheory.IsFiniteMeasureOnCompacts"},{"typeNames":["MeasureTheory.Measure.pi"],"name":"MeasureTheory.Measure.pi.isHaarMeasure","className":"MeasureTheory.Measure.IsHaarMeasure"},{"typeNames":["MeasureTheory.Measure.pi"],"name":"MeasureTheory.Measure.pi.isAddHaarMeasure","className":"MeasureTheory.Measure.IsAddHaarMeasure"},{"typeNames":["MeasureTheory.MeasureSpace.volume"],"name":"MeasureTheory.Measure.instIsHaarMeasureForallVolumeOfMeasurableMulOfSigmaFinite","className":"MeasureTheory.Measure.IsHaarMeasure"},{"typeNames":["MeasureTheory.MeasureSpace.volume"],"name":"MeasureTheory.Measure.instIsAddHaarMeasureForallVolumeOfMeasurableAddOfSigmaFinite","className":"MeasureTheory.Measure.IsAddHaarMeasure"},{"typeNames":["MeasureTheory.MeasureSpace.volume"],"name":"MeasureTheory.Pi.isMulLeftInvariant_volume","className":"MeasureTheory.Measure.IsMulLeftInvariant"},{"typeNames":["MeasureTheory.MeasureSpace.volume"],"name":"MeasureTheory.Pi.isAddLeftInvariant_volume","className":"MeasureTheory.Measure.IsAddLeftInvariant"},{"typeNames":["MeasureTheory.MeasureSpace.volume"],"name":"MeasureTheory.Pi.isInvInvariant_volume","className":"MeasureTheory.Measure.IsInvInvariant"},{"typeNames":["MeasureTheory.MeasureSpace.volume"],"name":"MeasureTheory.Pi.isNegInvariant_volume","className":"MeasureTheory.Measure.IsNegInvariant"}],"imports":["Init","Mathlib.Algebra.BigOperators.Fin","Mathlib.Logic.Encodable.Pi","Mathlib.MeasureTheory.Group.Measure","Mathlib.MeasureTheory.MeasurableSpace.Pi","Mathlib.MeasureTheory.Measure.Prod","Mathlib.Topology.Constructions"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L880-L886","name":"MeasureTheory.volume_preserving_arrowCongr'","line":880,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_preserving_arrowCongr'","doc":"The measurable equiv `(α₁ → β₁) ≃ᵐ (α₂ → β₂)` induced by `α₁ ≃ α₂` and `β₁ ≃ᵐ β₂` is\nvolume preserving. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_preserving_arrowCongr'\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">volume_preserving_arrowCongr'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂</span> : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hα</span> : <span class=\"fn\">α₁</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">α₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hβ</span> : <span class=\"fn\">β₁</span> <a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv\">≃ᵐ</a> <span class=\"fn\">β₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hm</span> : <span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(⇑<span class=\"fn\">hβ</span>)</span> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(⇑<span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.arrowCongr'\">MeasurableEquiv.arrowCongr'</a> <span class=\"fn\">hα</span> <span class=\"fn\">hβ</span>)</span>)</span> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L865-L878","name":"MeasureTheory.measurePreserving_arrowCongr'","line":865,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_arrowCongr'","doc":"The measurable equiv `(α₁ → β₁) ≃ᵐ (α₂ → β₂)` induced by `α₁ ≃ α₂` and `β₁ ≃ᵐ β₂` is\nmeasure preserving. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_arrowCongr'\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">measurePreserving_arrowCongr'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂</span> : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">α₁</span> → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">β₁</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ν</span> : <span class=\"fn\"><span class=\"fn\">α₂</span> → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">β₂</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">α₂</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">ν</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eα</span> : <span class=\"fn\">α₁</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">α₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eβ</span> : <span class=\"fn\">β₁</span> <a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv\">≃ᵐ</a> <span class=\"fn\">β₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hm</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">α₁</span>), <span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(⇑<span class=\"fn\">eβ</span>)</span> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">ν</span> <span class=\"fn\">(<span class=\"fn\">eα</span> <span class=\"fn\">i</span>)</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(⇑<span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.arrowCongr'\">MeasurableEquiv.arrowCongr'</a> <span class=\"fn\">eα</span> <span class=\"fn\">eβ</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">α₁</span>) =&gt; <span class=\"fn\"><span class=\"fn\">μ</span> <span class=\"fn\">i</span></span></span>)</span>\n  <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">α₂</span>) =&gt; <span class=\"fn\"><span class=\"fn\">ν</span> <span class=\"fn\">i</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L859-L863","name":"MeasureTheory.volume_preserving_pi","line":859,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_preserving_pi","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_preserving_pi\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">volume_preserving_pi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α'</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β'</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">α'</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">β'</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α'</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">β'</span> <span class=\"fn\">i</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α'</span> <span class=\"fn\">i</span></span></span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\">a</span> <span class=\"fn\">i</span>)</span></span>)</span> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L843-L857","name":"MeasureTheory.measurePreserving_pi","line":843,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_pi","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_pi\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">measurePreserving_pi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ν</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">i</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">ν</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">ν</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\">a</span> <span class=\"fn\">i</span>)</span></span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">ν</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L838-L841","name":"MeasureTheory.volume_preserving_piFinsetUnion","line":838,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_preserving_piFinsetUnion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_preserving_piFinsetUnion\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">volume_preserving_piFinsetUnion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_5</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#Disjoint\">Disjoint</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(⇑<span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.piFinsetUnion\">MeasurableEquiv.piFinsetUnion</a> <span class=\"fn\">α</span> <span class=\"fn\">h</span>)</span>)</span> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L828-L836","name":"MeasureTheory.measurePreserving_piFinsetUnion","line":828,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_piFinsetUnion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_piFinsetUnion\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">measurePreserving_piFinsetUnion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#Disjoint\">Disjoint</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(⇑<span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.piFinsetUnion\">MeasurableEquiv.piFinsetUnion</a> <span class=\"fn\">α</span> <span class=\"fn\">h</span>)</span>)</span>\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">ι</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Subtype\">}</a>) =&gt; <span class=\"fn\"><span class=\"fn\">μ</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span></span>)</span>.<a href=\"./Mathlib/MeasureTheory/Measure/Prod.html#MeasureTheory.Measure.prod\">prod</a></span> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">ι</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Subtype\">}</a>) =&gt; <span class=\"fn\"><span class=\"fn\">μ</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span></span>)</span>)</span>\n  <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">ι</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Subtype\">}</a>) =&gt; <span class=\"fn\"><span class=\"fn\">μ</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L823-L826","name":"MeasureTheory.volume_preserving_pi_empty","line":823,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_preserving_pi_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_preserving_pi_empty\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">volume_preserving_pi_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(⇑<span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.ofUniqueOfUnique\">MeasurableEquiv.ofUniqueOfUnique</a> <span class=\"fn\">((<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span>)</span> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L815-L821","name":"MeasureTheory.measurePreserving_pi_empty","line":815,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_pi_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_pi_empty\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">measurePreserving_pi_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(⇑<span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.ofUniqueOfUnique\">MeasurableEquiv.ofUniqueOfUnique</a> <span class=\"fn\">((<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Measure/Dirac.html#MeasureTheory.Measure.dirac\">Measure.dirac</a> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L810-L813","name":"MeasureTheory.volume_preserving_finTwoArrow","line":810,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_preserving_finTwoArrow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_preserving_finTwoArrow\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">volume_preserving_finTwoArrow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(⇑<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.finTwoArrow\">MeasurableEquiv.finTwoArrow</a>)</span> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L804-L808","name":"MeasureTheory.measurePreserving_finTwoArrow","line":804,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_finTwoArrow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_finTwoArrow\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">measurePreserving_finTwoArrow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">μ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(⇑<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.finTwoArrow\">MeasurableEquiv.finTwoArrow</a>)</span> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span>) =&gt; <span class=\"fn\">μ</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/MeasureTheory/Measure/Prod.html#MeasureTheory.Measure.prod\">prod</a></span> <span class=\"fn\">μ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L798-L802","name":"MeasureTheory.measurePreserving_finTwoArrow_vec","line":798,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_finTwoArrow_vec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_finTwoArrow_vec\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">measurePreserving_finTwoArrow_vec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ </span><span class=\"fn\">ν</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">μ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">ν</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(⇑<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.finTwoArrow\">MeasurableEquiv.finTwoArrow</a>)</span> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">![</a><span class=\"fn\">μ</span><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">,</a> <span class=\"fn\">ν</span><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">]</a>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/MeasureTheory/Measure/Prod.html#MeasureTheory.Measure.prod\">prod</a></span> <span class=\"fn\">ν</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L793-L796","name":"MeasureTheory.volume_preserving_piFinTwo","line":793,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_preserving_piFinTwo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_preserving_piFinTwo\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">volume_preserving_piFinTwo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(⇑<span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.piFinTwo\">MeasurableEquiv.piFinTwo</a> <span class=\"fn\">α</span>)</span>)</span> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L785-L791","name":"MeasureTheory.measurePreserving_piFinTwo","line":785,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_piFinTwo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_piFinTwo\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">measurePreserving_piFinTwo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(⇑<span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.piFinTwo\">MeasurableEquiv.piFinTwo</a> <span class=\"fn\">α</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">0</span>)</span>.<a href=\"./Mathlib/MeasureTheory/Measure/Prod.html#MeasureTheory.Measure.prod\">prod</a></span> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">1</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L781-L783","name":"MeasureTheory.volume_preserving_funUnique","line":781,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_preserving_funUnique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_preserving_funUnique\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">volume_preserving_funUnique</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(⇑<span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.funUnique\">MeasurableEquiv.funUnique</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span>)</span> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L776-L779","name":"MeasureTheory.measurePreserving_funUnique","line":776,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_funUnique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_funUnique\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">measurePreserving_funUnique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">_m</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(⇑<span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.funUnique\">MeasurableEquiv.funUnique</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">μ</span></span>)</span> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L772-L774","name":"MeasureTheory.volume_preserving_piUnique","line":772,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_preserving_piUnique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_preserving_piUnique\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">volume_preserving_piUnique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">X</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(⇑<span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.piUnique\">MeasurableEquiv.piUnique</a> <span class=\"fn\">X</span>)</span>)</span> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L759-L770","name":"MeasureTheory.measurePreserving_piUnique","line":759,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_piUnique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_piUnique\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">measurePreserving_piUnique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">X</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">X</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(⇑<span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.piUnique\">MeasurableEquiv.piUnique</a> <span class=\"fn\">X</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span> <span class=\"fn\">(<span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L754-L757","name":"MeasureTheory.volume_preserving_piFinSuccAbove","line":754,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_preserving_piFinSuccAbove","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_preserving_piFinSuccAbove\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">volume_preserving_piFinSuccAbove</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(⇑<span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.piFinSuccAbove\">MeasurableEquiv.piFinSuccAbove</a> <span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span>)</span> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L742-L752","name":"MeasureTheory.measurePreserving_piFinSuccAbove","line":742,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_piFinSuccAbove","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_piFinSuccAbove\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">measurePreserving_piFinSuccAbove</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(⇑<span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.piFinSuccAbove\">MeasurableEquiv.piFinSuccAbove</a> <span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span>\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/MeasureTheory/Measure/Prod.html#MeasureTheory.Measure.prod\">prod</a></span> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">fun (<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">μ</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Mathlib/Data/Fin/Basic.html#Fin.succAbove\">succAbove</a></span> <span class=\"fn\">j</span>)</span></span></span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L737-L740","name":"MeasureTheory.volume_measurePreserving_sumPiEquivProdPi","line":737,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_measurePreserving_sumPiEquivProdPi","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_measurePreserving_sumPiEquivProdPi\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">volume_measurePreserving_sumPiEquivProdPi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι'</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">ι'</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">ι'</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">X</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">ι'</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(⇑<span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.sumPiEquivProdPi\">MeasurableEquiv.sumPiEquivProdPi</a> <span class=\"fn\">X</span>)</span>)</span> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L731-L735","name":"MeasureTheory.measurePreserving_sumPiEquivProdPi","line":731,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_sumPiEquivProdPi","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_sumPiEquivProdPi\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">measurePreserving_sumPiEquivProdPi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι'</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">ι'</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">_m</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">ι'</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">X</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">ι'</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">X</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">ι'</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(⇑<span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.sumPiEquivProdPi\">MeasurableEquiv.sumPiEquivProdPi</a> <span class=\"fn\">X</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span>\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">μ</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">i</span>)</span></span></span>)</span>.<a href=\"./Mathlib/MeasureTheory/Measure/Prod.html#MeasureTheory.Measure.prod\">prod</a></span> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι'</span>) =&gt; <span class=\"fn\"><span class=\"fn\">μ</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">i</span>)</span></span></span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L726-L729","name":"MeasureTheory.volume_measurePreserving_sumPiEquivProdPi_symm","line":726,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_measurePreserving_sumPiEquivProdPi_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_measurePreserving_sumPiEquivProdPi_symm\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">volume_measurePreserving_sumPiEquivProdPi_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι'</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">ι'</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">ι'</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">X</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">ι'</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(⇑<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.sumPiEquivProdPi\">MeasurableEquiv.sumPiEquivProdPi</a> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.symm\">symm</a></span>)</span> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L715-L724","name":"MeasureTheory.measurePreserving_sumPiEquivProdPi_symm","line":715,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_sumPiEquivProdPi_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_sumPiEquivProdPi_symm\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">measurePreserving_sumPiEquivProdPi_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι'</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">ι'</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">ι'</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">X</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">ι'</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">X</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">ι'</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(⇑<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.sumPiEquivProdPi\">MeasurableEquiv.sumPiEquivProdPi</a> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.symm\">symm</a></span>)</span>\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">μ</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">i</span>)</span></span></span>)</span>.<a href=\"./Mathlib/MeasureTheory/Measure/Prod.html#MeasureTheory.Measure.prod\">prod</a></span> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι'</span>) =&gt; <span class=\"fn\"><span class=\"fn\">μ</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">i</span>)</span></span></span>)</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L709-L713","name":"MeasureTheory.volume_measurePreserving_arrowProdEquivProdArrow","line":709,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_measurePreserving_arrowProdEquivProdArrow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_measurePreserving_arrowProdEquivProdArrow\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">volume_measurePreserving_arrowProdEquivProdArrow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_6)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(⇑<span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.arrowProdEquivProdArrow\">MeasurableEquiv.arrowProdEquivProdArrow</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">γ</span>)</span>)</span> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L687-L707","name":"MeasureTheory.measurePreserving_arrowProdEquivProdArrow","line":687,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_arrowProdEquivProdArrow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_arrowProdEquivProdArrow\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">measurePreserving_arrowProdEquivProdArrow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_6)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ν</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">γ</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">γ</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">ν</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(⇑<span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.arrowProdEquivProdArrow\">MeasurableEquiv.arrowProdEquivProdArrow</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">γ</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">γ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/MeasureTheory/Measure/Prod.html#MeasureTheory.Measure.prod\">prod</a></span> <span class=\"fn\">(<span class=\"fn\">ν</span> <span class=\"fn\">i</span>)</span></span></span>)</span>\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">γ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">μ</span> <span class=\"fn\">i</span></span></span>)</span>.<a href=\"./Mathlib/MeasureTheory/Measure/Prod.html#MeasureTheory.Measure.prod\">prod</a></span> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">γ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">ν</span> <span class=\"fn\">i</span></span></span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L682-L685","name":"MeasureTheory.volume_measurePreserving_piCongrLeft","line":682,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_measurePreserving_piCongrLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_measurePreserving_piCongrLeft\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">volume_measurePreserving_piCongrLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι'</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">ι'</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">ι</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(⇑<span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.piCongrLeft\">MeasurableEquiv.piCongrLeft</a> <span class=\"fn\">α</span> <span class=\"fn\">f</span>)</span>)</span> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L673-L680","name":"MeasureTheory.measurePreserving_piCongrLeft","line":673,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_piCongrLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_piCongrLeft\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">measurePreserving_piCongrLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι'</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">ι'</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(⇑<span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.piCongrLeft\">MeasurableEquiv.piCongrLeft</a> <span class=\"fn\">α</span> <span class=\"fn\">f</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">fun (<span class=\"fn\">i'</span> : <span class=\"fn\">ι'</span>) =&gt; <span class=\"fn\"><span class=\"fn\">μ</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i'</span>)</span></span></span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L668-L671","name":"MeasureTheory.volume_preserving_piEquivPiSubtypeProd","line":668,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_preserving_piEquivPiSubtypeProd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_preserving_piEquivPiSubtypeProd\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">volume_preserving_piEquivPiSubtypeProd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(⇑<span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.piEquivPiSubtypeProd\">MeasurableEquiv.piEquivPiSubtypeProd</a> <span class=\"fn\">α</span> <span class=\"fn\">p</span>)</span>)</span> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L656-L666","name":"MeasureTheory.measurePreserving_piEquivPiSubtypeProd","line":656,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_piEquivPiSubtypeProd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_piEquivPiSubtypeProd\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">measurePreserving_piEquivPiSubtypeProd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasurePreserving</a> <span class=\"fn\">(⇑<span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.piEquivPiSubtypeProd\">MeasurableEquiv.piEquivPiSubtypeProd</a> <span class=\"fn\">α</span> <span class=\"fn\">p</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span>\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Subtype\">Subtype</a> <span class=\"fn\">p</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">μ</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span></span>)</span>.<a href=\"./Mathlib/MeasureTheory/Measure/Prod.html#MeasureTheory.Measure.prod\">prod</a></span> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">ι</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a>) =&gt; <span class=\"fn\"><span class=\"fn\">μ</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span></span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L633-L635","name":"MeasureTheory.Pi.isNegInvariant_volume","line":633,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Pi.isNegInvariant_volume","doc":"We intentionally restrict this only to the nondependent function space, since\ntype-class inference cannot find an instance for `ι → ℝ` when this is stated for dependent function\nspaces."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Pi.isNegInvariant_volume\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Pi</span>.<span class=\"name\">isNegInvariant_volume</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Arithmetic.html#MeasurableNeg\">MeasurableNeg</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a>.<a href=\"./Mathlib/MeasureTheory/Group/Measure.html#MeasureTheory.Measure.IsNegInvariant\">IsNegInvariant</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a>.<a href=\"./Mathlib/MeasureTheory/Group/Measure.html#MeasureTheory.Measure.IsNegInvariant\">IsNegInvariant</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L631-L639","name":"MeasureTheory.Pi.isInvInvariant_volume","line":631,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Pi.isInvInvariant_volume","doc":"We intentionally restrict this only to the nondependent function space, since type-class\ninference cannot find an instance for `ι → ℝ` when this is stated for dependent function spaces. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Pi.isInvInvariant_volume\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Pi</span>.<span class=\"name\">isInvInvariant_volume</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Arithmetic.html#MeasurableInv\">MeasurableInv</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a>.<a href=\"./Mathlib/MeasureTheory/Group/Measure.html#MeasureTheory.Measure.IsInvInvariant\">IsInvInvariant</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a>.<a href=\"./Mathlib/MeasureTheory/Group/Measure.html#MeasureTheory.Measure.IsInvInvariant\">IsInvInvariant</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L623-L625","name":"MeasureTheory.Pi.isAddLeftInvariant_volume","line":623,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Pi.isAddLeftInvariant_volume","doc":"We intentionally restrict this only to the nondependent function space, since\ntype-class inference cannot find an instance for `ι → ℝ` when this is stated for dependent function\nspaces."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Pi.isAddLeftInvariant_volume\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Pi</span>.<span class=\"name\">isAddLeftInvariant_volume</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Arithmetic.html#MeasurableAdd\">MeasurableAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddLeftInvariant\">IsAddLeftInvariant</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddLeftInvariant\">IsAddLeftInvariant</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L621-L629","name":"MeasureTheory.Pi.isMulLeftInvariant_volume","line":621,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Pi.isMulLeftInvariant_volume","doc":"We intentionally restrict this only to the nondependent function space, since type-class\ninference cannot find an instance for `ι → ℝ` when this is stated for dependent function spaces. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Pi.isMulLeftInvariant_volume\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Pi</span>.<span class=\"name\">isMulLeftInvariant_volume</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Arithmetic.html#MeasurableMul\">MeasurableMul</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulLeftInvariant\">IsMulLeftInvariant</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulLeftInvariant\">IsMulLeftInvariant</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L614-L617","name":"MeasureTheory.volume_pi_closedBall","line":614,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_pi_closedBall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_pi_closedBall\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">volume_pi_closedBall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Metric.closedBall\">Metric.closedBall</a> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∏ <span class=\"fn\">i</span> : <span class=\"fn\">ι</span>, <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Metric.closedBall\">Metric.closedBall</a> <span class=\"fn\">(<span class=\"fn\">x</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">r</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L609-L612","name":"MeasureTheory.volume_pi_ball","line":609,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_pi_ball","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_pi_ball\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">volume_pi_ball</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">r</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Metric.ball\">Metric.ball</a> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∏ <span class=\"fn\">i</span> : <span class=\"fn\">ι</span>, <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Metric.ball\">Metric.ball</a> <span class=\"fn\">(<span class=\"fn\">x</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">r</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L605-L607","name":"MeasureTheory.volume_pi_pi","line":605,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_pi_pi","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_pi_pi\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">volume_pi_pi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∏ <span class=\"fn\">i</span> : <span class=\"fn\">ι</span>, <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a> <span class=\"fn\">(<span class=\"fn\">s</span> <span class=\"fn\">i</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L601-L603","name":"MeasureTheory.volume_pi","line":601,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_pi","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.volume_pi\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">volume_pi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>) =&gt; <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L593-L593","name":"MeasureTheory.Measure.instIsAddHaarMeasureForallVolumeOfMeasurableAddOfSigmaFinite","line":593,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.instIsAddHaarMeasureForallVolumeOfMeasurableAddOfSigmaFinite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.instIsAddHaarMeasureForallVolumeOfMeasurableAddOfSigmaFinite\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">instIsAddHaarMeasureForallVolumeOfMeasurableAddOfSigmaFinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Arithmetic.html#MeasurableAdd\">MeasurableAdd</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a>.<a href=\"./Mathlib/MeasureTheory/Group/Measure.html#MeasureTheory.Measure.IsAddHaarMeasure\">IsAddHaarMeasure</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a>.<a href=\"./Mathlib/MeasureTheory/Group/Measure.html#MeasureTheory.Measure.IsAddHaarMeasure\">IsAddHaarMeasure</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L593-L597","name":"MeasureTheory.Measure.instIsHaarMeasureForallVolumeOfMeasurableMulOfSigmaFinite","line":593,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.instIsHaarMeasureForallVolumeOfMeasurableMulOfSigmaFinite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.instIsHaarMeasureForallVolumeOfMeasurableMulOfSigmaFinite\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">instIsHaarMeasureForallVolumeOfMeasurableMulOfSigmaFinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Arithmetic.html#MeasurableMul\">MeasurableMul</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a>.<a href=\"./Mathlib/MeasureTheory/Group/Measure.html#MeasureTheory.Measure.IsHaarMeasure\">IsHaarMeasure</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a>.<a href=\"./Mathlib/MeasureTheory/Group/Measure.html#MeasureTheory.Measure.IsHaarMeasure\">IsHaarMeasure</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L589-L589","name":"MeasureTheory.Measure.pi.isAddHaarMeasure","line":589,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi.isAddHaarMeasure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi.isAddHaarMeasure\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi</span>.<span class=\"name\">isAddHaarMeasure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/MeasureTheory/Group/Measure.html#MeasureTheory.Measure.IsAddHaarMeasure\">IsAddHaarMeasure</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Arithmetic.html#MeasurableAdd\">MeasurableAdd</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span>.<a href=\"./Mathlib/MeasureTheory/Group/Measure.html#MeasureTheory.Measure.IsAddHaarMeasure\">IsAddHaarMeasure</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L589-L591","name":"MeasureTheory.Measure.pi.isHaarMeasure","line":589,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi.isHaarMeasure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi.isHaarMeasure\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi</span>.<span class=\"name\">isHaarMeasure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/MeasureTheory/Group/Measure.html#MeasureTheory.Measure.IsHaarMeasure\">IsHaarMeasure</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Arithmetic.html#MeasurableMul\">MeasurableMul</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span>.<a href=\"./Mathlib/MeasureTheory/Group/Measure.html#MeasureTheory.Measure.IsHaarMeasure\">IsHaarMeasure</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L583-L587","name":"MeasureTheory.Measure.instIsFiniteMeasureOnCompactsForallVolumeOfSigmaFinite","line":583,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.instIsFiniteMeasureOnCompactsForallVolumeOfSigmaFinite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.instIsFiniteMeasureOnCompactsForallVolumeOfSigmaFinite\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">instIsFiniteMeasureOnCompactsForallVolumeOfSigmaFinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">X</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\">X</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsFiniteMeasureOnCompacts\">IsFiniteMeasureOnCompacts</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsFiniteMeasureOnCompacts\">IsFiniteMeasureOnCompacts</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L572-L581","name":"MeasureTheory.Measure.pi.isFiniteMeasureOnCompacts","line":572,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi.isFiniteMeasureOnCompacts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi.isFiniteMeasureOnCompacts\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi</span>.<span class=\"name\">isFiniteMeasureOnCompacts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsFiniteMeasureOnCompacts\">IsFiniteMeasureOnCompacts</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsFiniteMeasureOnCompacts\">IsFiniteMeasureOnCompacts</a> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L567-L570","name":"MeasureTheory.Measure.instIsOpenPosMeasureForallVolumeOfSigmaFinite","line":567,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.instIsOpenPosMeasureForallVolumeOfSigmaFinite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.instIsOpenPosMeasureForallVolumeOfSigmaFinite\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">instIsOpenPosMeasureForallVolumeOfSigmaFinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\">X</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">X</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a>.<a href=\"./Mathlib/MeasureTheory/Measure/OpenPos.html#MeasureTheory.Measure.IsOpenPosMeasure\">IsOpenPosMeasure</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a>.<a href=\"./Mathlib/MeasureTheory/Measure/OpenPos.html#MeasureTheory.Measure.IsOpenPosMeasure\">IsOpenPosMeasure</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L556-L565","name":"MeasureTheory.Measure.pi.isOpenPosMeasure","line":556,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi.isOpenPosMeasure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi.isOpenPosMeasure\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi</span>.<span class=\"name\">isOpenPosMeasure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/MeasureTheory/Measure/OpenPos.html#MeasureTheory.Measure.IsOpenPosMeasure\">IsOpenPosMeasure</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span>.<a href=\"./Mathlib/MeasureTheory/Measure/OpenPos.html#MeasureTheory.Measure.IsOpenPosMeasure\">IsOpenPosMeasure</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L550-L550","name":"MeasureTheory.Measure.instIsNegInvariantForallVolumeOfMeasurableNegOfSigmaFinite","line":550,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.instIsNegInvariantForallVolumeOfMeasurableNegOfSigmaFinite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.instIsNegInvariantForallVolumeOfMeasurableNegOfSigmaFinite\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">instIsNegInvariantForallVolumeOfMeasurableNegOfSigmaFinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Arithmetic.html#MeasurableNeg\">MeasurableNeg</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a>.<a href=\"./Mathlib/MeasureTheory/Group/Measure.html#MeasureTheory.Measure.IsNegInvariant\">IsNegInvariant</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a>.<a href=\"./Mathlib/MeasureTheory/Group/Measure.html#MeasureTheory.Measure.IsNegInvariant\">IsNegInvariant</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L550-L554","name":"MeasureTheory.Measure.instIsInvInvariantForallVolumeOfMeasurableInvOfSigmaFinite","line":550,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.instIsInvInvariantForallVolumeOfMeasurableInvOfSigmaFinite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.instIsInvInvariantForallVolumeOfMeasurableInvOfSigmaFinite\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">instIsInvInvariantForallVolumeOfMeasurableInvOfSigmaFinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Arithmetic.html#MeasurableInv\">MeasurableInv</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a>.<a href=\"./Mathlib/MeasureTheory/Group/Measure.html#MeasureTheory.Measure.IsInvInvariant\">IsInvInvariant</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a>.<a href=\"./Mathlib/MeasureTheory/Group/Measure.html#MeasureTheory.Measure.IsInvInvariant\">IsInvInvariant</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L542-L542","name":"MeasureTheory.Measure.pi.isNegInvariant","line":542,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi.isNegInvariant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi.isNegInvariant\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi</span>.<span class=\"name\">isNegInvariant</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Arithmetic.html#MeasurableNeg\">MeasurableNeg</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/MeasureTheory/Group/Measure.html#MeasureTheory.Measure.IsNegInvariant\">IsNegInvariant</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span>.<a href=\"./Mathlib/MeasureTheory/Group/Measure.html#MeasureTheory.Measure.IsNegInvariant\">IsNegInvariant</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L542-L548","name":"MeasureTheory.Measure.pi.isInvInvariant","line":542,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi.isInvInvariant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi.isInvInvariant\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi</span>.<span class=\"name\">isInvInvariant</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Arithmetic.html#MeasurableInv\">MeasurableInv</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/MeasureTheory/Group/Measure.html#MeasureTheory.Measure.IsInvInvariant\">IsInvInvariant</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span>.<a href=\"./Mathlib/MeasureTheory/Group/Measure.html#MeasureTheory.Measure.IsInvInvariant\">IsInvInvariant</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L535-L535","name":"MeasureTheory.Measure.instIsAddRightInvariantForallVolumeOfMeasurableAddOfSigmaFinite","line":535,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.instIsAddRightInvariantForallVolumeOfMeasurableAddOfSigmaFinite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.instIsAddRightInvariantForallVolumeOfMeasurableAddOfSigmaFinite\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">instIsAddRightInvariantForallVolumeOfMeasurableAddOfSigmaFinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Arithmetic.html#MeasurableAdd\">MeasurableAdd</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddRightInvariant\">IsAddRightInvariant</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddRightInvariant\">IsAddRightInvariant</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L535-L540","name":"MeasureTheory.Measure.instIsMulRightInvariantForallVolumeOfMeasurableMulOfSigmaFinite","line":535,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.instIsMulRightInvariantForallVolumeOfMeasurableMulOfSigmaFinite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.instIsMulRightInvariantForallVolumeOfMeasurableMulOfSigmaFinite\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">instIsMulRightInvariantForallVolumeOfMeasurableMulOfSigmaFinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Arithmetic.html#MeasurableMul\">MeasurableMul</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulRightInvariant\">IsMulRightInvariant</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulRightInvariant\">IsMulRightInvariant</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L527-L527","name":"MeasureTheory.Measure.pi.isAddRightInvariant","line":527,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi.isAddRightInvariant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi.isAddRightInvariant\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi</span>.<span class=\"name\">isAddRightInvariant</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Arithmetic.html#MeasurableAdd\">MeasurableAdd</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddRightInvariant\">IsAddRightInvariant</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddRightInvariant\">IsAddRightInvariant</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L527-L533","name":"MeasureTheory.Measure.pi.isMulRightInvariant","line":527,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi.isMulRightInvariant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi.isMulRightInvariant\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi</span>.<span class=\"name\">isMulRightInvariant</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Arithmetic.html#MeasurableMul\">MeasurableMul</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulRightInvariant\">IsMulRightInvariant</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulRightInvariant\">IsMulRightInvariant</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L521-L521","name":"MeasureTheory.Measure.instIsAddLeftInvariantForallVolumeOfMeasurableAddOfSigmaFinite","line":521,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.instIsAddLeftInvariantForallVolumeOfMeasurableAddOfSigmaFinite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.instIsAddLeftInvariantForallVolumeOfMeasurableAddOfSigmaFinite\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">instIsAddLeftInvariantForallVolumeOfMeasurableAddOfSigmaFinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Arithmetic.html#MeasurableAdd\">MeasurableAdd</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddLeftInvariant\">IsAddLeftInvariant</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddLeftInvariant\">IsAddLeftInvariant</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L521-L525","name":"MeasureTheory.Measure.instIsMulLeftInvariantForallVolumeOfMeasurableMulOfSigmaFinite","line":521,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.instIsMulLeftInvariantForallVolumeOfMeasurableMulOfSigmaFinite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.instIsMulLeftInvariantForallVolumeOfMeasurableMulOfSigmaFinite\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">instIsMulLeftInvariantForallVolumeOfMeasurableMulOfSigmaFinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Arithmetic.html#MeasurableMul\">MeasurableMul</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulLeftInvariant\">IsMulLeftInvariant</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulLeftInvariant\">IsMulLeftInvariant</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L513-L513","name":"MeasureTheory.Measure.pi.isAddLeftInvariant","line":513,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi.isAddLeftInvariant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi.isAddLeftInvariant\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi</span>.<span class=\"name\">isAddLeftInvariant</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Arithmetic.html#MeasurableAdd\">MeasurableAdd</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddLeftInvariant\">IsAddLeftInvariant</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddLeftInvariant\">IsAddLeftInvariant</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L513-L519","name":"MeasureTheory.Measure.pi.isMulLeftInvariant","line":513,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi.isMulLeftInvariant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi.isMulLeftInvariant\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi</span>.<span class=\"name\">isMulLeftInvariant</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Arithmetic.html#MeasurableMul\">MeasurableMul</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulLeftInvariant\">IsMulLeftInvariant</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulLeftInvariant\">IsMulLeftInvariant</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L505-L509","name":"MeasureTheory.Measure.instIsLocallyFiniteMeasureForallVolumeOfSigmaFinite","line":505,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.instIsLocallyFiniteMeasureForallVolumeOfSigmaFinite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.instIsLocallyFiniteMeasureForallVolumeOfSigmaFinite\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">instIsLocallyFiniteMeasureForallVolumeOfSigmaFinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\">X</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">X</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsLocallyFiniteMeasure\">IsLocallyFiniteMeasure</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsLocallyFiniteMeasure\">IsLocallyFiniteMeasure</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L496-L503","name":"MeasureTheory.Measure.pi.isLocallyFiniteMeasure","line":496,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi.isLocallyFiniteMeasure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi.isLocallyFiniteMeasure\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi</span>.<span class=\"name\">isLocallyFiniteMeasure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsLocallyFiniteMeasure\">IsLocallyFiniteMeasure</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsLocallyFiniteMeasure\">IsLocallyFiniteMeasure</a> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L491-L494","name":"MeasureTheory.Measure.instNoAtomsForallVolumeOfNonemptyOfSigmaFinite","line":491,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.instNoAtomsForallVolumeOfNonemptyOfSigmaFinite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.instNoAtomsForallVolumeOfNonemptyOfSigmaFinite\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">instNoAtomsForallVolumeOfNonemptyOfSigmaFinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/NoAtoms.html#MeasureTheory.NoAtoms\">NoAtoms</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/NoAtoms.html#MeasureTheory.NoAtoms\">NoAtoms</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L488-L489","name":"MeasureTheory.Measure.pi_noAtoms'","line":488,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_noAtoms'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_noAtoms'\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi_noAtoms'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/NoAtoms.html#MeasureTheory.NoAtoms\">NoAtoms</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/NoAtoms.html#MeasureTheory.NoAtoms\">NoAtoms</a> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L483-L486","name":"MeasureTheory.Measure.pi_noAtoms","line":483,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_noAtoms","doc":"If one of the measures `μ i` has no atoms, them `Measure.pi µ`\nhas no atoms. The instance below assumes that all `μ i` have no atoms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_noAtoms\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi_noAtoms</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/NoAtoms.html#MeasureTheory.NoAtoms\">NoAtoms</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/NoAtoms.html#MeasureTheory.NoAtoms\">NoAtoms</a> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L477-L479","name":"MeasureTheory.Measure.univ_pi_Ico_ae_eq_Icc","line":477,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.univ_pi_Ico_ae_eq_Icc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.univ_pi_Ico_ae_eq_Icc\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">univ_pi_Ico_ae_eq_Icc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/NoAtoms.html#MeasureTheory.NoAtoms\">NoAtoms</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ico\">Set.Ico</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">i</span>)</span></span></span>)</span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/AE.html#MeasureTheory.ae\">ae</a> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">]</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L473-L475","name":"MeasureTheory.Measure.pi_Ico_ae_eq_pi_Icc","line":473,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_Ico_ae_eq_pi_Icc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_Ico_ae_eq_pi_Icc\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi_Ico_ae_eq_pi_Icc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/NoAtoms.html#MeasureTheory.NoAtoms\">NoAtoms</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ico\">Set.Ico</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">i</span>)</span></span></span>)</span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/AE.html#MeasureTheory.ae\">ae</a> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">]</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">i</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L469-L471","name":"MeasureTheory.Measure.univ_pi_Ioc_ae_eq_Icc","line":469,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.univ_pi_Ioc_ae_eq_Icc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.univ_pi_Ioc_ae_eq_Icc\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">univ_pi_Ioc_ae_eq_Icc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/NoAtoms.html#MeasureTheory.NoAtoms\">NoAtoms</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioc\">Set.Ioc</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">i</span>)</span></span></span>)</span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/AE.html#MeasureTheory.ae\">ae</a> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">]</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L465-L467","name":"MeasureTheory.Measure.pi_Ioc_ae_eq_pi_Icc","line":465,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_Ioc_ae_eq_pi_Icc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_Ioc_ae_eq_pi_Icc\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi_Ioc_ae_eq_pi_Icc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/NoAtoms.html#MeasureTheory.NoAtoms\">NoAtoms</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioc\">Set.Ioc</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">i</span>)</span></span></span>)</span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/AE.html#MeasureTheory.ae\">ae</a> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">]</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">i</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L461-L463","name":"MeasureTheory.Measure.univ_pi_Ioo_ae_eq_Icc","line":461,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.univ_pi_Ioo_ae_eq_Icc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.univ_pi_Ioo_ae_eq_Icc\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">univ_pi_Ioo_ae_eq_Icc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/NoAtoms.html#MeasureTheory.NoAtoms\">NoAtoms</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioo\">Set.Ioo</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">i</span>)</span></span></span>)</span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/AE.html#MeasureTheory.ae\">ae</a> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">]</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L457-L459","name":"MeasureTheory.Measure.pi_Ioo_ae_eq_pi_Ioc","line":457,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_Ioo_ae_eq_pi_Ioc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_Ioo_ae_eq_pi_Ioc\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi_Ioo_ae_eq_pi_Ioc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/NoAtoms.html#MeasureTheory.NoAtoms\">NoAtoms</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioo\">Set.Ioo</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">i</span>)</span></span></span>)</span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/AE.html#MeasureTheory.ae\">ae</a> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">]</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioc\">Set.Ioc</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">i</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L453-L455","name":"MeasureTheory.Measure.pi_Ioo_ae_eq_pi_Icc","line":453,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_Ioo_ae_eq_pi_Icc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_Ioo_ae_eq_pi_Icc\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi_Ioo_ae_eq_pi_Icc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/NoAtoms.html#MeasureTheory.NoAtoms\">NoAtoms</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioo\">Set.Ioo</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">i</span>)</span></span></span>)</span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/AE.html#MeasureTheory.ae\">ae</a> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">]</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">i</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L449-L451","name":"MeasureTheory.Measure.univ_pi_Ioi_ae_eq_Ici","line":449,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.univ_pi_Ioi_ae_eq_Ici","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.univ_pi_Ioi_ae_eq_Ici\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">univ_pi_Ioi_ae_eq_Ici</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/NoAtoms.html#MeasureTheory.NoAtoms\">NoAtoms</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span></span></span>)</span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/AE.html#MeasureTheory.ae\">ae</a> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">]</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ici\">Set.Ici</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L445-L447","name":"MeasureTheory.Measure.univ_pi_Iio_ae_eq_Iic","line":445,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.univ_pi_Iio_ae_eq_Iic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.univ_pi_Iio_ae_eq_Iic\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">univ_pi_Iio_ae_eq_Iic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/NoAtoms.html#MeasureTheory.NoAtoms\">NoAtoms</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Iio\">Set.Iio</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span></span></span>)</span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/AE.html#MeasureTheory.ae\">ae</a> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">]</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Iic\">Set.Iic</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L441-L443","name":"MeasureTheory.Measure.pi_Ioi_ae_eq_pi_Ici","line":441,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_Ioi_ae_eq_pi_Ici","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_Ioi_ae_eq_pi_Ici\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi_Ioi_ae_eq_pi_Ici</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/NoAtoms.html#MeasureTheory.NoAtoms\">NoAtoms</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span></span></span>)</span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/AE.html#MeasureTheory.ae\">ae</a> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">]</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ici\">Set.Ici</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L437-L439","name":"MeasureTheory.Measure.pi_Iio_ae_eq_pi_Iic","line":437,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_Iio_ae_eq_pi_Iic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_Iio_ae_eq_pi_Iic\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi_Iio_ae_eq_pi_Iic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/NoAtoms.html#MeasureTheory.NoAtoms\">NoAtoms</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Iio\">Set.Iio</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span></span></span>)</span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/AE.html#MeasureTheory.ae\">ae</a> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">]</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Iic\">Set.Iic</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L417-L431","name":"MeasureTheory.Measure.pi_map_piOptionEquivProd","line":417,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_map_piOptionEquivProd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_map_piOptionEquivProd\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi_map_piOptionEquivProd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">ι</span></span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">ι</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">ι</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">ι</span></span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Map.html#MeasureTheory.Measure.map\">map</a> <span class=\"fn\">(⇑<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.piOptionEquivProd\">MeasurableEquiv.piOptionEquivProd</a> <span class=\"fn\">β</span>)</span>.<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.symm\">symm</a></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">μ</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">i</span>)</span></span></span>)</span>.<a href=\"./Mathlib/MeasureTheory/Measure/Prod.html#MeasureTheory.Measure.prod\">prod</a></span> <span class=\"fn\">(<span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L395-L415","name":"MeasureTheory.Measure.pi_map_piCongrLeft","line":395,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_map_piCongrLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_map_piCongrLeft\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi_map_piCongrLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι'</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hι'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">ι</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">ι'</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">ι'</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι'</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι'</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι'</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Map.html#MeasureTheory.Measure.map\">map</a> <span class=\"fn\">(⇑<span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Embedding.html#MeasurableEquiv.piCongrLeft\">MeasurableEquiv.piCongrLeft</a> <span class=\"fn\">(fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι'</span>) =&gt; <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">e</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">μ</span> <span class=\"fn\">(<span class=\"fn\">e</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L391-L393","name":"MeasureTheory.Measure.ae_eq_set_pi","line":391,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.ae_eq_set_pi","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.ae_eq_set_pi\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">ae_eq_set_pi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ <span class=\"fn\">i</span> ∈ <span class=\"fn\">I</span>, <span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/AE.html#MeasureTheory.ae\">ae</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">]</a> <span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">s</span></span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/AE.html#MeasureTheory.ae\">ae</a> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">]</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L386-L389","name":"MeasureTheory.Measure.ae_le_set_pi","line":386,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.ae_le_set_pi","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.ae_le_set_pi\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">ae_le_set_pi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ <span class=\"fn\">i</span> ∈ <span class=\"fn\">I</span>, <span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyLE\">≤ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/AE.html#MeasureTheory.ae\">ae</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyLE\">]</a> <span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">s</span></span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyLE\">≤ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/AE.html#MeasureTheory.ae\">ae</a> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyLE\">]</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L381-L384","name":"MeasureTheory.Measure.ae_le_pi","line":381,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.ae_le_pi","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.ae_le_pi\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">ae_le_pi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">f'</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">i</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyLE\">≤ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/AE.html#MeasureTheory.ae\">ae</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyLE\">]</a> <span class=\"fn\"><span class=\"fn\">f'</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\">x</span> <span class=\"fn\">i</span>)</span></span>)</span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyLE\">≤ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/AE.html#MeasureTheory.ae\">ae</a> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyLE\">]</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f'</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\">x</span> <span class=\"fn\">i</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L377-L379","name":"MeasureTheory.Measure.ae_eq_pi","line":377,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.ae_eq_pi","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.ae_eq_pi\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">ae_eq_pi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">f'</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">i</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/AE.html#MeasureTheory.ae\">ae</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">]</a> <span class=\"fn\"><span class=\"fn\">f'</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\">x</span> <span class=\"fn\">i</span>)</span></span>)</span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/AE.html#MeasureTheory.ae\">ae</a> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f'</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\">x</span> <span class=\"fn\">i</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L374-L375","name":"MeasureTheory.Measure.ae_pi_le_pi","line":374,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.ae_pi_le_pi","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.ae_pi_le_pi\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">ae_pi_le_pi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/AE.html#MeasureTheory.ae\">ae</a> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.pi\">Filter.pi</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/AE.html#MeasureTheory.ae\">ae</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L371-L372","name":"MeasureTheory.Measure.tendsto_eval_ae_ae","line":371,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.tendsto_eval_ae_ae","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.tendsto_eval_ae_ae\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">tendsto_eval_ae_ae</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Function/Basic.html#Function.eval\">Function.eval</a> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/OuterMeasure/AE.html#MeasureTheory.ae\">ae</a> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/OuterMeasure/AE.html#MeasureTheory.ae\">ae</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L363-L367","name":"MeasureTheory.Measure.restrict_pi_pi","line":363,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.restrict_pi_pi","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.restrict_pi_pi\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">restrict_pi_pi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span>.<a href=\"./Mathlib/MeasureTheory/Measure/Restrict.html#MeasureTheory.Measure.restrict\">restrict</a></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">i</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/MeasureTheory/Measure/Restrict.html#MeasureTheory.Measure.restrict\">restrict</a></span> <span class=\"fn\">(<span class=\"fn\">s</span> <span class=\"fn\">i</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L360-L361","name":"MeasureTheory.Measure.ae_eval_ne","line":360,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.ae_eval_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.ae_eval_ne\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">ae_eval_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/NoAtoms.html#MeasureTheory.NoAtoms\">NoAtoms</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">∀ᵐ</a> (<span class=\"fn\">y</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">∂</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\"><span class=\"fn\">y</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L356-L358","name":"MeasureTheory.Measure.pi_hyperplane","line":356,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_hyperplane","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_hyperplane\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi_hyperplane</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/NoAtoms.html#MeasureTheory.NoAtoms\">NoAtoms</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L345-L354","name":"MeasureTheory.Measure.pi_eval_preimage_null","line":345,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_eval_preimage_null","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_eval_preimage_null\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi_eval_preimage_null</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span> (<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.eval\">Function.eval</a> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Data/Set/Operations.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L339-L343","name":"MeasureTheory.Measure.pi_empty_univ","line":339,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_empty_univ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_empty_univ\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi_empty_univ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\">(<span class=\"fn\">α</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">α</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L334-L337","name":"MeasureTheory.Measure.volume_pi_eq_dirac","line":334,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.volume_pi_eq_dirac","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.volume_pi_eq_dirac\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">volume_pi_eq_dirac</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">a</span></span></span> := <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#isEmptyElim\">isEmptyElim</a> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Dirac.html#MeasureTheory.Measure.dirac\">dirac</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L326-L332","name":"MeasureTheory.Measure.pi_of_empty","line":326,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_of_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_of_empty\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi_of_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span> := <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#isEmptyElim\">isEmptyElim</a> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Dirac.html#MeasureTheory.Measure.dirac\">dirac</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L321-L324","name":"MeasureTheory.Measure.instIsProbabilityMeasureForallVolume","line":321,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.instIsProbabilityMeasureForallVolume","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.instIsProbabilityMeasureForallVolume\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">instIsProbabilityMeasureForallVolume</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Probability.html#MeasureTheory.IsProbabilityMeasure\">IsProbabilityMeasure</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Probability.html#MeasureTheory.IsProbabilityMeasure\">IsProbabilityMeasure</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L317-L319","name":"MeasureTheory.Measure.pi.instIsProbabilityMeasure","line":317,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi.instIsProbabilityMeasure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi.instIsProbabilityMeasure\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi</span>.<span class=\"name\">instIsProbabilityMeasure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Probability.html#MeasureTheory.IsProbabilityMeasure\">IsProbabilityMeasure</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Probability.html#MeasureTheory.IsProbabilityMeasure\">IsProbabilityMeasure</a> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L313-L315","name":"MeasureTheory.Measure.instIsFiniteMeasureForallVolume","line":313,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.instIsFiniteMeasureForallVolume","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.instIsFiniteMeasureForallVolume\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">instIsFiniteMeasureForallVolume</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsFiniteMeasure\">IsFiniteMeasure</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsFiniteMeasure\">IsFiniteMeasure</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L309-L311","name":"MeasureTheory.Measure.pi.instIsFiniteMeasure","line":309,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi.instIsFiniteMeasure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi.instIsFiniteMeasure\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi</span>.<span class=\"name\">instIsFiniteMeasure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsFiniteMeasure\">IsFiniteMeasure</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsFiniteMeasure\">IsFiniteMeasure</a> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L305-L307","name":"MeasureTheory.Measure.instSigmaFiniteForallVolume","line":305,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.instSigmaFiniteForallVolume","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.instSigmaFiniteForallVolume\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">instSigmaFiniteForallVolume</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace.volume\">volume</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L302-L303","name":"MeasureTheory.Measure.pi.sigmaFinite","line":302,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi.sigmaFinite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi.sigmaFinite\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi</span>.<span class=\"name\">sigmaFinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L298-L300","name":"MeasureTheory.Measure.pi_closedBall","line":298,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_closedBall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_closedBall\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi_closedBall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Metric.closedBall\">Metric.closedBall</a> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∏ <span class=\"fn\">i</span> : <span class=\"fn\">ι</span>, <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Metric.closedBall\">Metric.closedBall</a> <span class=\"fn\">(<span class=\"fn\">x</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">r</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L295-L296","name":"MeasureTheory.Measure.pi_ball","line":295,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_ball","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_ball\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi_ball</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">r</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Metric.ball\">Metric.ball</a> <span class=\"fn\">x</span> <span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∏ <span class=\"fn\">i</span> : <span class=\"fn\">ι</span>, <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Metric.ball\">Metric.ball</a> <span class=\"fn\">(<span class=\"fn\">x</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">r</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L293-L293","name":"MeasureTheory.Measure.pi_univ","line":293,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_univ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_univ\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi_univ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∏ <span class=\"fn\">i</span> : <span class=\"fn\">ι</span>, <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L288-L291","name":"MeasureTheory.Measure.pi_pi","line":288,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_pi","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_pi\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi_pi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∏ <span class=\"fn\">i</span> : <span class=\"fn\">ι</span>, <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">s</span> <span class=\"fn\">i</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L285-L286","name":"MeasureTheory.Measure.pi'_eq_pi","line":285,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi'_eq_pi","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi'_eq_pi\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi'_eq_pi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Encodable/Basic.html#Encodable\">Encodable</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi'\">pi'</a> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L275-L281","name":"MeasureTheory.Measure.pi_eq","line":275,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_eq","doc":"A measure on a finite product space equals the product measure if they are equal on\nrectangles. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_eq\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ'</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">((<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">s</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>), <span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">(<span class=\"fn\">s</span> <span class=\"fn\">i</span>)</span></span>)</span> → <span class=\"fn\"><span class=\"fn\">μ'</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∏ <span class=\"fn\">i</span> : <span class=\"fn\">ι</span>, <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">s</span> <span class=\"fn\">i</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">μ'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L256-L271","name":"MeasureTheory.Measure.pi_eq_generateFrom","line":256,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_eq_generateFrom","doc":"A measure on a finite product space equals the product measure if they are equal on rectangles\nwith as sides sets that generate the corresponding σ-algebras. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_eq_generateFrom\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi_eq_generateFrom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace.generateFrom\">MeasurableSpace.generateFrom</a> <span class=\"fn\">(<span class=\"fn\">C</span> <span class=\"fn\">i</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">inst✝</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2C</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/PiSystem.html#IsPiSystem\">IsPiSystem</a> <span class=\"fn\">(<span class=\"fn\">C</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h3C</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.Measure.FiniteSpanningSetsIn\">FiniteSpanningSetsIn</a></span> <span class=\"fn\">(<span class=\"fn\">C</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μν</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">((<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">∀ (<span class=\"fn\">s</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>), <span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">i</span></span>)</span> → <span class=\"fn\"><span class=\"fn\">μν</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∏ <span class=\"fn\">i</span> : <span class=\"fn\">ι</span>, <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">s</span> <span class=\"fn\">i</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">μν</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L230-L254","name":"MeasureTheory.Measure.FiniteSpanningSetsIn.pi","line":230,"kind":"def","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.FiniteSpanningSetsIn.pi","doc":"`Measure.pi μ` has finite spanning sets in rectangles of finite spanning sets. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.FiniteSpanningSetsIn.pi\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">FiniteSpanningSetsIn</span>.<span class=\"name\">pi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hμ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.Measure.FiniteSpanningSetsIn\">FiniteSpanningSetsIn</a></span> <span class=\"fn\">(<span class=\"fn\">C</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span>.<a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.Measure.FiniteSpanningSetsIn\">FiniteSpanningSetsIn</a></span> (<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">C</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L214-L226","name":"MeasureTheory.Measure.pi_pi_aux","line":214,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_pi_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_pi_aux\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi_pi_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">(<span class=\"fn\">s</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∏ <span class=\"fn\">i</span> : <span class=\"fn\">ι</span>, <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">s</span> <span class=\"fn\">i</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L210-L212","name":"MeasureTheory.MeasureSpace.pi","line":210,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.MeasureSpace.pi","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.MeasureSpace.pi\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">MeasureSpace</span>.<span class=\"name\">pi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.MeasureSpace\">MeasureSpace</a> <span class=\"fn\">((<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L205-L208","name":"MeasureTheory.Measure.pi_def","line":205,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_def\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\">Measure.pi</a> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.OuterMeasure.pi\">OuterMeasure.pi</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.toOuterMeasure\">toOuterMeasure</a></span></span>)</span>.<a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpace.html#MeasureTheory.OuterMeasure.toMeasure\">toMeasure</a></span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L205-L208","name":"MeasureTheory.Measure.pi","line":205,"kind":"def","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi","doc":"`Measure.pi μ` is the finite product of the measures `{μ i | i : ι}`.\nIt is defined to be measure corresponding to `MeasureTheory.OuterMeasure.pi`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">((<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L191-L203","name":"MeasureTheory.Measure.pi_caratheodory","line":191,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_caratheodory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi_caratheodory\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi_caratheodory</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Constructions.html#MeasurableSpace.pi\">MeasurableSpace.pi</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.OuterMeasure.pi\">OuterMeasure.pi</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.toOuterMeasure\">toOuterMeasure</a></span></span>)</span>.<a href=\"./Mathlib/MeasureTheory/OuterMeasure/Caratheodory.html#MeasureTheory.OuterMeasure.caratheodory\">caratheodory</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L180-L187","name":"MeasureTheory.Measure.pi'_pi","line":180,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi'_pi","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi'_pi\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi'_pi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Encodable/Basic.html#Encodable\">Encodable</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi'\">pi'</a> <span class=\"fn\">μ</span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∏ <span class=\"fn\">i</span> : <span class=\"fn\">ι</span>, <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">s</span> <span class=\"fn\">i</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L174-L178","name":"MeasureTheory.Measure.pi'","line":174,"kind":"def","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi'","doc":"The product measure on an encodable finite type, defined by mapping `Measure.tprod` along the\nequivalence `MeasurableEquiv.piMeasurableEquivTProd`.\nThe definition `MeasureTheory.Measure.pi` should be used instead of this one. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.pi'\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">pi'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Encodable/Basic.html#Encodable\">Encodable</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">((<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L155-L163","name":"MeasureTheory.Measure.tprod_tprod","line":155,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.tprod_tprod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.tprod_tprod\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">tprod_tprod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">δ</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">X</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">δ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">δ</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">X</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">δ</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">δ</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">X</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.tprod\">Measure.tprod</a> <span class=\"fn\">l</span> <span class=\"fn\">μ</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Prod/TProd.html#Set.tprod\">Set.tprod</a> <span class=\"fn\">l</span> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">i</span> : <span class=\"fn\">δ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">s</span> <span class=\"fn\">i</span>)</span></span>)</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/List/Defs.html#List.prod\">prod</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L149-L153","name":"MeasureTheory.Measure.sigmaFinite_tprod","line":149,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.sigmaFinite_tprod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.sigmaFinite_tprod\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">sigmaFinite_tprod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">δ</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">X</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">δ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">δ</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">X</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">δ</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/SFinite.html#MeasureTheory.SigmaFinite\">SigmaFinite</a> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.tprod\">Measure.tprod</a> <span class=\"fn\">l</span> <span class=\"fn\">μ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L144-L147","name":"MeasureTheory.Measure.tprod_cons","line":144,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.tprod_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.tprod_cons\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">tprod_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">δ</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">X</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">δ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">δ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">δ</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">X</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.tprod\">Measure.tprod</a> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span>) <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/MeasureTheory/Measure/Prod.html#MeasureTheory.Measure.prod\">prod</a></span> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.tprod\">Measure.tprod</a> <span class=\"fn\">l</span> <span class=\"fn\">μ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L140-L142","name":"MeasureTheory.Measure.tprod_nil","line":140,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.tprod_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.tprod_nil\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">tprod_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">δ</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">X</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">δ</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">X</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.tprod\">Measure.tprod</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Dirac.html#MeasureTheory.Measure.dirac\">dirac</a> <a href=\"./Init/Prelude.html#PUnit.unit\">PUnit.unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L134-L138","name":"MeasureTheory.Measure.tprod","line":134,"kind":"def","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.tprod","doc":"A product of measures in `tprod α l`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.Measure.tprod\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">tprod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">δ</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\">X</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">δ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">δ</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<span class=\"fn\">X</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Prod/TProd.html#List.TProd\">List.TProd</a> <span class=\"fn\">X</span> <span class=\"fn\">l</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L113-L119","name":"MeasureTheory.OuterMeasure.le_pi","line":113,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.OuterMeasure.le_pi","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.OuterMeasure.le_pi\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">OuterMeasure</span>.<span class=\"name\">le_pi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/Defs.html#MeasureTheory.OuterMeasure\">OuterMeasure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/Defs.html#MeasureTheory.OuterMeasure\">OuterMeasure</a> <span class=\"fn\">((<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.OuterMeasure.pi\">OuterMeasure.pi</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">s</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Data/Set/Defs.html#Set.Nonempty\">Nonempty</a></span> → <span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">∏ <span class=\"fn\">i</span> : <span class=\"fn\">ι</span>, <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">s</span> <span class=\"fn\">i</span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L107-L111","name":"MeasureTheory.OuterMeasure.pi_pi_le","line":107,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.OuterMeasure.pi_pi_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.OuterMeasure.pi_pi_le\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">OuterMeasure</span>.<span class=\"name\">pi_pi_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/Defs.html#MeasureTheory.OuterMeasure\">OuterMeasure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.OuterMeasure.pi\">OuterMeasure.pi</a> <span class=\"fn\">m</span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">∏ <span class=\"fn\">i</span> : <span class=\"fn\">ι</span>, <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">s</span> <span class=\"fn\">i</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L100-L105","name":"MeasureTheory.OuterMeasure.pi","line":100,"kind":"def","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.OuterMeasure.pi","doc":"`OuterMeasure.pi m` is the finite product of the outer measures `{m i | i : ι}`.\nIt is defined to be the maximal outer measure `n` with the property that\n`n (pi univ s) ≤ ∏ i, m i (s i)`, where `pi univ s` is the product of the sets\n`{s i | i : ι}`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.OuterMeasure.pi\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">OuterMeasure</span>.<span class=\"name\">pi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/Defs.html#MeasureTheory.OuterMeasure\">OuterMeasure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/Defs.html#MeasureTheory.OuterMeasure\">OuterMeasure</a> <span class=\"fn\">((<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L94-L96","name":"MeasureTheory.piPremeasure_pi_eval","line":94,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.piPremeasure_pi_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.piPremeasure_pi_eval\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">piPremeasure_pi_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/Defs.html#MeasureTheory.OuterMeasure\">OuterMeasure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">((<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.piPremeasure\">piPremeasure</a> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.eval\">Function.eval</a> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.piPremeasure\">piPremeasure</a> <span class=\"fn\">m</span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L90-L92","name":"MeasureTheory.piPremeasure_pi_mono","line":90,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.piPremeasure_pi_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.piPremeasure_pi_mono\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">piPremeasure_pi_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/Defs.html#MeasureTheory.OuterMeasure\">OuterMeasure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">((<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">s</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.piPremeasure\">piPremeasure</a> <span class=\"fn\">m</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.piPremeasure\">piPremeasure</a> <span class=\"fn\">m</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L80-L88","name":"MeasureTheory.piPremeasure_pi'","line":80,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.piPremeasure_pi'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.piPremeasure_pi'\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">piPremeasure_pi'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/Defs.html#MeasureTheory.OuterMeasure\">OuterMeasure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.piPremeasure\">piPremeasure</a> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∏ <span class=\"fn\">i</span> : <span class=\"fn\">ι</span>, <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">s</span> <span class=\"fn\">i</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L77-L78","name":"MeasureTheory.piPremeasure_pi","line":77,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.piPremeasure_pi","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.piPremeasure_pi\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">piPremeasure_pi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/Defs.html#MeasureTheory.OuterMeasure\">OuterMeasure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Data/Set/Defs.html#Set.Nonempty\">Nonempty</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.piPremeasure\">piPremeasure</a> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.pi\">pi</a></span> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∏ <span class=\"fn\">i</span> : <span class=\"fn\">ι</span>, <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">s</span> <span class=\"fn\">i</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Constructions/Pi.lean#L69-L75","name":"MeasureTheory.piPremeasure","line":69,"kind":"def","docLink":"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.piPremeasure","doc":"An upper bound for the measure in a finite product space.\nIt is defined to by taking the image of the set under all projections, and taking the product\nof the measures of these images.\nFor measurable boxes it is equal to the correct measure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.piPremeasure\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">piPremeasure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/Defs.html#MeasureTheory.OuterMeasure\">OuterMeasure</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">((<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a></div></div>"}]}