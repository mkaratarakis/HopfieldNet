{"name":"Mathlib.SetTheory.ZFC.Basic","instances":[{"typeNames":[],"name":"ZFSet.instDefinableOfDefinable₁","className":"ZFSet.Definable"},{"typeNames":[],"name":"ZFSet.instDefinableOfDefinable₂","className":"ZFSet.Definable"},{"typeNames":[],"name":"ZFSet.instDefinable","className":"ZFSet.Definable"},{"typeNames":["ZFSet","ZFSet"],"name":"ZFSet.instMembership","className":"Membership"},{"typeNames":["Set.Elem"],"name":"ZFSet.small_toSet","className":"Small"},{"typeNames":["ZFSet"],"name":"ZFSet.hasSubset","className":"HasSubset"},{"typeNames":["ZFSet"],"name":"ZFSet.instIsReflSubset","className":"IsRefl"},{"typeNames":["ZFSet"],"name":"ZFSet.instIsTransSubset","className":"IsTrans"},{"typeNames":["ZFSet","ZFSet"],"name":"ZFSet.instSetLike","className":"SetLike"},{"typeNames":["ZFSet"],"name":"ZFSet.instHasSSubset","className":"HasSSubset"},{"typeNames":["ZFSet"],"name":"ZFSet.instIsAntisymmSubset","className":"IsAntisymm"},{"typeNames":["ZFSet"],"name":"ZFSet.instIsNonstrictStrictOrderSubsetSSubset","className":"IsNonstrictStrictOrder"},{"typeNames":["ZFSet"],"name":"ZFSet.instEmptyCollection","className":"EmptyCollection"},{"typeNames":["ZFSet"],"name":"ZFSet.instInhabited","className":"Inhabited"},{"typeNames":["ZFSet","ZFSet"],"name":"ZFSet.instInsert","className":"Insert"},{"typeNames":["ZFSet","ZFSet"],"name":"ZFSet.instSingleton","className":"Singleton"},{"typeNames":["ZFSet","ZFSet"],"name":"ZFSet.instLawfulSingleton","className":"LawfulSingleton"},{"typeNames":["ZFSet","ZFSet"],"name":"ZFSet.instSep","className":"Sep"},{"typeNames":["ZFSet"],"name":"ZFSet.instUnion","className":"Union"},{"typeNames":["ZFSet"],"name":"ZFSet.instInter","className":"Inter"},{"typeNames":["ZFSet"],"name":"ZFSet.instSDiff","className":"SDiff"},{"typeNames":["ZFSet"],"name":"ZFSet.instIsWellFoundedMem","className":"IsWellFounded"},{"typeNames":["ZFSet"],"name":"ZFSet.instWellFoundedRelation","className":"WellFoundedRelation"},{"typeNames":[],"name":"ZFSet.instDefinable₁Singleton","className":"ZFSet.Definable"},{"typeNames":["Insert.insert"],"name":"ZFSet.instDefinable₂Insert","className":"ZFSet.Definable"},{"typeNames":["ZFSet.pair"],"name":"ZFSet.instDefinable₂Pair","className":"ZFSet.Definable"}],"imports":["Init","Mathlib.Data.Fin.VecNotation","Mathlib.Data.SetLike.Basic","Mathlib.Logic.Small.Basic","Mathlib.SetTheory.ZFC.PSet"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L792-L797","name":"ZFSet.Hereditarily.empty","line":792,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily.empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily.empty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Hereditarily</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily\">Hereditarily</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L789-L790","name":"ZFSet.Hereditarily.mem","line":789,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily.mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily.mem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Hereditarily</span>.<span class=\"name\">mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily\">Hereditarily</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily\">Hereditarily</a> <span class=\"fn\">p</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L786-L787","name":"ZFSet.Hereditarily.self","line":786,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily.self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily.self\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Hereditarily</span>.<span class=\"name\">self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily\">Hereditarily</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L784-L784","name":"ZFSet.Hereditarily.def","line":784,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily.def","doc":"**Alias** of the forward direction of `ZFSet.hereditarily_iff`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily.def\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Hereditarily</span>.<span class=\"name\">def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily\">Hereditarily</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ <span class=\"fn\">y</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily\">Hereditarily</a> <span class=\"fn\">p</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L781-L782","name":"ZFSet.hereditarily_iff","line":781,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.hereditarily_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.hereditarily_iff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">hereditarily_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily\">Hereditarily</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ <span class=\"fn\">y</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily\">Hereditarily</a> <span class=\"fn\">p</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L771-L775","name":"ZFSet.Hereditarily","line":771,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily","doc":"Given a predicate `p` on ZFC sets. `Hereditarily p x` means that `x` has property `p` and the\nmembers of `x` are all `Hereditarily p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Hereditarily</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L759-L769","name":"ZFSet.map_isFunc","line":759,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map_isFunc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map_isFunc\"><span class=\"name\">ZFSet</span>.<span class=\"name\">map_isFunc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₁\">Definable₁</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.IsFunc\">IsFunc</a></span> <span class=\"fn\">y</span> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ <span class=\"fn\">z</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L752-L757","name":"ZFSet.map_unique","line":752,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map_unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map_unique\"><span class=\"name\">ZFSet</span>.<span class=\"name\">map_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₁\">Definable₁</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">zx</span> : <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">∃!</a> <span class=\"fn\">w</span> <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">:</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair\">pair</a></span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L747-L750","name":"ZFSet.mem_map","line":747,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_map\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₁\">Definable₁</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ <span class=\"fn\">z</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair\">pair</a></span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">z</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L743-L745","name":"ZFSet.map","line":743,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map","doc":"Graph of a function: `map f x` is the ZFC function which maps `a ∈ x` to `f a` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map\"><span class=\"name\">ZFSet</span>.<span class=\"name\">map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₁\">Definable₁</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L741-L741","name":"ZFSet.instDefinable₂Pair","line":741,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instDefinable₂Pair","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instDefinable₂Pair\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instDefinable₂Pair</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₂\">Definable₂</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair\">pair</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L740-L740","name":"ZFSet.instDefinable₂Insert","line":740,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instDefinable₂Insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instDefinable₂Insert\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instDefinable₂Insert</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₂\">Definable₂</a> <a href=\"./Init/Core.html#Insert.insert\">insert</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L739-L739","name":"ZFSet.instDefinable₁Singleton","line":739,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instDefinable₁Singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instDefinable₁Singleton\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instDefinable₁Singleton</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₁\">Definable₁</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>) =&gt; <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L736-L737","name":"ZFSet.mem_funs","line":736,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_funs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_funs\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_funs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">f</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.funs\">funs</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.IsFunc\">IsFunc</a></span> <span class=\"fn\">y</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L732-L734","name":"ZFSet.funs","line":732,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.funs","doc":"`funs x y` is `y ^ x`, the set of all set functions `x → y` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.funs\"><span class=\"name\">ZFSet</span>.<span class=\"name\">funs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L727-L730","name":"ZFSet.IsFunc","line":727,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.IsFunc","doc":"`isFunc x y f` is the assertion that `f` is a subset of `x × y` which relates to each element\nof `x` a unique element of `y`, so that we can consider `f` as a ZFC function `x → y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.IsFunc\"><span class=\"name\">ZFSet</span>.<span class=\"name\">IsFunc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">f</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L724-L725","name":"ZFSet.pair_mem_prod","line":724,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair_mem_prod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair_mem_prod\"><span class=\"name\">ZFSet</span>.<span class=\"name\">pair_mem_prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair\">pair</a></span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.prod\">prod</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L720-L722","name":"ZFSet.mem_prod","line":720,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_prod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_prod\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.prod\">prod</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ <span class=\"fn\">a</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\">∃ <span class=\"fn\">b</span> ∈ <span class=\"fn\">y</span>, <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair\">pair</a></span> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L716-L718","name":"ZFSet.prod","line":716,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.prod","doc":"The cartesian product, `{(a, b) | a ∈ x, b ∈ y}` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.prod\"><span class=\"name\">ZFSet</span>.<span class=\"name\">prod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L712-L714","name":"ZFSet.pair_inj","line":712,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair_inj\"><span class=\"name\">ZFSet</span>.<span class=\"name\">pair_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">x' </span><span class=\"fn\">y'</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair\">pair</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x'</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair\">pair</a></span> <span class=\"fn\">y'</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x'</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L700-L710","name":"ZFSet.pair_injective","line":700,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair_injective\"><span class=\"name\">ZFSet</span>.<span class=\"name\">pair_injective</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.Injective2\">Function.Injective2</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair\">pair</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L689-L698","name":"ZFSet.mem_pairSep","line":689,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_pairSep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_pairSep\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_pairSep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pairSep\">pairSep</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ <span class=\"fn\">a</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\">∃ <span class=\"fn\">b</span> ∈ <span class=\"fn\">y</span>, <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair\">pair</a></span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L685-L687","name":"ZFSet.pairSep","line":685,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pairSep","doc":"A subset of pairs `{(a, b) ∈ x × y | p a b}` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pairSep\"><span class=\"name\">ZFSet</span>.<span class=\"name\">pairSep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L682-L683","name":"ZFSet.toSet_pair","line":682,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_pair","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_pair\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_pair</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair\">pair</a></span> <span class=\"fn\">y</span>)</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Insert.insert\">{</a><a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a><a href=\"./Init/Core.html#Insert.insert\">,</a> <a href=\"./Init/Core.html#Insert.insert\">{</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Insert.insert\">,</a> <span class=\"fn\">y</span><a href=\"./Init/Core.html#Insert.insert\">}</a><a href=\"./Init/Core.html#Insert.insert\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L678-L680","name":"ZFSet.pair","line":678,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair","doc":"Kuratowski ordered pair "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair\"><span class=\"name\">ZFSet</span>.<span class=\"name\">pair</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L672-L676","name":"ZFSet.toSet_range","line":672,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_range","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_range\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u_1}</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.range\">range</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L661-L670","name":"ZFSet.mem_range","line":661,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_range","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_range\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u_1}</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.range\">range</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L657-L659","name":"ZFSet.range","line":657,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.range","doc":"The range of a type-indexed family of sets. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.range\"><span class=\"name\">ZFSet</span>.<span class=\"name\">range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u_1}</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L651-L655","name":"ZFSet.toSet_image","line":651,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_image","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_image\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_image</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₁\">Definable₁</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.image\">image</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L644-L649","name":"ZFSet.mem_image","line":644,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_image","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_image\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_image</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₁\">Definable₁</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.image\">image</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ <span class=\"fn\">z</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L639-L642","name":"ZFSet.image.mk","line":639,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.image.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.image.mk\"><span class=\"name\">ZFSet</span>.<span class=\"name\">image</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₁\">Definable₁</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span> → <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.image\">image</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L627-L637","name":"ZFSet.image","line":627,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.image","doc":"The image of a (definable) ZFC set function "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.image\"><span class=\"name\">ZFSet</span>.<span class=\"name\">image</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₁\">Definable₁</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L619-L625","name":"ZFSet.regularity","line":619,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.regularity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.regularity\"><span class=\"name\">ZFSet</span>.<span class=\"name\">regularity</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">y</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L616-L617","name":"ZFSet.not_mem_of_subset","line":616,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.not_mem_of_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.not_mem_of_subset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">not_mem_of_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">y</span> ∉ <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L613-L614","name":"ZFSet.not_subset_of_mem","line":613,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.not_subset_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.not_subset_of_mem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">not_subset_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">y</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L610-L611","name":"ZFSet.mem_irrefl","line":610,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_irrefl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_irrefl\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_irrefl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> ∉ <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L607-L608","name":"ZFSet.mem_asymm","line":607,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_asymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_asymm\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_asymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span> → <span class=\"fn\"><span class=\"fn\">y</span> ∉ <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L604-L605","name":"ZFSet.instWellFoundedRelation","line":604,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instWellFoundedRelation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instWellFoundedRelation\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instWellFoundedRelation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFoundedRelation\">WellFoundedRelation</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L601-L602","name":"ZFSet.instIsWellFoundedMem","line":601,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsWellFoundedMem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsWellFoundedMem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instIsWellFoundedMem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellFounded\">IsWellFounded</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L596-L599","name":"ZFSet.inductionOn","line":596,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.inductionOn","doc":"Induction on the `∈` relation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.inductionOn\"><span class=\"name\">ZFSet</span>.<span class=\"name\">inductionOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>), <span class=\"fn\"><span class=\"fn\">(∀ <span class=\"fn\">y</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">y</span></span>)</span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L592-L594","name":"ZFSet.mem_wf","line":592,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_wf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_wf\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_wf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L588-L590","name":"ZFSet.sUnion_pair","line":588,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion_pair","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion_pair\"><span class=\"name\">ZFSet</span>.<span class=\"name\">sUnion_pair</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion\">⋃₀</a> <a href=\"./Init/Core.html#Insert.insert\">{</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Insert.insert\">,</a> <span class=\"fn\">y</span><a href=\"./Init/Core.html#Insert.insert\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L584-L586","name":"ZFSet.mem_diff","line":584,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_diff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_diff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_diff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">z</span> ∉ <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L580-L582","name":"ZFSet.mem_inter","line":580,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_inter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_inter\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_inter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L575-L578","name":"ZFSet.mem_union","line":575,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_union","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_union\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_union</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L569-L573","name":"ZFSet.toSet_sdiff","line":569,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_sdiff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_sdiff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_sdiff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\">y</span>).<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L563-L567","name":"ZFSet.toSet_inter","line":563,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_inter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_inter\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_inter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">y</span>).<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L558-L561","name":"ZFSet.toSet_union","line":558,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_union","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_union\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_union</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">y</span>).<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L555-L556","name":"ZFSet.instSDiff","line":555,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instSDiff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instSDiff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instSDiff</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#SDiff\">SDiff</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L552-L553","name":"ZFSet.instInter","line":552,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instInter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instInter\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instInter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Inter\">Inter</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L549-L550","name":"ZFSet.instUnion","line":549,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instUnion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instUnion\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instUnion</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Union\">Union</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L545-L547","name":"ZFSet.diff","line":545,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.diff","doc":"The set difference operation "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.diff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">diff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L541-L543","name":"ZFSet.inter","line":541,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.inter","doc":"The binary intersection operation "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.inter\"><span class=\"name\">ZFSet</span>.<span class=\"name\">inter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L537-L539","name":"ZFSet.union","line":537,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.union","doc":"The binary union operation "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.union\"><span class=\"name\">ZFSet</span>.<span class=\"name\">union</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L533-L535","name":"ZFSet.singleton_inj","line":533,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.singleton_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.singleton_inj\"><span class=\"name\">ZFSet</span>.<span class=\"name\">singleton_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">y</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L529-L531","name":"ZFSet.singleton_injective","line":529,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.singleton_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.singleton_injective\"><span class=\"name\">ZFSet</span>.<span class=\"name\">singleton_injective</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <a href=\"./Init/Core.html#Singleton.singleton\">singleton</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L525-L527","name":"ZFSet.toSet_sInter","line":525,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_sInter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_sInter\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_sInter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Nonempty\">Nonempty</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter\">⋂₀</a> <span class=\"fn\">x</span>).<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/SetNotation.html#Set.sInter\">⋂₀</a> (<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L520-L523","name":"ZFSet.toSet_sUnion","line":520,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_sUnion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_sUnion\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_sUnion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion\">⋃₀</a> <span class=\"fn\">x</span>).<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/SetNotation.html#Set.sUnion\">⋃₀</a> (<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L516-L518","name":"ZFSet.sInter_singleton","line":516,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter_singleton\"><span class=\"name\">ZFSet</span>.<span class=\"name\">sInter_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter\">⋂₀</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L512-L514","name":"ZFSet.sUnion_singleton","line":512,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion_singleton\"><span class=\"name\">ZFSet</span>.<span class=\"name\">sUnion_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion\">⋃₀</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L509-L510","name":"ZFSet.not_mem_sInter_of_not_mem","line":509,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.not_mem_sInter_of_not_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.not_mem_sInter_of_not_mem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">not_mem_sInter_of_not_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\"><span class=\"fn\">y</span> ∉ <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hz</span> : <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">y</span> ∉ <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter\">⋂₀</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L506-L507","name":"ZFSet.mem_sUnion_of_mem","line":506,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_sUnion_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_sUnion_of_mem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_sUnion_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hz</span> : <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion\">⋃₀</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L501-L504","name":"ZFSet.mem_of_mem_sInter","line":501,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_of_mem_sInter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_of_mem_sInter\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_of_mem_sInter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter\">⋂₀</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hz</span> : <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L498-L499","name":"ZFSet.sInter_empty","line":498,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter_empty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">sInter_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter\">⋂₀</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L493-L496","name":"ZFSet.sUnion_empty","line":493,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion_empty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">sUnion_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion\">⋃₀</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L485-L491","name":"ZFSet.mem_sInter","line":485,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_sInter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_sInter\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_sInter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Nonempty\">Nonempty</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter\">⋂₀</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ <span class=\"fn\">z</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L480-L483","name":"ZFSet.mem_sUnion","line":480,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_sUnion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_sUnion\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_sUnion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion\">⋃₀</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ <span class=\"fn\">z</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L477-L478","name":"ZFSet.«term⋂₀_»","line":477,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.«term⋂₀_»","doc":"The intersection operator, the collection of elements in all of the elements of a ZFC set. We\ndefine `⋂₀ ∅ = ∅`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.«term⋂₀_»\"><span class=\"name\">ZFSet</span>.<span class=\"name\">«term⋂₀_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L473-L475","name":"ZFSet.sInter","line":473,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter","doc":"The intersection operator, the collection of elements in all of the elements of a ZFC set. We\ndefine `⋂₀ ∅ = ∅`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter\"><span class=\"name\">ZFSet</span>.<span class=\"name\">sInter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L470-L471","name":"ZFSet.«term⋃₀_»","line":470,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.«term⋃₀_»","doc":"The union operator, the collection of elements of elements of a ZFC set "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.«term⋃₀_»\"><span class=\"name\">ZFSet</span>.<span class=\"name\">«term⋃₀_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L461-L468","name":"ZFSet.sUnion","line":461,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion","doc":"The union operator, the collection of elements of elements of a ZFC set "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion\"><span class=\"name\">ZFSet</span>.<span class=\"name\">sUnion</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L446-L459","name":"ZFSet.sUnion_lem","line":446,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion_lem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion_lem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">sUnion_lem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u}</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">B</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u}</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">αβ</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\">∃ (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">A</span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet.Equiv\">Equiv</a></span> <span class=\"fn\">(<span class=\"fn\">B</span> <span class=\"fn\">b</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet.sUnion\">⋃₀</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet.mk\">PSet.mk</a> <span class=\"fn\">α</span> <span class=\"fn\">A</span></span>).<a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet.Type\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">b</span> : <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet.sUnion\">⋃₀</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet.mk\">PSet.mk</a> <span class=\"fn\">β</span> <span class=\"fn\">B</span></span>).<a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet.Type\">Type</a></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet.sUnion\">⋃₀</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet.mk\">PSet.mk</a> <span class=\"fn\">α</span> <span class=\"fn\">A</span></span>).<a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet.Func\">Func</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet.Equiv\">Equiv</a></span> <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet.sUnion\">⋃₀</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet.mk\">PSet.mk</a> <span class=\"fn\">β</span> <span class=\"fn\">B</span></span>).<a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet.Func\">Func</a></span> <span class=\"fn\">b</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L442-L444","name":"ZFSet.mem_powerset","line":442,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_powerset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_powerset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_powerset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.powerset\">powerset</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L428-L440","name":"ZFSet.powerset","line":428,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.powerset","doc":"The powerset operation, the collection of subsets of a ZFC set "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.powerset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">powerset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L422-L426","name":"ZFSet.toSet_sep","line":422,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_sep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_sep\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_sep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sep\">ZFSet.sep</a> <span class=\"fn\">p</span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L418-L420","name":"ZFSet.sep_empty","line":418,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sep_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sep_empty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">sep_empty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sep\">ZFSet.sep</a> <span class=\"fn\">p</span> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L412-L416","name":"ZFSet.mem_sep","line":412,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_sep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_sep\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_sep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sep\">ZFSet.sep</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L409-L410","name":"ZFSet.instSep","line":409,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instSep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instSep\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instSep</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Sep\">Sep</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L397-L406","name":"ZFSet.sep","line":397,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sep","doc":"`{x ∈ a | p x}` is the set of elements in `a` satisfying `p` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sep\"><span class=\"name\">ZFSet</span>.<span class=\"name\">sep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L388-L395","name":"ZFSet.omega_succ","line":388,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.omega_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.omega_succ\"><span class=\"name\">ZFSet</span>.<span class=\"name\">omega_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.omega\">omega</a> → <span class=\"fn\"><a href=\"./Init/Core.html#Insert.insert\">insert</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.omega\">omega</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L384-L386","name":"ZFSet.omega_zero","line":384,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.omega_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.omega_zero\"><span class=\"name\">ZFSet</span>.<span class=\"name\">omega_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.omega\">omega</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L380-L382","name":"ZFSet.omega","line":380,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.omega","doc":"`omega` is the first infinite von Neumann ordinal "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.omega\"><span class=\"name\">ZFSet</span>.<span class=\"name\">omega</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L375-L378","name":"ZFSet.singleton_eq_pair_iff","line":375,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.singleton_eq_pair_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.singleton_eq_pair_iff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">singleton_eq_pair_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Insert.insert\">{</a><span class=\"fn\">y</span><a href=\"./Init/Core.html#Insert.insert\">,</a> <span class=\"fn\">z</span><a href=\"./Init/Core.html#Insert.insert\">}</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">z</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L367-L373","name":"ZFSet.pair_eq_singleton_iff","line":367,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair_eq_singleton_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair_eq_singleton_iff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">pair_eq_singleton_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Insert.insert\">{</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Insert.insert\">,</a> <span class=\"fn\">y</span><a href=\"./Init/Core.html#Insert.insert\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">z</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">z</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L362-L365","name":"ZFSet.pair_eq_singleton","line":362,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair_eq_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair_eq_singleton\"><span class=\"name\">ZFSet</span>.<span class=\"name\">pair_eq_singleton</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Insert.insert\">{</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Insert.insert\">,</a> <span class=\"fn\">x</span><a href=\"./Init/Core.html#Insert.insert\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L359-L360","name":"ZFSet.mem_pair","line":359,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_pair","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_pair\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_pair</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Init/Core.html#Insert.insert\">{</a><span class=\"fn\">y</span><a href=\"./Init/Core.html#Insert.insert\">,</a> <span class=\"fn\">z</span><a href=\"./Init/Core.html#Insert.insert\">}</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">z</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L356-L357","name":"ZFSet.singleton_nonempty","line":356,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.singleton_nonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.singleton_nonempty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">singleton_nonempty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">u</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Nonempty\">Nonempty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L353-L354","name":"ZFSet.insert_nonempty","line":353,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.insert_nonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.insert_nonempty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">insert_nonempty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Core.html#Insert.insert\">insert</a> <span class=\"fn\">u</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Nonempty\">Nonempty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L348-L351","name":"ZFSet.toSet_singleton","line":348,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_singleton\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_singleton</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L344-L346","name":"ZFSet.mem_singleton","line":344,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_singleton\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">y</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L339-L342","name":"ZFSet.toSet_insert","line":339,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_insert\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Core.html#Insert.insert\">insert</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span>)</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Insert.insert\">insert</a> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L336-L337","name":"ZFSet.mem_insert_of_mem","line":336,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_insert_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_insert_of_mem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_insert_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Core.html#Insert.insert\">insert</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L333-L334","name":"ZFSet.mem_insert","line":333,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_insert\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Core.html#Insert.insert\">insert</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L329-L331","name":"ZFSet.mem_insert_iff","line":329,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_insert_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_insert_iff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_insert_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Core.html#Insert.insert\">insert</a> <span class=\"fn\">y</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L326-L327","name":"ZFSet.instLawfulSingleton","line":326,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instLawfulSingleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instLawfulSingleton\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instLawfulSingleton</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#LawfulSingleton\">LawfulSingleton</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L323-L324","name":"ZFSet.instSingleton","line":323,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instSingleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instSingleton\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instSingleton</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Singleton\">Singleton</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L320-L321","name":"ZFSet.instInsert","line":320,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instInsert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instInsert\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instInsert</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Insert\">Insert</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L303-L318","name":"ZFSet.Insert","line":303,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Insert","doc":"`Insert x y` is the set `{x} ∪ y` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Insert\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Insert</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L299-L301","name":"ZFSet.eq_empty_or_nonempty","line":299,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.eq_empty_or_nonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.eq_empty_or_nonempty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">eq_empty_or_nonempty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">u</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Nonempty\">Nonempty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L296-L297","name":"ZFSet.eq_empty","line":296,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.eq_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.eq_empty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">eq_empty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>), <span class=\"fn\"><span class=\"fn\">y</span> ∉ <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L289-L294","name":"ZFSet.nonempty_mk_iff","line":289,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.nonempty_mk_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.nonempty_mk_iff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">nonempty_mk_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">mk</a> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Nonempty\">Nonempty</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet.Nonempty\">Nonempty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L286-L287","name":"ZFSet.not_nonempty_empty","line":286,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.not_nonempty_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.not_nonempty_empty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">not_nonempty_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Nonempty\">Nonempty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L282-L284","name":"ZFSet.empty_subset","line":282,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.empty_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.empty_subset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">empty_subset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L279-L280","name":"ZFSet.toSet_empty","line":279,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_empty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L275-L277","name":"ZFSet.not_mem_empty","line":275,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.not_mem_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.not_mem_empty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">not_mem_empty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> ∉ <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L272-L273","name":"ZFSet.instInhabited","line":272,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instInhabited\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L269-L270","name":"ZFSet.instEmptyCollection","line":269,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instEmptyCollection","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instEmptyCollection\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instEmptyCollection</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L265-L267","name":"ZFSet.empty","line":265,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.empty","doc":"The empty ZFC set "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.empty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L262-L263","name":"ZFSet.instIsNonstrictStrictOrderSubsetSSubset","line":262,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsNonstrictStrictOrderSubsetSSubset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsNonstrictStrictOrderSubsetSSubset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instIsNonstrictStrictOrderSubsetSSubset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsNonstrictStrictOrder\">IsNonstrictStrictOrder</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Core.html#HasSSubset.SSubset\">⊂</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L259-L260","name":"ZFSet.instIsAntisymmSubset","line":259,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsAntisymmSubset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsAntisymmSubset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instIsAntisymmSubset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#IsAntisymm\">IsAntisymm</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L255-L257","name":"ZFSet.lt_def","line":255,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.lt_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.lt_def\"><span class=\"name\">ZFSet</span>.<span class=\"name\">lt_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasSSubset.SSubset\">⊂</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L251-L253","name":"ZFSet.le_def","line":251,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.le_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.le_def\"><span class=\"name\">ZFSet</span>.<span class=\"name\">le_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L249-L249","name":"ZFSet.instHasSSubset","line":249,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instHasSSubset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instHasSSubset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instHasSSubset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#HasSSubset\">HasSSubset</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L245-L247","name":"ZFSet.instSetLike","line":245,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instSetLike","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instSetLike\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instSetLike</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/SetLike/Basic.html#SetLike\">SetLike</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L241-L243","name":"ZFSet.toSet_inj","line":241,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_inj\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L239-L239","name":"ZFSet.toSet_injective","line":239,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_injective\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_injective</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L235-L235","name":"ZFSet.ext_iff","line":235,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.ext_iff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>), <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L235-L237","name":"ZFSet.ext","line":235,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.ext\"><span class=\"name\">ZFSet</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>), <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span>)</span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L231-L233","name":"ZFSet.toSet_subset_iff","line":231,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_subset_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_subset_iff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_subset_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L223-L229","name":"ZFSet.subset_iff","line":223,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.subset_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.subset_iff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">subset_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">mk</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">mk</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L220-L221","name":"ZFSet.instIsTransSubset","line":220,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsTransSubset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsTransSubset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instIsTransSubset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#IsTrans\">IsTrans</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L217-L218","name":"ZFSet.instIsReflSubset","line":217,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsReflSubset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsReflSubset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instIsReflSubset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#IsRefl\">IsRefl</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L214-L215","name":"ZFSet.subset_def","line":214,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.subset_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.subset_def\"><span class=\"name\">ZFSet</span>.<span class=\"name\">subset_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ ⦃<span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>⦄, <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span> → <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L211-L212","name":"ZFSet.hasSubset","line":211,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.hasSubset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.hasSubset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">hasSubset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#HasSubset\">HasSubset</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L207-L209","name":"ZFSet.Subset","line":207,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Subset","doc":"`x ⊆ y` as ZFC sets means that all members of `x` are members of `y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Subset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Subset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L203-L205","name":"ZFSet.nonempty_toSet_iff","line":203,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.nonempty_toSet_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.nonempty_toSet_iff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">nonempty_toSet_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">u</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span>.<a href=\"./Mathlib/Data/Set/Defs.html#Set.Nonempty\">Nonempty</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">u</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Nonempty\">Nonempty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L200-L201","name":"ZFSet.nonempty_of_mem","line":200,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.nonempty_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.nonempty_of_mem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">nonempty_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">u</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">u</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">u</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Nonempty\">Nonempty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L197-L198","name":"ZFSet.nonempty_def","line":197,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.nonempty_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.nonempty_def\"><span class=\"name\">ZFSet</span>.<span class=\"name\">nonempty_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">u</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Nonempty\">Nonempty</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">u</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L193-L195","name":"ZFSet.Nonempty","line":193,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Nonempty","doc":"A nonempty set is one that contains some element. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Nonempty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Nonempty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L184-L191","name":"ZFSet.small_toSet","line":184,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.small_toSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.small_toSet\"><span class=\"name\">ZFSet</span>.<span class=\"name\">small_toSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u + 1}</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L180-L182","name":"ZFSet.mem_toSet","line":180,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_toSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_toSet\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_toSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">u</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">u</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">toSet</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">u</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L176-L178","name":"ZFSet.toSet","line":176,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet","doc":"Convert a ZFC set into a `Set` of ZFC sets "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L172-L174","name":"ZFSet.mk_mem_iff","line":172,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk_mem_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk_mem_iff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mk_mem_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">mk</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">mk</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L169-L170","name":"ZFSet.instMembership","line":169,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instMembership","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instMembership\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instMembership</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L164-L167","name":"ZFSet.Mem","line":164,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Mem","doc":"The membership relation for ZFC sets is inherited from the membership relation for pre-sets. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Mem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Mem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L161-L162","name":"ZFSet.exact","line":161,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.exact","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.exact\"><span class=\"name\">ZFSet</span>.<span class=\"name\">exact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">mk</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">mk</a> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet.Equiv\">Equiv</a></span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L158-L159","name":"ZFSet.sound","line":158,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sound","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sound\"><span class=\"name\">ZFSet</span>.<span class=\"name\">sound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet.Equiv\">Equiv</a></span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">mk</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">mk</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L155-L156","name":"ZFSet.eq","line":155,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.eq\"><span class=\"name\">ZFSet</span>.<span class=\"name\">eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">mk</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">mk</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet.Equiv\">Equiv</a></span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L145-L147","name":"Classical.allZFSetDefinable","line":145,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Classical.allZFSetDefinable","doc":"All functions are classically definable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Classical.allZFSetDefinable\"><span class=\"name\">Classical</span>.<span class=\"name\">allZFSetDefinable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable\">ZFSet.Definable</a> <span class=\"fn\">n</span> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L134-L137","name":"ZFSet.Definable₂.out_equiv","line":134,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₂.out_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₂.out_equiv\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Definable₂</span>.<span class=\"name\">out_equiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₂\">Definable₂</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₁ </span><span class=\"fn\">y₁ </span><span class=\"fn\">x₂ </span><span class=\"fn\">y₂</span> : <a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">x₁</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">x₂</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₂.out\">out</a> <span class=\"fn\">f</span> <span class=\"fn\">x₁</span> <span class=\"fn\">x₂</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₂.out\">out</a> <span class=\"fn\">f</span> <span class=\"fn\">y₁</span> <span class=\"fn\">y₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L129-L132","name":"ZFSet.Definable₁.out_equiv","line":129,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₁.out_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₁.out_equiv\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Definable₁</span>.<span class=\"name\">out_equiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₁\">Definable₁</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₁.out\">out</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₁.out\">out</a> <span class=\"fn\">f</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L123-L127","name":"ZFSet.Definable.out_equiv","line":123,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable.out_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable.out_equiv\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Definable</span>.<span class=\"name\">out_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable\">Definable</a> <span class=\"fn\">n</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u}</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\">xs</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\"><span class=\"fn\">ys</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable.out\">out</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable.out\">out</a> <span class=\"fn\">f</span> <span class=\"fn\">ys</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L120-L121","name":"ZFSet.instDefinable","line":120,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instDefinable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instDefinable\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instDefinable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable\">Definable</a> <span class=\"fn\">n</span> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L116-L118","name":"ZFSet.instDefinableOfDefinable₂","line":116,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instDefinableOfDefinable₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instDefinableOfDefinable₂\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instDefinableOfDefinable₂</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₂\">Definable₂</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g₁ </span><span class=\"fn\">g₂</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>)</span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable\">Definable</a> <span class=\"fn\">n</span> <span class=\"fn\">g₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable\">Definable</a> <span class=\"fn\">n</span> <span class=\"fn\">g₂</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable\">Definable</a> <span class=\"fn\">n</span> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">g₁</span> <span class=\"fn\">s</span>)</span> <span class=\"fn\">(<span class=\"fn\">g₂</span> <span class=\"fn\">s</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L112-L114","name":"ZFSet.instDefinableOfDefinable₁","line":112,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instDefinableOfDefinable₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instDefinableOfDefinable₁\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instDefinableOfDefinable₁</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₁\">Definable₁</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>)</span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable\">Definable</a> <span class=\"fn\">n</span> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable\">Definable</a> <span class=\"fn\">n</span> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">s</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L107-L110","name":"ZFSet.Definable₂.mk_out","line":107,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₂.mk_out","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₂.mk_out\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Definable₂</span>.<span class=\"name\">mk_out</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₂\">Definable₂</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₂.out\">out</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">y</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L102-L105","name":"ZFSet.Definable₂.out","line":102,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₂.out","doc":"Turns a binary definable function into a binary `PSet` function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₂.out\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Definable₂</span>.<span class=\"name\">out</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₂\">Definable₂</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u}</a> → <a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u}</a> → <a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L95-L100","name":"ZFSet.Definable₂.mk","line":95,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₂.mk","doc":"A simpler constructor for `ZFSet.Definable₂`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₂.mk\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Definable₂</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">out</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u}</a> → <a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u}</a> → <a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u}</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mk_out</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u}</a>), <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\"><span class=\"fn\">out</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">y</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₂\">Definable₂</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L92-L93","name":"ZFSet.Definable₂","line":92,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₂","doc":"An abbrev of `ZFSet.Definable` for binary functions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₂\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Definable₂</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u + 1)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L87-L90","name":"ZFSet.Definable₁.mk_out","line":87,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₁.mk_out","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₁.mk_out\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Definable₁</span>.<span class=\"name\">mk_out</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₁\">Definable₁</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₁.out\">out</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">x</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L82-L85","name":"ZFSet.Definable₁.out","line":82,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₁.out","doc":"Turns a unary definable function into a unary `PSet` function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₁.out\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Definable₁</span>.<span class=\"name\">out</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₁\">Definable₁</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u}</a> → <a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L75-L80","name":"ZFSet.Definable₁.mk","line":75,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₁.mk","doc":"A simpler constructor for `ZFSet.Definable₁`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₁.mk\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Definable₁</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">out</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u}</a> → <a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u}</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mk_out</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u}</a>), <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\"><span class=\"fn\">out</span> <span class=\"fn\">x</span></span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₁\">Definable₁</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L72-L73","name":"ZFSet.Definable₁","line":72,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₁","doc":"An abbrev of `ZFSet.Definable` for unary functions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable₁\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Definable₁</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u + 1)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L68-L68","name":"ZFSet.Definable.mk_out","line":68,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable.mk_out","doc":"A set function `f` is the image of `Definable.out f`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable.mk_out\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Definable</span>.<span class=\"name\">mk_out</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable\">Definable</a> <span class=\"fn\">n</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u}</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable.out\">out</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">(<span class=\"fn\">xs</span> <span class=\"fn\">x</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L66-L66","name":"ZFSet.Definable.out","line":66,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable.out","doc":"Turns a definable function into an n-ary `PSet` function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable.out\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Definable</span>.<span class=\"name\">out</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable\">Definable</a> <span class=\"fn\">n</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u}</a>)</span> → <a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L64-L64","name":"ZFSet.Definable.mk","line":64,"kind":"ctor","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable.mk\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Definable</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">out</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u}</a>)</span> → <a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u}</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mk_out</span> : <span class=\"fn\">∀ (<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u}</a></span>), <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">(<span class=\"fn\">out</span> <span class=\"fn\">xs</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">(<span class=\"fn\">xs</span> <span class=\"fn\">x</span>)</span></span></span></span></span> := by simp)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable\">Definable</a> <span class=\"fn\">n</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L61-L68","name":"ZFSet.Definable","line":61,"kind":"class","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable","doc":"A set function is \"definable\" if it is the image of some n-ary `PSet`\nfunction. This isn't exactly definability, but is useful as a sufficient\ncondition for functions that have a computable image. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Definable\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Definable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>)</span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u + 1)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L57-L59","name":"ZFSet.mk_out","line":57,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk_out","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk_out\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mk_out</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">mk</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Quot.html#Quotient.out\">Quotient.out</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L53-L55","name":"ZFSet.mk_eq","line":53,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk_eq\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mk_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">mk</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L49-L51","name":"ZFSet.mk","line":49,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk","doc":"Turns a pre-set into a ZFC set. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/PSet.html#PSet\">PSet.{u_1}</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/ZFC/Basic.lean#L41-L45","name":"ZFSet","line":41,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet","doc":"The ZFC universe of sets consists of the type of pre-sets,\nquotiented by extensional equivalence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\"><span class=\"name\">ZFSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u + 1)</div></div>"}]}