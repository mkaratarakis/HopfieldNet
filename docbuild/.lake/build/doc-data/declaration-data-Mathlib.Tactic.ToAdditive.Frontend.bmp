{"name":"Mathlib.Tactic.ToAdditive.Frontend","instances":[{"typeNames":["ToAdditive.Config"],"name":"ToAdditive.instReprConfig","className":"Repr"}],"imports":["Init","Mathlib.Data.Nat.Notation","Mathlib.Data.String.Defs","Mathlib.Data.Array.Defs","Mathlib.Lean.Expr.ReplaceRec","Mathlib.Lean.EnvExtension","Mathlib.Lean.Meta.Simp","Mathlib.Lean.Name","Lean.Elab.Tactic.Ext","Lean.Meta.Tactic.Symm","Lean.Meta.Tactic.Rfl","Lean.Meta.Match.MatcherInfo","Lean.Meta.AbstractNestedProofs","Batteries.Lean.NameMapAttribute","Batteries.Tactic.Lint","Batteries.Tactic.Trans","Mathlib.Tactic.Eqns","Mathlib.Tactic.Simps.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L1311-L1357","name":"ToAdditive.addToAdditiveAttr","line":1311,"kind":"opaque","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.addToAdditiveAttr","doc":"`addToAdditiveAttr src cfg` adds a `@[to_additive]` attribute to `src` with configuration `cfg`.\nSee the attribute implementation for more details.\nIt returns an array with names of additive declarations (usually 1, but more if there are nested\n`to_additive` calls. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.addToAdditiveAttr\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">addToAdditiveAttr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">src</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config\">Config</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeKind\">Lean.AttributeKind</a> := <a href=\"./Lean/Attributes.html#Lean.AttributeKind.global\">Lean.AttributeKind.global</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.AttrM\">Lean.AttrM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L1302-L1309","name":"ToAdditive.transformDecl","line":1302,"kind":"opaque","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.transformDecl","doc":"Make a new copy of a declaration, replacing fragments of the names of identifiers in the type and\nthe body using the `translations` dictionary.\nThis is used to implement `@[to_additive]`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.transformDecl\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">transformDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config\">Config</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">src </span><span class=\"fn\">tgt</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L1285-L1300","name":"ToAdditive.copyMetaData","line":1285,"kind":"opaque","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.copyMetaData","doc":"Copies equation lemmas and attributes from `src` to `tgt`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.copyMetaData\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">copyMetaData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config\">Config</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">src </span><span class=\"fn\">tgt</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L1220-L1283","name":"ToAdditive.applyAttributes","line":1220,"kind":"opaque","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.applyAttributes","doc":"Apply attributes to the multiplicative and additive declarations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.applyAttributes\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">applyAttributes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rawAttrs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">thisAttr </span><span class=\"fn\">src </span><span class=\"fn\">tgt</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L1194-L1217","name":"ToAdditive.elabToAdditive","line":1194,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.elabToAdditive","doc":"Elaboration of the configuration options for `to_additive`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.elabToAdditive\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">elabToAdditive</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config\">Config</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L1171-L1192","name":"ToAdditive.proceedFields","line":1171,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.proceedFields","doc":"Add the structure fields of `src` to the translations dictionary\nso that future uses of `to_additive` will map them to the corresponding `tgt` fields. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.proceedFields\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">proceedFields</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">src </span><span class=\"fn\">tgt</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L1153-L1169","name":"ToAdditive.proceedFieldsAux","line":1153,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.proceedFieldsAux","doc":"if `f src = #[a_1, ..., a_n]` and `f tgt = #[b_1, ... b_n]` then `proceedFieldsAux src tgt f`\nwill insert translations from `src.a_i` to `tgt.b_i`\n(or from `a_i` to `b_i` if `prependName` is false). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.proceedFieldsAux\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">proceedFieldsAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">src </span><span class=\"fn\">tgt</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prependName</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L1129-L1151","name":"ToAdditive.targetName","line":1129,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.targetName","doc":"Return the provided target name or autogenerate one if one was not provided. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.targetName\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">targetName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config\">Config</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">src</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L1114-L1127","name":"ToAdditive.guessName","line":1114,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.guessName","doc":"Autogenerate additive name.\nThis runs in several steps:\n1) Split according to capitalisation rule and at `_`.\n2) Apply word-by-word translation rules.\n3) Fix up abbreviations that are not word-by-word translations, like \"addComm\" or \"Nonneg\".\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.guessName\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">guessName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L1025-L1112","name":"ToAdditive.fixAbbreviation","line":1025,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.fixAbbreviation","doc":"There are a few abbreviations we use. For example \"Nonneg\" instead of \"ZeroLE\"\nor \"addComm\" instead of \"commAdd\".\nNote: The input to this function is case sensitive!\nTodo: A lot of abbreviations here are manual fixes and there might be room to\n      improve the naming logic to reduce the size of `fixAbbreviation`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.fixAbbreviation\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">fixAbbreviation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L1017-L1023","name":"ToAdditive.applyNameDict","line":1017,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.applyNameDict","doc":"Turn each element to lower-case, apply the `nameDict` and\ncapitalize the output like the input.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.applyNameDict\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">applyNameDict</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L966-L1015","name":"ToAdditive.nameDict","line":966,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.nameDict","doc":"Dictionary used by `guessName` to autogenerate names.\n\nNote: `guessName` capitalizes first element of the output according to\ncapitalization of the input. Input and first element should therefore be lower-case,\n2nd element should be capitalized properly.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.nameDict\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">nameDict</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L959-L964","name":"ToAdditive.capitalizeFirstLike","line":959,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.capitalizeFirstLike","doc":"Capitalize First element of a list like `s`.\nNote that we need to capitalize multiple characters in some cases,\nin examples like `HMul` or `hAdd`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.capitalizeFirstLike\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">capitalizeFirstLike</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L955-L957","name":"ToAdditive.capitalizeLike","line":955,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.capitalizeLike","doc":"Capitalizes `s` char-by-char like `r`. If `s` is longer, it leaves the tail untouched. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.capitalizeLike\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">capitalizeLike</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r </span><span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L942-L953","name":"ToAdditive.capitalizeLikeAux","line":942,"kind":"opaque","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.capitalizeLikeAux","doc":"Helper for `capitalizeLike`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.capitalizeLikeAux\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">capitalizeLikeAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L916-L940","name":"ToAdditive.firstMultiplicativeArg","line":916,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.firstMultiplicativeArg","doc":"Find the first argument of `nm` that has a multiplicative type-class on it.\nReturns 1 if there are no types with a multiplicative class as arguments.\nE.g. `Prod.Group` returns 1, and `Pi.One` returns 2.\nNote: we only consider the first argument of each type-class.\nE.g. `[Pow A N]` is a multiplicative type-class on `A`, not on `N`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.firstMultiplicativeArg\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">firstMultiplicativeArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nm</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L902-L914","name":"ToAdditive.additivizeLemmas","line":902,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.additivizeLemmas","doc":"`additivizeLemmas names desc t` runs `t` on all elements of `names`\nand adds translations between the generated lemmas (the output of `t`).\n`names` must be non-empty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.additivizeLemmas\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">additivizeLemmas</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">Lean.MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">names</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">desc</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L897-L900","name":"ToAdditive.warnParametricAttr","line":897,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.warnParametricAttr","doc":"Warn the user when the multiplicative declaration has a parametric attribute. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.warnParametricAttr\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">warnParametricAttr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attr</span> : <span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.ParametricAttribute\">Lean.ParametricAttribute</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">thisAttr </span><span class=\"fn\">attrName </span><span class=\"fn\">src </span><span class=\"fn\">tgt</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L892-L895","name":"ToAdditive.warnAttr","line":892,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.warnAttr","doc":"Warn the user when the multiplicative declaration has a simple scoped attribute. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.warnAttr\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">warnAttr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attr</span> : <span class=\"fn\"><a href=\"./Lean/ScopedEnvExtension.html#Lean.SimpleScopedEnvExtension\">Lean.SimpleScopedEnvExtension</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">thisAttr </span><span class=\"fn\">attrName </span><span class=\"fn\">src </span><span class=\"fn\">tgt</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L878-L890","name":"ToAdditive.warnExt","line":878,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.warnExt","doc":"Warn the user when the multiplicative declaration has an attribute. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.warnExt\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">warnExt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">Lean.PersistentEnvExtension</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">thisAttr </span><span class=\"fn\">attrName </span><span class=\"fn\">src </span><span class=\"fn\">tgt</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L868-L876","name":"ToAdditive.copyInstanceAttribute","line":868,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.copyInstanceAttribute","doc":"Copy the instance attribute in a `to_additive`\n\n[todo] it seems not to work when the `to_additive` is added as an attribute later. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.copyInstanceAttribute\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">copyInstanceAttribute</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">src </span><span class=\"fn\">tgt</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L780-L866","name":"ToAdditive.transformDeclAux","line":780,"kind":"opaque","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.transformDeclAux","doc":"transform the declaration `src` and all declarations `pre._proof_i` occurring in `src`\nusing the transforms dictionary.\n`replace_all`, `trace`, `ignore` and `reorder` are configuration options.\n`pre` is the declaration that got the `@[to_additive]` attribute and `tgt_pre` is the target of this\ndeclaration. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.transformDeclAux\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">transformDeclAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config\">Config</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pre </span><span class=\"fn\">tgt_pre</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L762-L778","name":"ToAdditive.findAuxDecls","line":762,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.findAuxDecls","doc":"Returns a `NameSet` of all auxiliary constants in `e` that might have been generated\nwhen adding `pre` to the environment.\nExamples include `pre.match_5` and\n`_private.Mathlib.MyFile.someOtherNamespace.someOtherDeclaration._eq_2`.\nThe last two examples may or may not have been generated by this declaration.\nThe last example may or may not be the equation lemma of a declaration with the `@[to_additive]`\nattribute. We will only translate it if it has the `@[to_additive]` attribute.\n\nNote that this function would return `proof_nnn` aux lemmas if\nwe hadn't unfolded them in `declUnfoldAuxLemmas`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.findAuxDecls\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">findAuxDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pre</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">Lean.NameSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L744-L760","name":"ToAdditive.findTargetName","line":744,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.findTargetName","doc":"Find the target name of `pre` and all created auxiliary declarations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.findTargetName\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">findTargetName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">src </span><span class=\"fn\">pre </span><span class=\"fn\">tgt_pre</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L737-L742","name":"ToAdditive.declAbstractNestedProofs","line":737,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.declAbstractNestedProofs","doc":"Abstracts the nested proofs in the value of `decl` if it is a def. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.declAbstractNestedProofs\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">declAbstractNestedProofs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L723-L735","name":"ToAdditive.updateDecl","line":723,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.updateDecl","doc":"Run applyReplacementFun on the given `srcDecl` to make a new declaration with name `tgt` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.updateDecl\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">updateDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tgt</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">srcDecl</span> : <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reorder</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L711-L721","name":"ToAdditive.declUnfoldAuxLemmas","line":711,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.declUnfoldAuxLemmas","doc":"Unfold auxlemmas in the type and value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.declUnfoldAuxLemmas\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">declUnfoldAuxLemmas</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L698-L709","name":"ToAdditive.reorderLambda","line":698,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.reorderLambda","doc":"Reorder lambda-binders. See doc of `reorderAttr` for the interpretation of the argument "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.reorderLambda\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">reorderLambda</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reorder</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">src</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L685-L696","name":"ToAdditive.reorderForall","line":685,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.reorderForall","doc":"Reorder pi-binders. See doc of `reorderAttr` for the interpretation of the argument "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.reorderForall\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">reorderForall</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reorder</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">src</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L656-L683","name":"ToAdditive.expand","line":656,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.expand","doc":"`e.expand` eta-expands all expressions that have as head a constant `n` in\n`reorder`. They are expanded until they are applied to one more argument than the maximum in\n`reorder.find n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.expand\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">expand</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L652-L654","name":"ToAdditive.etaExpandN","line":652,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.etaExpandN","doc":"Eta expands `e` at most `n` times. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.etaExpandN\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">etaExpandN</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L576-L650","name":"ToAdditive.applyReplacementFun.aux","line":576,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.applyReplacementFun.aux","doc":"Implementation of `applyReplacementFun`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.applyReplacementFun.aux\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">applyReplacementFun</span>.<span class=\"name\">aux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">trace</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L562-L650","name":"ToAdditive.applyReplacementFun","line":562,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.applyReplacementFun","doc":"`applyReplacementFun e` replaces the expression `e` with its additive counterpart.\nIt translates each identifier (inductive type, defined function etc) in an expression, unless\n* The identifier occurs in an application with first argument `arg`; and\n* `test arg` is false.\nHowever, if `f` is in the dictionary `relevant`, then the argument `relevant.find f`\nis tested, instead of the first argument.\n\nIt will also reorder arguments of certain functions, using `reorderFn`:\ne.g. `g x₁ x₂ x₃ ... xₙ` becomes `g x₂ x₁ x₃ ... xₙ` if `reorderFn g = some [1]`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.applyReplacementFun\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">applyReplacementFun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L556-L560","name":"ToAdditive.changeNumeral","line":556,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.changeNumeral","doc":"Change the numeral `nat_lit 1` to the numeral `nat_lit 0`.\nLeave all other expressions unchanged. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.changeNumeral\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">changeNumeral</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L550-L554","name":"List.swapFirstTwo","line":550,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#List.swapFirstTwo","doc":"Swap the first two elements of a list "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#List.swapFirstTwo\"><span class=\"name\">List</span>.<span class=\"name\">swapFirstTwo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L540-L548","name":"ToAdditive.additiveTest","line":540,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.additiveTest","doc":"`additiveTest e` tests whether the expression `e` contains a constant\n`nm` that is not applied to any arguments, and such that `translations.find?[nm] = none`.\nThis is used in `@[to_additive]` for deciding which subexpressions to transform: we only transform\nconstants if `additiveTest` applied to their relevant argument returns `true`.\nThis means we will replace expression applied to e.g. `α` or `α × β`, but not when applied to\ne.g. `ℕ` or `ℝ × α`.\nWe ignore all arguments specified by the `ignore` `NameMap`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.additiveTest\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">additiveTest</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L512-L537","name":"ToAdditive.additiveTestUnsafe.visit","line":512,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.additiveTestUnsafe.visit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.additiveTestUnsafe.visit\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">additiveTestUnsafe</span>.<span class=\"name\">visit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inApp</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <span class=\"fn\">(<a href=\"./Init/Control/State.html#StateM\">StateM</a> <span class=\"fn\">(<a href=\"./Lean/Util/PtrSet.html#Lean.PtrSet\">Lean.PtrSet</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span>)</span> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L501-L538","name":"ToAdditive.additiveTestUnsafe","line":501,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.additiveTestUnsafe","doc":"Implementation function for `additiveTest`.\nFailure means that in that subexpression there is no constant that blocks `e` from being translated.\nWe cache previous applications of the function, using an expression cache using ptr equality\nto avoid visiting the same subexpression many times. Note that we only need to cache the\nexpressions without taking the value of `inApp` into account, since `inApp` only matters when\nthe expression is a constant. However, for this reason we have to make sure that we never\ncache constant expressions, so that's why the `if`s in the implementation are in this order.\n\nNote that this function is still called many times by `applyReplacementFun`\nand we're not remembering the cache between these calls. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.additiveTestUnsafe\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">additiveTestUnsafe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L499-L499","name":"ToAdditive.instReprConfig","line":499,"kind":"instance","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.instReprConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.instReprConfig\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">instReprConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config\">Config</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L498-L498","name":"ToAdditive.Config.existing","line":498,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config.existing","doc":"An optional flag stating whether the additive declaration already exists.\nIf this flag is set but wrong about whether the additive declaration exists, `to_additive` will\nraise a linter error.\nNote: the linter will never raise an error for inductive types and structures. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config.existing\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">Config</span>.<span class=\"name\">existing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L493-L493","name":"ToAdditive.Config.ref","line":493,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config.ref","doc":"The `Syntax` element corresponding to the original multiplicative declaration\n(or the `to_additive` attribute if it is added later),\nwhich we need for adding definition ranges. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config.ref\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">Config</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L489-L489","name":"ToAdditive.Config.attrs","line":489,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config.attrs","doc":"The attributes which we want to give to both the multiplicative and additive versions.\nFor `simps` this will also add generated lemmas to the translation dictionary. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config.attrs\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">Config</span>.<span class=\"name\">attrs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L486-L486","name":"ToAdditive.Config.reorder","line":486,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config.reorder","doc":"The arguments that should be reordered by `to_additive`, using cycle notation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config.reorder\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">Config</span>.<span class=\"name\">reorder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L484-L484","name":"ToAdditive.Config.allowAutoName","line":484,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config.allowAutoName","doc":"If `allowAutoName` is `false` (default) then\n`@[to_additive]` will check whether the given name can be auto-generated. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config.allowAutoName\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">Config</span>.<span class=\"name\">allowAutoName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L481-L481","name":"ToAdditive.Config.doc","line":481,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config.doc","doc":"An optional doc string. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config.doc\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">Config</span>.<span class=\"name\">doc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L479-L479","name":"ToAdditive.Config.tgt","line":479,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config.tgt","doc":"The name of the target (the additive declaration). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config.tgt\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">Config</span>.<span class=\"name\">tgt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L477-L477","name":"ToAdditive.Config.trace","line":477,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config.trace","doc":"View the trace of the to_additive procedure.\nEquivalent to `set_option trace.to_additive true`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config.trace\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">Config</span>.<span class=\"name\">trace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L474-L474","name":"ToAdditive.Config.mk","line":474,"kind":"ctor","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config.mk\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">Config</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">trace</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tgt</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allowAutoName</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reorder</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attrs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">existing</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config\">Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L473-L499","name":"ToAdditive.Config","line":473,"kind":"structure","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config","doc":"`Config` is the type of the arguments that can be provided to `to_additive`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.Config\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">Config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L462-L471","name":"ToAdditive.insertTranslation","line":462,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.insertTranslation","doc":"Add a (multiplicative → additive) name translation to the translations map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.insertTranslation\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">insertTranslation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">src </span><span class=\"fn\">tgt</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">failIfExists</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L458-L460","name":"ToAdditive.findTranslation?","line":458,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.findTranslation?","doc":"Get the multiplicative → additive translation for the given name. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.findTranslation?\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">findTranslation?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L455-L456","name":"ToAdditive.translations","line":455,"kind":"opaque","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.translations","doc":"Maps multiplicative names to their additive counterparts. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.translations\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">translations</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Lean/NameMapAttribute.html#Lean.NameMapExtension\">Lean.NameMapExtension</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L444-L453","name":"ToAdditive.changeNumeralAttr","line":444,"kind":"opaque","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.changeNumeralAttr","doc":"An attribute that stores all the declarations that deal with numeric literals on variable types.\n\nNumeral literals occur in expressions without type information, so in order to decide whether `1`\nneeds to be changed to `0`, the context around the numeral is relevant.\nMost numerals will be in an `OfNat.ofNat` application, though tactics can add numeral literals\ninside arbitrary functions. By default we assume that we do not change numerals, unless it is\nin a function application with the `to_additive_change_numeral` attribute.\n\n`@[to_additive_change_numeral n₁ ...]` should be added to all functions that take one or more\nnumerals as argument that should be changed if `additiveTest` succeeds on the first argument,\ni.e. when the numeral is only translated if the first argument is a variable\n(or consists of variables).\nThe arguments `n₁ ...` are the positions of the numeral arguments (starting counting from 1). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.changeNumeralAttr\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">changeNumeralAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Lean/NameMapAttribute.html#Lean.NameMapExtension\">Lean.NameMapExtension</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L434-L442","name":"ToAdditive.dontTranslateAttr","line":434,"kind":"opaque","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.dontTranslateAttr","doc":"The `to_additive_dont_translate` attribute, used to specify types that should be translated by\n`to_additive`, but its operations should remain multiplicative.\n\nUsage notes:\n* Apply this together with the `to_additive` attribute.\n* The name generation of `to_additive` is not aware that the operations on this type should not be\n  translated, so you generally have to specify the name itself, if the name should remain\n  multiplicative.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.dontTranslateAttr\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">dontTranslateAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Lean/NameMapAttribute.html#Lean.NameMapExtension\">Lean.NameMapExtension</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L424-L432","name":"ToAdditive.relevantArgAttr","line":424,"kind":"opaque","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.relevantArgAttr","doc":"An attribute that is automatically added to declarations tagged with `@[to_additive]`,\nif needed.\n\nThis attribute tells which argument is the type where this declaration uses the multiplicative\nstructure. If there are multiple argument, we typically tag the first one.\nIf this argument contains a fixed type, this declaration will note be additivized.\nSee the Heuristics section of `to_additive.attr` for more details.\n\nIf a declaration is not tagged, it is presumed that the first argument is relevant.\n`@[to_additive]` uses the function `to_additive.first_multiplicative_arg` to automatically tag\ndeclarations. It is ok to update it manually if the automatic tagging made an error.\n\nImplementation note: we only allow exactly 1 relevant argument, even though some declarations\n(like `prod.group`) have multiple arguments with a multiplicative structure on it.\nThe reason is that whether we additivize a declaration is an all-or-nothing decision, and if\nwe will not be able to additivize declarations that (e.g.) talk about multiplication on `ℕ × α`\nanyway.\n\nWarning: interactions between this and the `(reorder := ...)` argument are not well-tested. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.relevantArgAttr\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">relevantArgAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Lean/NameMapAttribute.html#Lean.NameMapExtension\">Lean.NameMapExtension</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L406-L422","name":"ToAdditive.reorderAttr","line":406,"kind":"opaque","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.reorderAttr","doc":"An attribute that stores all the declarations that needs their arguments reordered when\napplying `@[to_additive]`. It is applied automatically by the `(reorder := ...)` syntax of\n`to_additive`, and should not usually be added manually. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.reorderAttr\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">reorderAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Lean/NameMapAttribute.html#Lean.NameMapExtension\">Lean.NameMapExtension</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L394-L404","name":"ToAdditive.ignoreArgsAttr","line":394,"kind":"opaque","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.ignoreArgsAttr","doc":"An attribute that tells `@[to_additive]` that certain arguments of this definition are not\ninvolved when using `@[to_additive]`.\nThis helps the heuristic of `@[to_additive]` by also transforming definitions if `ℕ` or another\nfixed type occurs as one of these arguments. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.ignoreArgsAttr\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">ignoreArgsAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Lean/NameMapAttribute.html#Lean.NameMapExtension\">Lean.NameMapExtension</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L386-L391","name":"ToAdditive.linter.toAdditiveExisting","line":386,"kind":"opaque","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.linter.toAdditiveExisting","doc":"Linter to check whether the user correctly specified that the additive declaration already\nexists "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.linter.toAdditiveExisting\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">linter</span>.<span class=\"name\">toAdditiveExisting</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L380-L384","name":"ToAdditive.linter.toAdditiveGenerateName","line":380,"kind":"opaque","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.linter.toAdditiveGenerateName","doc":"Linter to check that the `to_additive` attribute is not given manually "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.linter.toAdditiveGenerateName\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">linter</span>.<span class=\"name\">toAdditiveGenerateName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L373-L378","name":"ToAdditive.linter.existingAttributeWarning","line":373,"kind":"opaque","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.linter.existingAttributeWarning","doc":"Linter, mostly used by `@[to_additive]`, that checks that the source declaration doesn't have\ncertain attributes "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.linter.existingAttributeWarning\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">linter</span>.<span class=\"name\">existingAttributeWarning</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L368-L371","name":"ToAdditive.linter.toAdditiveReorder","line":368,"kind":"opaque","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.linter.toAdditiveReorder","doc":"Linter to check that the `reorder` attribute is not given manually "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.linter.toAdditiveReorder\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">linter</span>.<span class=\"name\">toAdditiveReorder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L336-L363","name":"String.splitCase","line":336,"kind":"opaque","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#String.splitCase","doc":"This function takes a String and splits it into separate parts based on the following\n(naming conventions)[https://github.com/leanprover-community/mathlib4/wiki#naming-convention].\n\nE.g. `#eval \"InvHMulLEConjugate₂SMul_ne_top\".splitCase` yields\n`[\"Inv\", \"HMul\", \"LE\", \"Conjugate₂\", \"SMul\", \"_\", \"ne\", \"_\", \"top\"]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#String.splitCase\"><span class=\"name\">String</span>.<span class=\"name\">splitCase</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i₀</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L321-L333","name":"ToAdditive.endCapitalNames","line":321,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.endCapitalNames","doc":"A set of strings of names that end in a capital letter.\n* If the string contains a lowercase letter, the string should be split between the first occurrence\n  of a lower-case letter followed by an upper-case letter.\n* If multiple strings have the same prefix, they should be grouped by prefix\n* In this case, the second list should be prefix-free\n  (no element can be a prefix of a later element)\n\nTodo: automate the translation from `String` to an element in this `TreeMap`\n  (but this would require having something similar to the `rb_lmap` from Lean 3). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.endCapitalNames\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">endCapitalNames</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/TreeMap/Basic.html#Std.TreeMap\">Std.TreeMap</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a>)</span> <a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L319-L319","name":"ToAdditive.attrTo_additive?_","line":319,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.attrTo_additive?_","doc":"The attribute `to_additive` can be used to automatically transport theorems\nand definitions (but not inductive types and structures) from a multiplicative\ntheory to an additive theory.\n\nTo use this attribute, just write:\n\n```\n@[to_additive]\ntheorem mul_comm' {α} [CommSemigroup α] (x y : α) : x * y = y * x := mul_comm x y\n```\n\nThis code will generate a theorem named `add_comm'`. It is also\npossible to manually specify the name of the new declaration:\n\n```\n@[to_additive add_foo]\ntheorem foo := sorry\n```\n\nAn existing documentation string will _not_ be automatically used, so if the theorem or definition\nhas a doc string, a doc string for the additive version should be passed explicitly to\n`to_additive`.\n\n```\n/-- Multiplication is commutative -/\n@[to_additive \"Addition is commutative\"]\ntheorem mul_comm' {α} [CommSemigroup α] (x y : α) : x * y = y * x := CommSemigroup.mul_comm\n```\n\nThe transport tries to do the right thing in most cases using several\nheuristics described below.  However, in some cases it fails, and\nrequires manual intervention.\n\nUse the `to_additive existing` syntax to use an existing additive declaration, instead of\nautomatically generating it.\n\nUse the `(reorder := ...)` syntax to reorder the arguments in the generated additive declaration.\nThis is specified using cycle notation. For example `(reorder := 1 2, 5 6)` swaps the first two\narguments with each other and the fifth and the sixth argument and `(reorder := 3 4 5)` will move\nthe fifth argument before the third argument. This is mostly useful to translate declarations using\n`Pow` to those using `SMul`.\n\nUse the `(attr := ...)` syntax to apply attributes to both the multiplicative and the additive\nversion:\n\n```\n@[to_additive (attr := simp)] lemma mul_one' {G : Type*} [Group G] (x : G) : x * 1 = x := mul_one x\n```\n\nFor `simps` this also ensures that some generated lemmas are added to the additive dictionary.\n`@[to_additive (attr := to_additive)]` is a special case, where the `to_additive`\nattribute is added to the generated lemma only, to additivize it again.\nThis is useful for lemmas about `Pow` to generate both lemmas about `SMul` and `VAdd`. Example:\n```\n@[to_additive (attr := to_additive VAdd_lemma, simp) SMul_lemma]\nlemma Pow_lemma ... :=\n```\nIn the above example, the `simp` is added to all 3 lemmas. All other options to `to_additive`\n(like the generated name or `(reorder := ...)`) are not passed down,\nand can be given manually to each individual `to_additive` call.\n\n## Implementation notes\n\nThe transport process generally works by taking all the names of\nidentifiers appearing in the name, type, and body of a declaration and\ncreating a new declaration by mapping those names to additive versions\nusing a simple string-based dictionary and also using all declarations\nthat have previously been labeled with `to_additive`. The dictionary is `ToAdditive.nameDict`\nand can be found in the `Tactic.ToAdditive.Frontend` file. If you introduce a new name which\nshould be translated by `to_additive` you should add the translation to this dictionary.\n\nIn the `mul_comm'` example above, `to_additive` maps:\n* `mul_comm'` to `add_comm'`,\n* `CommSemigroup` to `AddCommSemigroup`,\n* `x * y` to `x + y` and `y * x` to `y + x`, and\n* `CommSemigroup.mul_comm'` to `AddCommSemigroup.add_comm'`.\n\n### Heuristics\n\n`to_additive` uses heuristics to determine whether a particular identifier has to be\nmapped to its additive version. The basic heuristic is\n\n* Only map an identifier to its additive version if its first argument doesn't\n  contain any unapplied identifiers.\n\nExamples:\n* `@Mul.mul Nat n m` (i.e. `(n * m : Nat)`) will not change to `+`, since its\n  first argument is `Nat`, an identifier not applied to any arguments.\n* `@Mul.mul (α × β) x y` will change to `+`. It's first argument contains only the identifier\n  `Prod`, but this is applied to arguments, `α` and `β`.\n* `@Mul.mul (α × Int) x y` will not change to `+`, since its first argument contains `Int`.\n\nThe reasoning behind the heuristic is that the first argument is the type which is \"additivized\",\nand this usually doesn't make sense if this is on a fixed type.\n\nThere are some exceptions to this heuristic:\n\n* Identifiers that have the `@[to_additive]` attribute are ignored.\n  For example, multiplication in `↥Semigroup` is replaced by addition in `↥AddSemigroup`.\n  You can turn this behavior off by *also* adding the `@[to_additive_dont_translate]` attribute.\n* If an identifier `d` has attribute `@[to_additive_relevant_arg n]` then the argument\n  in position `n` is checked for a fixed type, instead of checking the first argument.\n  `@[to_additive]` will automatically add the attribute `@[to_additive_relevant_arg n]` to a\n  declaration when the first argument has no multiplicative type-class, but argument `n` does.\n* If an identifier has attribute `@[to_additive_ignore_args n1 n2 ...]` then all the arguments in\n  positions `n1`, `n2`, ... will not be checked for unapplied identifiers (start counting from 1).\n  For example, `ContMDiffMap` has attribute `@[to_additive_ignore_args 21]`, which means\n  that its 21st argument `(n : WithTop ℕ)` can contain `ℕ`\n  (usually in the form `Top.top ℕ ...`) and still be additivized.\n  So `@Mul.mul (C^∞⟮I, N; I', G⟯) _ f g` will be additivized.\n\n### Troubleshooting\n\nIf `@[to_additive]` fails because the additive declaration raises a type mismatch, there are\nvarious things you can try.\nThe first thing to do is to figure out what `@[to_additive]` did wrong by looking at the type\nmismatch error.\n\n* Option 1: The most common case is that it didn't additivize a declaration that should be\n  additivized. This happened because the heuristic applied, and the first argument contains a\n  fixed type, like `ℕ` or `ℝ`. However, the heuristic misfires on some other declarations.\n  Solutions:\n  * First figure out what the fixed type is in the first argument of the declaration that didn't\n    get additivized. Note that this fixed type can occur in implicit arguments. If manually finding\n    it is hard, you can run `set_option trace.to_additive_detail true` and search the output for the\n    fragment \"contains the fixed type\" to find what the fixed type is.\n  * If the fixed type has an additive counterpart (like `↥Semigroup`), give it the `@[to_additive]`\n    attribute.\n  * If the fixed type has nothing to do with algebraic operations (like `TopCat`), add the attribute\n    `@[to_additive existing Foo]` to the fixed type `Foo`.\n  * If the fixed type occurs inside the `k`-th argument of a declaration `d`, and the\n    `k`-th argument is not connected to the multiplicative structure on `d`, consider adding\n    attribute `[to_additive_ignore_args k]` to `d`.\n    Example: `ContMDiffMap` ignores the argument `(n : WithTop ℕ)`\n* Option 2: It additivized a declaration `d` that should remain multiplicative. Solution:\n  * Make sure the first argument of `d` is a type with a multiplicative structure. If not, can you\n    reorder the (implicit) arguments of `d` so that the first argument becomes a type with a\n    multiplicative structure (and not some indexing type)?\n    The reason is that `@[to_additive]` doesn't additivize declarations if their first argument\n    contains fixed types like `ℕ` or `ℝ`. See section Heuristics.\n    If the first argument is not the argument with a multiplicative type-class, `@[to_additive]`\n    should have automatically added the attribute `@[to_additive_relevant_arg]` to the declaration.\n    You can test this by running the following (where `d` is the full name of the declaration):\n    ```\n      open Lean in run_cmd logInfo m!\"{ToAdditive.relevantArgAttr.find? (← getEnv) `d}\"\n    ```\n    The expected output is `n` where the `n`-th (0-indexed) argument of `d` is a type (family)\n    with a multiplicative structure on it. `none` means `0`.\n    If you get a different output (or a failure), you could add the attribute\n    `@[to_additive_relevant_arg n]` manually, where `n` is an (1-indexed) argument with a\n    multiplicative structure.\n* Option 3: Arguments / universe levels are incorrectly ordered in the additive version.\n  This likely only happens when the multiplicative declaration involves `pow`/`^`. Solutions:\n  * Ensure that the order of arguments of all relevant declarations are the same for the\n    multiplicative and additive version. This might mean that arguments have an \"unnatural\" order\n    (e.g. `Monoid.npow n x` corresponds to `x ^ n`, but it is convenient that `Monoid.npow` has this\n    argument order, since it matches `AddMonoid.nsmul n x`.\n  * If this is not possible, add `(reorder := ...)` argument to `to_additive`.\n\nIf neither of these solutions work, and `to_additive` is unable to automatically generate the\nadditive version of a declaration, manually write and prove the additive version.\nOften the proof of a lemma/theorem can just be the multiplicative version of the lemma applied to\n`multiplicative G`.\nAfterwards, apply the attribute manually:\n\n```\nattribute [to_additive foo_add_bar] foo_bar\n```\n\nThis will allow future uses of `to_additive` to recognize that\n`foo_bar` should be replaced with `foo_add_bar`.\n\n### Handling of hidden definitions\n\nBefore transporting the “main” declaration `src`, `to_additive` first\nscans its type and value for names starting with `src`, and transports\nthem. This includes auxiliary definitions like `src._match_1`\n\nIn addition to transporting the “main” declaration, `to_additive` transports\nits equational lemmas and tags them as equational lemmas for the new declaration.\n\n### Structure fields and constructors\n\nIf `src` is a structure, then the additive version has to be already written manually.\nIn this case `to_additive` adds all structure fields to its mapping.\n\n### Name generation\n\n* If `@[to_additive]` is called without a `name` argument, then the\n  new name is autogenerated.  First, it takes the longest prefix of\n  the source name that is already known to `to_additive`, and replaces\n  this prefix with its additive counterpart. Second, it takes the last\n  part of the name (i.e., after the last dot), and replaces common\n  name parts (“mul”, “one”, “inv”, “prod”) with their additive versions.\n\n* [todo] Namespaces can be transformed using `map_namespace`. For example:\n  ```\n  run_cmd to_additive.map_namespace `QuotientGroup `QuotientAddGroup\n  ```\n\n  Later uses of `to_additive` on declarations in the `QuotientGroup`\n  namespace will be created in the `QuotientAddGroup` namespaces.\n\n* If `@[to_additive]` is called with a `name` argument `new_name`\n  /without a dot/, then `to_additive` updates the prefix as described\n  above, then replaces the last part of the name with `new_name`.\n\n* If `@[to_additive]` is called with a `name` argument\n  `NewNamespace.new_name` /with a dot/, then `to_additive` uses this\n  new name as is.\n\nAs a safety check, in the first case `to_additive` double checks\nthat the new name differs from the original one. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.attrTo_additive?_\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">attrTo_additive?_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L103-L316","name":"ToAdditive.to_additive","line":103,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.to_additive","doc":"The attribute `to_additive` can be used to automatically transport theorems\nand definitions (but not inductive types and structures) from a multiplicative\ntheory to an additive theory.\n\nTo use this attribute, just write:\n\n```\n@[to_additive]\ntheorem mul_comm' {α} [CommSemigroup α] (x y : α) : x * y = y * x := mul_comm x y\n```\n\nThis code will generate a theorem named `add_comm'`. It is also\npossible to manually specify the name of the new declaration:\n\n```\n@[to_additive add_foo]\ntheorem foo := sorry\n```\n\nAn existing documentation string will _not_ be automatically used, so if the theorem or definition\nhas a doc string, a doc string for the additive version should be passed explicitly to\n`to_additive`.\n\n```\n/-- Multiplication is commutative -/\n@[to_additive \"Addition is commutative\"]\ntheorem mul_comm' {α} [CommSemigroup α] (x y : α) : x * y = y * x := CommSemigroup.mul_comm\n```\n\nThe transport tries to do the right thing in most cases using several\nheuristics described below.  However, in some cases it fails, and\nrequires manual intervention.\n\nUse the `to_additive existing` syntax to use an existing additive declaration, instead of\nautomatically generating it.\n\nUse the `(reorder := ...)` syntax to reorder the arguments in the generated additive declaration.\nThis is specified using cycle notation. For example `(reorder := 1 2, 5 6)` swaps the first two\narguments with each other and the fifth and the sixth argument and `(reorder := 3 4 5)` will move\nthe fifth argument before the third argument. This is mostly useful to translate declarations using\n`Pow` to those using `SMul`.\n\nUse the `(attr := ...)` syntax to apply attributes to both the multiplicative and the additive\nversion:\n\n```\n@[to_additive (attr := simp)] lemma mul_one' {G : Type*} [Group G] (x : G) : x * 1 = x := mul_one x\n```\n\nFor `simps` this also ensures that some generated lemmas are added to the additive dictionary.\n`@[to_additive (attr := to_additive)]` is a special case, where the `to_additive`\nattribute is added to the generated lemma only, to additivize it again.\nThis is useful for lemmas about `Pow` to generate both lemmas about `SMul` and `VAdd`. Example:\n```\n@[to_additive (attr := to_additive VAdd_lemma, simp) SMul_lemma]\nlemma Pow_lemma ... :=\n```\nIn the above example, the `simp` is added to all 3 lemmas. All other options to `to_additive`\n(like the generated name or `(reorder := ...)`) are not passed down,\nand can be given manually to each individual `to_additive` call.\n\n## Implementation notes\n\nThe transport process generally works by taking all the names of\nidentifiers appearing in the name, type, and body of a declaration and\ncreating a new declaration by mapping those names to additive versions\nusing a simple string-based dictionary and also using all declarations\nthat have previously been labeled with `to_additive`. The dictionary is `ToAdditive.nameDict`\nand can be found in the `Tactic.ToAdditive.Frontend` file. If you introduce a new name which\nshould be translated by `to_additive` you should add the translation to this dictionary.\n\nIn the `mul_comm'` example above, `to_additive` maps:\n* `mul_comm'` to `add_comm'`,\n* `CommSemigroup` to `AddCommSemigroup`,\n* `x * y` to `x + y` and `y * x` to `y + x`, and\n* `CommSemigroup.mul_comm'` to `AddCommSemigroup.add_comm'`.\n\n### Heuristics\n\n`to_additive` uses heuristics to determine whether a particular identifier has to be\nmapped to its additive version. The basic heuristic is\n\n* Only map an identifier to its additive version if its first argument doesn't\n  contain any unapplied identifiers.\n\nExamples:\n* `@Mul.mul Nat n m` (i.e. `(n * m : Nat)`) will not change to `+`, since its\n  first argument is `Nat`, an identifier not applied to any arguments.\n* `@Mul.mul (α × β) x y` will change to `+`. It's first argument contains only the identifier\n  `Prod`, but this is applied to arguments, `α` and `β`.\n* `@Mul.mul (α × Int) x y` will not change to `+`, since its first argument contains `Int`.\n\nThe reasoning behind the heuristic is that the first argument is the type which is \"additivized\",\nand this usually doesn't make sense if this is on a fixed type.\n\nThere are some exceptions to this heuristic:\n\n* Identifiers that have the `@[to_additive]` attribute are ignored.\n  For example, multiplication in `↥Semigroup` is replaced by addition in `↥AddSemigroup`.\n  You can turn this behavior off by *also* adding the `@[to_additive_dont_translate]` attribute.\n* If an identifier `d` has attribute `@[to_additive_relevant_arg n]` then the argument\n  in position `n` is checked for a fixed type, instead of checking the first argument.\n  `@[to_additive]` will automatically add the attribute `@[to_additive_relevant_arg n]` to a\n  declaration when the first argument has no multiplicative type-class, but argument `n` does.\n* If an identifier has attribute `@[to_additive_ignore_args n1 n2 ...]` then all the arguments in\n  positions `n1`, `n2`, ... will not be checked for unapplied identifiers (start counting from 1).\n  For example, `ContMDiffMap` has attribute `@[to_additive_ignore_args 21]`, which means\n  that its 21st argument `(n : WithTop ℕ)` can contain `ℕ`\n  (usually in the form `Top.top ℕ ...`) and still be additivized.\n  So `@Mul.mul (C^∞⟮I, N; I', G⟯) _ f g` will be additivized.\n\n### Troubleshooting\n\nIf `@[to_additive]` fails because the additive declaration raises a type mismatch, there are\nvarious things you can try.\nThe first thing to do is to figure out what `@[to_additive]` did wrong by looking at the type\nmismatch error.\n\n* Option 1: The most common case is that it didn't additivize a declaration that should be\n  additivized. This happened because the heuristic applied, and the first argument contains a\n  fixed type, like `ℕ` or `ℝ`. However, the heuristic misfires on some other declarations.\n  Solutions:\n  * First figure out what the fixed type is in the first argument of the declaration that didn't\n    get additivized. Note that this fixed type can occur in implicit arguments. If manually finding\n    it is hard, you can run `set_option trace.to_additive_detail true` and search the output for the\n    fragment \"contains the fixed type\" to find what the fixed type is.\n  * If the fixed type has an additive counterpart (like `↥Semigroup`), give it the `@[to_additive]`\n    attribute.\n  * If the fixed type has nothing to do with algebraic operations (like `TopCat`), add the attribute\n    `@[to_additive existing Foo]` to the fixed type `Foo`.\n  * If the fixed type occurs inside the `k`-th argument of a declaration `d`, and the\n    `k`-th argument is not connected to the multiplicative structure on `d`, consider adding\n    attribute `[to_additive_ignore_args k]` to `d`.\n    Example: `ContMDiffMap` ignores the argument `(n : WithTop ℕ)`\n* Option 2: It additivized a declaration `d` that should remain multiplicative. Solution:\n  * Make sure the first argument of `d` is a type with a multiplicative structure. If not, can you\n    reorder the (implicit) arguments of `d` so that the first argument becomes a type with a\n    multiplicative structure (and not some indexing type)?\n    The reason is that `@[to_additive]` doesn't additivize declarations if their first argument\n    contains fixed types like `ℕ` or `ℝ`. See section Heuristics.\n    If the first argument is not the argument with a multiplicative type-class, `@[to_additive]`\n    should have automatically added the attribute `@[to_additive_relevant_arg]` to the declaration.\n    You can test this by running the following (where `d` is the full name of the declaration):\n    ```\n      open Lean in run_cmd logInfo m!\"{ToAdditive.relevantArgAttr.find? (← getEnv) `d}\"\n    ```\n    The expected output is `n` where the `n`-th (0-indexed) argument of `d` is a type (family)\n    with a multiplicative structure on it. `none` means `0`.\n    If you get a different output (or a failure), you could add the attribute\n    `@[to_additive_relevant_arg n]` manually, where `n` is an (1-indexed) argument with a\n    multiplicative structure.\n* Option 3: Arguments / universe levels are incorrectly ordered in the additive version.\n  This likely only happens when the multiplicative declaration involves `pow`/`^`. Solutions:\n  * Ensure that the order of arguments of all relevant declarations are the same for the\n    multiplicative and additive version. This might mean that arguments have an \"unnatural\" order\n    (e.g. `Monoid.npow n x` corresponds to `x ^ n`, but it is convenient that `Monoid.npow` has this\n    argument order, since it matches `AddMonoid.nsmul n x`.\n  * If this is not possible, add `(reorder := ...)` argument to `to_additive`.\n\nIf neither of these solutions work, and `to_additive` is unable to automatically generate the\nadditive version of a declaration, manually write and prove the additive version.\nOften the proof of a lemma/theorem can just be the multiplicative version of the lemma applied to\n`multiplicative G`.\nAfterwards, apply the attribute manually:\n\n```\nattribute [to_additive foo_add_bar] foo_bar\n```\n\nThis will allow future uses of `to_additive` to recognize that\n`foo_bar` should be replaced with `foo_add_bar`.\n\n### Handling of hidden definitions\n\nBefore transporting the “main” declaration `src`, `to_additive` first\nscans its type and value for names starting with `src`, and transports\nthem. This includes auxiliary definitions like `src._match_1`\n\nIn addition to transporting the “main” declaration, `to_additive` transports\nits equational lemmas and tags them as equational lemmas for the new declaration.\n\n### Structure fields and constructors\n\nIf `src` is a structure, then the additive version has to be already written manually.\nIn this case `to_additive` adds all structure fields to its mapping.\n\n### Name generation\n\n* If `@[to_additive]` is called without a `name` argument, then the\n  new name is autogenerated.  First, it takes the longest prefix of\n  the source name that is already known to `to_additive`, and replaces\n  this prefix with its additive counterpart. Second, it takes the last\n  part of the name (i.e., after the last dot), and replaces common\n  name parts (“mul”, “one”, “inv”, “prod”) with their additive versions.\n\n* [todo] Namespaces can be transformed using `map_namespace`. For example:\n  ```\n  run_cmd to_additive.map_namespace `QuotientGroup `QuotientAddGroup\n  ```\n\n  Later uses of `to_additive` on declarations in the `QuotientGroup`\n  namespace will be created in the `QuotientAddGroup` namespaces.\n\n* If `@[to_additive]` is called with a `name` argument `new_name`\n  /without a dot/, then `to_additive` updates the prefix as described\n  above, then replaces the last part of the name with `new_name`.\n\n* If `@[to_additive]` is called with a `name` argument\n  `NewNamespace.new_name` /with a dot/, then `to_additive` uses this\n  new name as is.\n\nAs a safety check, in the first case `to_additive` double checks\nthat the new name differs from the original one. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.to_additive\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">to_additive</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L99-L101","name":"ToAdditive.toAdditiveRest","line":99,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.toAdditiveRest","doc":"Remaining arguments of `to_additive`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.toAdditiveRest\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">toAdditiveRest</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L97-L98","name":"ToAdditive.toAdditiveOption","line":97,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.toAdditiveOption","doc":"Options to `to_additive`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.toAdditiveOption\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">toAdditiveOption</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L95-L96","name":"ToAdditive.toAdditiveReorderOption","line":95,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.toAdditiveReorderOption","doc":"A `reorder := ...` option for `to_additive`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.toAdditiveReorderOption\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">toAdditiveReorderOption</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L93-L94","name":"ToAdditive.toAdditiveAttrOption","line":93,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.toAdditiveAttrOption","doc":"An `attr := ...` option for `to_additive`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.toAdditiveAttrOption\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">toAdditiveAttrOption</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L82-L91","name":"ToAdditive.to_additive_dont_translate","line":82,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.to_additive_dont_translate","doc":"The `to_additive_dont_translate` attribute, used to specify types that should be translated by\n`to_additive`, but its operations should remain multiplicative.\n\nUsage notes:\n* Apply this together with the `to_additive` attribute.\n* The name generation of `to_additive` is not aware that the operations on this type should not be\n  translated, so you generally have to specify the name itself, if the name should remain\n  multiplicative.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.to_additive_dont_translate\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">to_additive_dont_translate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L67-L80","name":"ToAdditive.to_additive_change_numeral","line":67,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.to_additive_change_numeral","doc":"An attribute that stores all the declarations that deal with numeric literals on variable types.\n\nNumeral literals occur in expressions without type information, so in order to decide whether `1`\nneeds to be changed to `0`, the context around the numeral is relevant.\nMost numerals will be in an `OfNat.ofNat` application, though tactics can add numeral literals\ninside arbitrary functions. By default we assume that we do not change numerals, unless it is\nin a function application with the `to_additive_change_numeral` attribute.\n\n`@[to_additive_change_numeral n₁ ...]` should be added to all functions that take one or more\nnumerals as argument that should be changed if `additiveTest` succeeds on the first argument,\ni.e. when the numeral is only translated if the first argument is a variable\n(or consists of variables).\nThe arguments `n₁ ...` are the positions of the numeral arguments (starting counting from 1). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.to_additive_change_numeral\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">to_additive_change_numeral</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L62-L65","name":"ToAdditive.to_additive_reorder","line":62,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.to_additive_reorder","doc":"An attribute that stores all the declarations that needs their arguments reordered when\napplying `@[to_additive]`. It is applied automatically by the `(reorder := ...)` syntax of\n`to_additive`, and should not usually be added manually. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.to_additive_reorder\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">to_additive_reorder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L41-L60","name":"ToAdditive.to_additive_relevant_arg","line":41,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.to_additive_relevant_arg","doc":"An attribute that is automatically added to declarations tagged with `@[to_additive]`,\nif needed.\n\nThis attribute tells which argument is the type where this declaration uses the multiplicative\nstructure. If there are multiple argument, we typically tag the first one.\nIf this argument contains a fixed type, this declaration will note be additivized.\nSee the Heuristics section of `to_additive.attr` for more details.\n\nIf a declaration is not tagged, it is presumed that the first argument is relevant.\n`@[to_additive]` uses the function `to_additive.first_multiplicative_arg` to automatically tag\ndeclarations. It is ok to update it manually if the automatic tagging made an error.\n\nImplementation note: we only allow exactly 1 relevant argument, even though some declarations\n(like `prod.group`) have multiple arguments with a multiplicative structure on it.\nThe reason is that whether we additivize a declaration is an all-or-nothing decision, and if\nwe will not be able to additivize declarations that (e.g.) talk about multiplication on `ℕ × α`\nanyway.\n\nWarning: interactions between this and the `(reorder := ...)` argument are not well-tested. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.to_additive_relevant_arg\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">to_additive_relevant_arg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Tactic/ToAdditive/Frontend.lean#L35-L39","name":"ToAdditive.to_additive_ignore_args","line":35,"kind":"def","docLink":"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.to_additive_ignore_args","doc":"An attribute that tells `@[to_additive]` that certain arguments of this definition are not\ninvolved when using `@[to_additive]`.\nThis helps the heuristic of `@[to_additive]` by also transforming definitions if `ℕ` or another\nfixed type occurs as one of these arguments. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/Frontend.html#ToAdditive.to_additive_ignore_args\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">to_additive_ignore_args</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}