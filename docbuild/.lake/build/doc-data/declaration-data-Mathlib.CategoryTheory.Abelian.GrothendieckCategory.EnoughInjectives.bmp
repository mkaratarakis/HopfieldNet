{"name":"Mathlib.CategoryTheory.Abelian.GrothendieckCategory.EnoughInjectives","instances":[{"typeNames":["CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms"],"name":"CategoryTheory.IsGrothendieckAbelian.instIsSmallGeneratingMonomorphismsOfSmallSubobject","className":"CategoryTheory.MorphismProperty.IsSmall"},{"typeNames":["CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.functor"],"name":"CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.instIsWellOrderContinuousFunctor","className":"CategoryTheory.Functor.IsWellOrderContinuous"},{"typeNames":["CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms"],"name":"CategoryTheory.IsGrothendieckAbelian.instHasSmallObjectArgumentGeneratingMonomorphisms","className":"CategoryTheory.MorphismProperty.HasSmallObjectArgument"},{"typeNames":["CategoryTheory.MorphismProperty.monomorphisms","CategoryTheory.MorphismProperty.rlp"],"name":"CategoryTheory.IsGrothendieckAbelian.instHasFunctorialFactorizationMonomorphismsRlp","className":"CategoryTheory.MorphismProperty.HasFunctorialFactorization"},{"typeNames":["CategoryTheory.MorphismProperty.MapFactorizationData.i"],"name":"CategoryTheory.IsGrothendieckAbelian.instMonoIMonomorphismsRlpMonoMapFactorizationDataRlp","className":"CategoryTheory.Mono"},{"typeNames":["CategoryTheory.MorphismProperty.MapFactorizationData.Z"],"name":"CategoryTheory.IsGrothendieckAbelian.instInjectiveZMonomorphismsRlpMonoMapFactorizationDataRlpOfNatHom","className":"CategoryTheory.Injective"},{"typeNames":[],"name":"CategoryTheory.IsGrothendieckAbelian.enoughInjectives","className":"CategoryTheory.EnoughInjectives"}],"imports":["Init","Mathlib.CategoryTheory.Abelian.CommSq","Mathlib.CategoryTheory.Abelian.GrothendieckCategory.ColimCoyoneda","Mathlib.CategoryTheory.Abelian.GrothendieckCategory.Monomorphisms","Mathlib.CategoryTheory.Abelian.Monomorphisms","Mathlib.CategoryTheory.Preadditive.Injective.LiftingProperties","Mathlib.CategoryTheory.SmallObject.Basic","Mathlib.CategoryTheory.Subobject.HasCardinalLT","Mathlib.Order.TransfiniteIteration"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.lean#L366-L369","name":"CategoryTheory.IsGrothendieckAbelian.enoughInjectives","line":366,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.enoughInjectives","doc":"A Grothendieck abelian category has enough injectives. \n\n[Stacks Tag 079H](https://stacks.math.columbia.edu/tag/079H)"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.enoughInjectives\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsGrothendieckAbelian</span>.<span class=\"name\">enoughInjectives</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/Basic.html#CategoryTheory.IsGrothendieckAbelian\">IsGrothendieckAbelian.{w, v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Injective/Basic.html#CategoryTheory.EnoughInjectives\">EnoughInjectives</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.lean#L361-L364","name":"CategoryTheory.IsGrothendieckAbelian.instInjectiveZMonomorphismsRlpMonoMapFactorizationDataRlpOfNatHom","line":361,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.instInjectiveZMonomorphismsRlpMonoMapFactorizationDataRlpOfNatHom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.instInjectiveZMonomorphismsRlpMonoMapFactorizationDataRlpOfNatHom\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsGrothendieckAbelian</span>.<span class=\"name\">instInjectiveZMonomorphismsRlpMonoMapFactorizationDataRlpOfNatHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/Basic.html#CategoryTheory.IsGrothendieckAbelian\">IsGrothendieckAbelian.{w, v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Injective/Basic.html#CategoryTheory.Injective\">Injective</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.monoMapFactorizationDataRlp\">monoMapFactorizationDataRlp</a> <span class=\"fn\">0</span>)</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Factorization.html#CategoryTheory.MorphismProperty.MapFactorizationData.Z\">Z</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.lean#L357-L359","name":"CategoryTheory.IsGrothendieckAbelian.instMonoIMonomorphismsRlpMonoMapFactorizationDataRlp","line":357,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.instMonoIMonomorphismsRlpMonoMapFactorizationDataRlp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.instMonoIMonomorphismsRlpMonoMapFactorizationDataRlp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsGrothendieckAbelian</span>.<span class=\"name\">instMonoIMonomorphismsRlpMonoMapFactorizationDataRlp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/Basic.html#CategoryTheory.IsGrothendieckAbelian\">IsGrothendieckAbelian.{w, v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">Mono</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.monoMapFactorizationDataRlp\">monoMapFactorizationDataRlp</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Factorization.html#CategoryTheory.MorphismProperty.MapFactorizationData.i\">i</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.lean#L350-L355","name":"CategoryTheory.IsGrothendieckAbelian.monoMapFactorizationDataRlp","line":350,"kind":"def","docLink":"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.monoMapFactorizationDataRlp","doc":"A (functorial) factorization of any morphisms in a Grothendieck abelian category\nas a monomorphism followed by a morphism which has the right lifting property\nwith respect to all monomorphisms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.monoMapFactorizationDataRlp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsGrothendieckAbelian</span>.<span class=\"name\">monoMapFactorizationDataRlp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/Basic.html#CategoryTheory.IsGrothendieckAbelian\">IsGrothendieckAbelian.{w, v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty.monomorphisms\">MorphismProperty.monomorphisms</a> <span class=\"fn\">C</span>)</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Factorization.html#CategoryTheory.MorphismProperty.MapFactorizationData\">MapFactorizationData</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty.monomorphisms\">MorphismProperty.monomorphisms</a> <span class=\"fn\">C</span>)</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/LiftingProperty.html#CategoryTheory.MorphismProperty.rlp\">rlp</a></span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.lean#L344-L348","name":"CategoryTheory.IsGrothendieckAbelian.instHasFunctorialFactorizationMonomorphismsRlp","line":344,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.instHasFunctorialFactorizationMonomorphismsRlp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.instHasFunctorialFactorizationMonomorphismsRlp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsGrothendieckAbelian</span>.<span class=\"name\">instHasFunctorialFactorizationMonomorphismsRlp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/Basic.html#CategoryTheory.IsGrothendieckAbelian\">IsGrothendieckAbelian.{w, v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty.monomorphisms\">MorphismProperty.monomorphisms</a> <span class=\"fn\">C</span>)</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Factorization.html#CategoryTheory.MorphismProperty.HasFunctorialFactorization\">HasFunctorialFactorization</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty.monomorphisms\">MorphismProperty.monomorphisms</a> <span class=\"fn\">C</span>)</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/LiftingProperty.html#CategoryTheory.MorphismProperty.rlp\">rlp</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.lean#L332-L342","name":"CategoryTheory.IsGrothendieckAbelian.llp_rlp_monomorphisms","line":332,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.llp_rlp_monomorphisms","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.llp_rlp_monomorphisms\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsGrothendieckAbelian</span>.<span class=\"name\">llp_rlp_monomorphisms</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/Basic.html#CategoryTheory.IsGrothendieckAbelian\">IsGrothendieckAbelian.{w, v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hG</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Generator/Basic.html#CategoryTheory.IsSeparator\">IsSeparator</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty.monomorphisms\">MorphismProperty.monomorphisms</a> <span class=\"fn\">C</span>)</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/LiftingProperty.html#CategoryTheory.MorphismProperty.rlp\">rlp</a></span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/LiftingProperty.html#CategoryTheory.MorphismProperty.llp\">llp</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty.monomorphisms\">MorphismProperty.monomorphisms</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.lean#L313-L330","name":"CategoryTheory.IsGrothendieckAbelian.instHasSmallObjectArgumentGeneratingMonomorphisms","line":313,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.instHasSmallObjectArgumentGeneratingMonomorphisms","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.instHasSmallObjectArgumentGeneratingMonomorphisms\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsGrothendieckAbelian</span>.<span class=\"name\">instHasSmallObjectArgumentGeneratingMonomorphisms</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/Basic.html#CategoryTheory.IsGrothendieckAbelian\">IsGrothendieckAbelian.{w, v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms\">generatingMonomorphisms</a> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/CategoryTheory/SmallObject/Basic.html#CategoryTheory.MorphismProperty.HasSmallObjectArgument\">HasSmallObjectArgument</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.lean#L300-L307","name":"CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms_rlp","line":300,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms_rlp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms_rlp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsGrothendieckAbelian</span>.<span class=\"name\">generatingMonomorphisms_rlp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/Basic.html#CategoryTheory.IsGrothendieckAbelian\">IsGrothendieckAbelian.{w, v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hG</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Generator/Basic.html#CategoryTheory.IsSeparator\">IsSeparator</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms\">generatingMonomorphisms</a> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/LiftingProperty.html#CategoryTheory.MorphismProperty.rlp\">rlp</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty.monomorphisms\">MorphismProperty.monomorphisms</a> <span class=\"fn\">C</span>)</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/LiftingProperty.html#CategoryTheory.MorphismProperty.rlp\">rlp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.lean#L281-L292","name":"CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.exists_transfiniteCompositionOfShape","line":281,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.exists_transfiniteCompositionOfShape","doc":"Let `C` be a Grothendieck abelian category. Assume that `G : C` is a generator\nof `C`. Then, any morphism in `C` is a transfinite composition of pushouts\nof monomorphisms in the family `generatingMonomorphisms G` which consists\nof the inclusions of the subobjects of `G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.exists_transfiniteCompositionOfShape\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsGrothendieckAbelian</span>.<span class=\"name\">generatingMonomorphisms</span>.<span class=\"name\">exists_transfiniteCompositionOfShape</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hG</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Generator/Basic.html#CategoryTheory.IsSeparator\">IsSeparator</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/Basic.html#CategoryTheory.IsGrothendieckAbelian\">IsGrothendieckAbelian.{w, v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">X</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">Mono</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">‚àÉ (<span class=\"fn\">J</span> : <a href=\"./foundational_types.html\">Type</a> w) (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">J</span></span>) (<span class=\"fn\">x_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder/Basic.html#OrderBot\">OrderBot</a> <span class=\"fn\">J</span></span>) (<span class=\"fn\">x_2</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#SuccOrder\">SuccOrder</a> <span class=\"fn\">J</span></span>) (<span class=\"fn\">x_3</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">J</span></span>),\n  <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms\">generatingMonomorphisms</a> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Limits.html#CategoryTheory.MorphismProperty.pushouts\">pushouts</a></span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/TransfiniteComposition.html#CategoryTheory.MorphismProperty.TransfiniteCompositionOfShape\">TransfiniteCompositionOfShape</a></span> <span class=\"fn\">J</span> <span class=\"fn\">f</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.lean#L263-L277","name":"CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.transfiniteCompositionOfShapeOfEqTop","line":263,"kind":"def","docLink":"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.transfiniteCompositionOfShapeOfEqTop","doc":"If `transfiniteIterate (largerSubobject hG) j (Subobject.mk f) = ‚ä§`,\nthen the monomorphism `f` is a transfinite composition of pushouts of\nmonomorphisms in the family `generatingMonomorphisms G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.transfiniteCompositionOfShapeOfEqTop\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsGrothendieckAbelian</span>.<span class=\"name\">generatingMonomorphisms</span>.<span class=\"name\">transfiniteCompositionOfShapeOfEqTop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hG</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Generator/Basic.html#CategoryTheory.IsSeparator\">IsSeparator</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/Basic.html#CategoryTheory.IsGrothendieckAbelian\">IsGrothendieckAbelian.{w, v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">Mono</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">J</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder/Basic.html#OrderBot\">OrderBot</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#SuccOrder\">SuccOrder</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\">J</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hj</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/TransfiniteIteration.html#transfiniteIterate\">transfiniteIterate</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.largerSubobject\">largerSubobject</a> <span class=\"fn\">hG</span>)</span> <span class=\"fn\">j</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject.mk\">Subobject.mk</a> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">‚ä§</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms\">generatingMonomorphisms</a> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Limits.html#CategoryTheory.MorphismProperty.pushouts\">pushouts</a></span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/TransfiniteComposition.html#CategoryTheory.MorphismProperty.TransfiniteCompositionOfShape\">TransfiniteCompositionOfShape</a></span> <span class=\"fn\">(‚Üë<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Iic\">Set.Iic</a> <span class=\"fn\">j</span>)</span>)</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.lean#L239-L257","name":"CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.transfiniteCompositionOfShapeMapFromBot","line":239,"kind":"def","docLink":"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.transfiniteCompositionOfShapeMapFromBot","doc":"For any `j`, the map `(functor hG A‚ÇÄ J).map (homOfLE bot_le : ‚ä• ‚ü∂ j)`\nis a transfinite composition of pushouts of monomorphisms in the\nfamily `generatingMonomorphisms G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.transfiniteCompositionOfShapeMapFromBot\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsGrothendieckAbelian</span>.<span class=\"name\">generatingMonomorphisms</span>.<span class=\"name\">transfiniteCompositionOfShapeMapFromBot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hG</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Generator/Basic.html#CategoryTheory.IsSeparator\">IsSeparator</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/Basic.html#CategoryTheory.IsGrothendieckAbelian\">IsGrothendieckAbelian.{w, v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A‚ÇÄ</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject\">Subobject</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">J</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder/Basic.html#OrderBot\">OrderBot</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#SuccOrder\">SuccOrder</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms\">generatingMonomorphisms</a> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Limits.html#CategoryTheory.MorphismProperty.pushouts\">pushouts</a></span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/TransfiniteComposition.html#CategoryTheory.MorphismProperty.TransfiniteCompositionOfShape\">TransfiniteCompositionOfShape</a></span> <span class=\"fn\">(‚Üë<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Iic\">Set.Iic</a> <span class=\"fn\">j</span>)</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.functor\">functor</a> <span class=\"fn\">hG</span> <span class=\"fn\">A‚ÇÄ</span> <span class=\"fn\">J</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#CategoryTheory.homOfLE\">homOfLE</a> <span class=\"fn\">‚ãØ</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.lean#L227-L236","name":"CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.instIsWellOrderContinuousFunctor","line":227,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.instIsWellOrderContinuousFunctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.instIsWellOrderContinuousFunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsGrothendieckAbelian</span>.<span class=\"name\">generatingMonomorphisms</span>.<span class=\"name\">instIsWellOrderContinuousFunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hG</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Generator/Basic.html#CategoryTheory.IsSeparator\">IsSeparator</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/Basic.html#CategoryTheory.IsGrothendieckAbelian\">IsGrothendieckAbelian.{w, v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A‚ÇÄ</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject\">Subobject</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">J</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder/Basic.html#OrderBot\">OrderBot</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#SuccOrder\">SuccOrder</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.functor\">functor</a> <span class=\"fn\">hG</span> <span class=\"fn\">A‚ÇÄ</span> <span class=\"fn\">J</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Preorder/WellOrderContinuous.html#CategoryTheory.Functor.IsWellOrderContinuous\">IsWellOrderContinuous</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.lean#L223-L225","name":"CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.functor","line":223,"kind":"def","docLink":"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.functor","doc":"The functor `J ‚•§ C` induced by `functorToMonoOver hG A‚ÇÄ J : J ‚•§ MonoOver X`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.functor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsGrothendieckAbelian</span>.<span class=\"name\">generatingMonomorphisms</span>.<span class=\"name\">functor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hG</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Generator/Basic.html#CategoryTheory.IsSeparator\">IsSeparator</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/Basic.html#CategoryTheory.IsGrothendieckAbelian\">IsGrothendieckAbelian.{w, v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A‚ÇÄ</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject\">Subobject</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">J</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder/Basic.html#OrderBot\">OrderBot</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#SuccOrder\">SuccOrder</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">J</span> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.lean#L217-L217","name":"CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.functorToMonoOver_obj","line":217,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.functorToMonoOver_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.functorToMonoOver_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsGrothendieckAbelian</span>.<span class=\"name\">generatingMonomorphisms</span>.<span class=\"name\">functorToMonoOver_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hG</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Generator/Basic.html#CategoryTheory.IsSeparator\">IsSeparator</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/Basic.html#CategoryTheory.IsGrothendieckAbelian\">IsGrothendieckAbelian.{w, v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A‚ÇÄ</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject\">Subobject</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">J</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder/Basic.html#OrderBot\">OrderBot</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#SuccOrder\">SuccOrder</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.functorToMonoOver\">functorToMonoOver</a> <span class=\"fn\">hG</span> <span class=\"fn\">A‚ÇÄ</span> <span class=\"fn\">J</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mk'\">MonoOver.mk'</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/TransfiniteIteration.html#transfiniteIterate\">transfiniteIterate</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.largerSubobject\">largerSubobject</a> <span class=\"fn\">hG</span>)</span> <span class=\"fn\">j</span> <span class=\"fn\">A‚ÇÄ</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject.arrow\">arrow</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.lean#L217-L217","name":"CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.functorToMonoOver_map","line":217,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.functorToMonoOver_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.functorToMonoOver_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsGrothendieckAbelian</span>.<span class=\"name\">generatingMonomorphisms</span>.<span class=\"name\">functorToMonoOver_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hG</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Generator/Basic.html#CategoryTheory.IsSeparator\">IsSeparator</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/Basic.html#CategoryTheory.IsGrothendieckAbelian\">IsGrothendieckAbelian.{w, v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A‚ÇÄ</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject\">Subobject</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">J</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder/Basic.html#OrderBot\">OrderBot</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#SuccOrder\">SuccOrder</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j </span><span class=\"fn\">j'</span> : <span class=\"fn\">J</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">j</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">j'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.functorToMonoOver\">functorToMonoOver</a> <span class=\"fn\">hG</span> <span class=\"fn\">A‚ÇÄ</span> <span class=\"fn\">J</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.homMk\">MonoOver.homMk</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/TransfiniteIteration.html#transfiniteIterate\">transfiniteIterate</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.largerSubobject\">largerSubobject</a> <span class=\"fn\">hG</span>)</span> <span class=\"fn\">j</span> <span class=\"fn\">A‚ÇÄ</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject.ofLE\">ofLE</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Order/TransfiniteIteration.html#transfiniteIterate\">transfiniteIterate</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.largerSubobject\">largerSubobject</a> <span class=\"fn\">hG</span>)</span> <span class=\"fn\">j'</span> <span class=\"fn\">A‚ÇÄ</span>)</span> <span class=\"fn\">‚ãØ</span>)</span>\n    <span class=\"fn\">‚ãØ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.lean#L212-L221","name":"CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.functorToMonoOver","line":212,"kind":"def","docLink":"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.functorToMonoOver","doc":"Let `C` be a Grothendieck abelian category with a generator (`hG`),\n`X : C`, `A‚ÇÄ : Subobject X`. Let `J` be a well ordered type. This is\nthe functor `J ‚•§ MonoOver X` which corresponds to the evaluation\nat `A‚ÇÄ` of the transfinite iteration of the map\n`largerSubobject hG : Subobject X ‚Üí Subobject X`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.functorToMonoOver\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsGrothendieckAbelian</span>.<span class=\"name\">generatingMonomorphisms</span>.<span class=\"name\">functorToMonoOver</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hG</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Generator/Basic.html#CategoryTheory.IsSeparator\">IsSeparator</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/Basic.html#CategoryTheory.IsGrothendieckAbelian\">IsGrothendieckAbelian.{w, v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A‚ÇÄ</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject\">Subobject</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">J</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder/Basic.html#OrderBot\">OrderBot</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#SuccOrder\">SuccOrder</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">J</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">MonoOver</a> <span class=\"fn\">X</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.lean#L199-L205","name":"CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.exists_ordinal","line":199,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.exists_ordinal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.exists_ordinal\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsGrothendieckAbelian</span>.<span class=\"name\">generatingMonomorphisms</span>.<span class=\"name\">exists_ordinal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hG</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Generator/Basic.html#CategoryTheory.IsSeparator\">IsSeparator</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/Basic.html#CategoryTheory.IsGrothendieckAbelian\">IsGrothendieckAbelian.{w, v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A‚ÇÄ</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject\">Subobject</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">‚àÉ (<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{w}</a>) (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.toType\">toType</a></span>), <span class=\"fn\"><a href=\"./Mathlib/Order/TransfiniteIteration.html#transfiniteIterate\">transfiniteIterate</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.largerSubobject\">largerSubobject</a> <span class=\"fn\">hG</span>)</span> <span class=\"fn\">j</span> <span class=\"fn\">A‚ÇÄ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">‚ä§</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.lean#L193-L197","name":"CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.top_mem_range","line":193,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.top_mem_range","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.top_mem_range\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsGrothendieckAbelian</span>.<span class=\"name\">generatingMonomorphisms</span>.<span class=\"name\">top_mem_range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hG</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Generator/Basic.html#CategoryTheory.IsSeparator\">IsSeparator</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/Basic.html#CategoryTheory.IsGrothendieckAbelian\">IsGrothendieckAbelian.{w, v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A‚ÇÄ</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject\">Subobject</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">J</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder/Basic.html#OrderBot\">OrderBot</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#SuccOrder\">SuccOrder</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hJ</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/HasCardinalLT.html#HasCardinalLT\">HasCardinalLT</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject\">Subobject</a> <span class=\"fn\">X</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">J</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">‚àÉ (<span class=\"fn\">j</span> : <span class=\"fn\">J</span>), <span class=\"fn\"><a href=\"./Mathlib/Order/TransfiniteIteration.html#transfiniteIterate\">transfiniteIterate</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.largerSubobject\">largerSubobject</a> <span class=\"fn\">hG</span>)</span> <span class=\"fn\">j</span> <span class=\"fn\">A‚ÇÄ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">‚ä§</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.lean#L176-L189","name":"CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.pushouts_ofLE_le_largerSubobject","line":176,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.pushouts_ofLE_le_largerSubobject","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.pushouts_ofLE_le_largerSubobject\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsGrothendieckAbelian</span>.<span class=\"name\">generatingMonomorphisms</span>.<span class=\"name\">pushouts_ofLE_le_largerSubobject</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hG</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Generator/Basic.html#CategoryTheory.IsSeparator\">IsSeparator</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject\">Subobject</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms\">generatingMonomorphisms</a> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Limits.html#CategoryTheory.MorphismProperty.pushouts\">pushouts</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject.ofLE\">ofLE</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.largerSubobject\">largerSubobject</a> <span class=\"fn\">hG</span> <span class=\"fn\">A</span>)</span> <span class=\"fn\">‚ãØ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.lean#L169-L174","name":"CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.le_largerSubobject","line":169,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.le_largerSubobject","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.le_largerSubobject\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsGrothendieckAbelian</span>.<span class=\"name\">generatingMonomorphisms</span>.<span class=\"name\">le_largerSubobject</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hG</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Generator/Basic.html#CategoryTheory.IsSeparator\">IsSeparator</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject\">Subobject</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.largerSubobject\">largerSubobject</a> <span class=\"fn\">hG</span> <span class=\"fn\">A</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.lean#L163-L167","name":"CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.lt_largerSubobject","line":163,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.lt_largerSubobject","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.lt_largerSubobject\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsGrothendieckAbelian</span>.<span class=\"name\">generatingMonomorphisms</span>.<span class=\"name\">lt_largerSubobject</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hG</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Generator/Basic.html#CategoryTheory.IsSeparator\">IsSeparator</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject\">Subobject</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hA</span> : <span class=\"fn\">A</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">‚ä§</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.largerSubobject\">largerSubobject</a> <span class=\"fn\">hG</span> <span class=\"fn\">A</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.lean#L160-L161","name":"CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.largerSubobject_top","line":160,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.largerSubobject_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.largerSubobject_top\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsGrothendieckAbelian</span>.<span class=\"name\">generatingMonomorphisms</span>.<span class=\"name\">largerSubobject_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hG</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Generator/Basic.html#CategoryTheory.IsSeparator\">IsSeparator</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.largerSubobject\">largerSubobject</a> <span class=\"fn\">hG</span> <a href=\"./Mathlib/Order/Notation.html#Top.top\">‚ä§</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">‚ä§</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.lean#L150-L157","name":"CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.largerSubobject","line":150,"kind":"def","docLink":"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.largerSubobject","doc":"Assuming `G : C` is a generator, `X : C`, and `A : Subobject X`,\nthis is a subobject of `X` which is `‚ä§` if `A = ‚ä§`, and otherwise\nit is a larger subobject given by the lemma `exists_larger_subobject`.\nThe inclusion of `A` in `largerSubobject hG A` is a pushout of\na monomorphism in the family `generatingMonomorphisms G`\n(see `pushouts_ofLE_le_largerSubobject`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.largerSubobject\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsGrothendieckAbelian</span>.<span class=\"name\">generatingMonomorphisms</span>.<span class=\"name\">largerSubobject</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hG</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Generator/Basic.html#CategoryTheory.IsSeparator\">IsSeparator</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject\">Subobject</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject\">Subobject</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.lean#L134-L145","name":"CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.exists_larger_subobject","line":134,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.exists_larger_subobject","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.exists_larger_subobject\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsGrothendieckAbelian</span>.<span class=\"name\">generatingMonomorphisms</span>.<span class=\"name\">exists_larger_subobject</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hG</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Generator/Basic.html#CategoryTheory.IsSeparator\">IsSeparator</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject\">Subobject</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hA</span> : <span class=\"fn\">A</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">‚ä§</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">‚àÉ (<span class=\"fn\">A'</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject\">Subobject</a> <span class=\"fn\">X</span></span>) (<span class=\"fn\">h</span> : <span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">A'</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms\">generatingMonomorphisms</a> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Limits.html#CategoryTheory.MorphismProperty.pushouts\">pushouts</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject.ofLE\">ofLE</a></span> <span class=\"fn\">A'</span> <span class=\"fn\">‚ãØ</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.lean#L105-L132","name":"CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.exists_pushouts","line":105,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.exists_pushouts","doc":"If `p : X ‚ü∂ Y` is a monomorphism that is not an isomorphism, there exists\na subobject `X'` of `Y` containing `X` (but different from `X`) such that\nthe inclusion `X ‚ü∂ X'` is a pushout of a monomorphism in the family\n`generatingMonomorphisms G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms.exists_pushouts\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsGrothendieckAbelian</span>.<span class=\"name\">generatingMonomorphisms</span>.<span class=\"name\">exists_pushouts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hG</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Generator/Basic.html#CategoryTheory.IsSeparator\">IsSeparator</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">Mono</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <a href=\"./Init/Prelude.html#Not\">¬¨</a><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">IsIso</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">‚àÉ (<span class=\"fn\">X'</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">i</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">X'</span>) (<span class=\"fn\">p'</span> : <span class=\"fn\">X'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span>) (_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms\">generatingMonomorphisms</a> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Limits.html#CategoryTheory.MorphismProperty.pushouts\">pushouts</a></span> <span class=\"fn\">i</span></span>) (_ : <a href=\"./Init/Prelude.html#Not\">¬¨</a><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">IsIso</a> <span class=\"fn\">i</span></span>) (_ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">Mono</a> <span class=\"fn\">p'</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">i</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.lean#L92-L95","name":"CategoryTheory.IsGrothendieckAbelian.isomorphisms_le_pushouts_generatingMonomorphisms","line":92,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.isomorphisms_le_pushouts_generatingMonomorphisms","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.isomorphisms_le_pushouts_generatingMonomorphisms\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsGrothendieckAbelian</span>.<span class=\"name\">isomorphisms_le_pushouts_generatingMonomorphisms</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\">C</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty.isomorphisms\">MorphismProperty.isomorphisms</a> <span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms\">generatingMonomorphisms</a> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Limits.html#CategoryTheory.MorphismProperty.pushouts\">pushouts</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.lean#L85-L88","name":"CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms_le_monomorphisms","line":85,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms_le_monomorphisms","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms_le_monomorphisms\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsGrothendieckAbelian</span>.<span class=\"name\">generatingMonomorphisms_le_monomorphisms</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms\">generatingMonomorphisms</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty.monomorphisms\">MorphismProperty.monomorphisms</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.lean#L80-L83","name":"CategoryTheory.IsGrothendieckAbelian.instIsSmallGeneratingMonomorphismsOfSmallSubobject","line":80,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.instIsSmallGeneratingMonomorphismsOfSmallSubobject","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.instIsSmallGeneratingMonomorphismsOfSmallSubobject\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsGrothendieckAbelian</span>.<span class=\"name\">instIsSmallGeneratingMonomorphismsOfSmallSubobject</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\">C</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{w, max u v}</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject\">Subobject</a> <span class=\"fn\">G</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/MorphismProperty/IsSmall.html#CategoryTheory.MorphismProperty.IsSmall\">MorphismProperty.IsSmall.{w, v, u}</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms\">generatingMonomorphisms</a> <span class=\"fn\">G</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.lean#L72-L78","name":"CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms","line":72,"kind":"def","docLink":"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms","doc":"Given an object `G : C`, this is the family of morphisms in `C`\ngiven by the inclusions of all subobjects of `G`. If `G` is a separator,\nand `C` is a Grothendieck abelian category, then any monomorphism in `C`\nis a transfinite composition of pushouts of monomorphisms in this family\n(see `generatingMonomorphisms.exists_transfiniteCompositionOfShape`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/GrothendieckCategory/EnoughInjectives.html#CategoryTheory.IsGrothendieckAbelian.generatingMonomorphisms\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsGrothendieckAbelian</span>.<span class=\"name\">generatingMonomorphisms</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty\">MorphismProperty</a> <span class=\"fn\">C</span></span></div></div>"}]}