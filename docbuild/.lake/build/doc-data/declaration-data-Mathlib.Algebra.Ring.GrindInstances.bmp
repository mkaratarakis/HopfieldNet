{"name":"Mathlib.Algebra.Ring.GrindInstances","instances":[{"typeNames":[],"name":"CommRing.toGrindCommRing","className":"Lean.Grind.CommRing"}],"imports":["Init","Mathlib.Algebra.Ring.Defs","Mathlib.Data.Int.Cast.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Algebra/Ring/GrindInstances.lean#L48-L53","name":"CommRing.toGrindCommRing_ofNat","line":48,"kind":"theorem","docLink":"./Mathlib/Algebra/Ring/GrindInstances.html#CommRing.toGrindCommRing_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Ring/GrindInstances.html#CommRing.toGrindCommRing_ofNat\"><span class=\"name\">CommRing</span>.<span class=\"name\">toGrindCommRing_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Algebra/Ring/GrindInstances.lean#L17-L46","name":"CommRing.toGrindCommRing","line":17,"kind":"instance","docLink":"./Mathlib/Algebra/Ring/GrindInstances.html#CommRing.toGrindCommRing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Ring/GrindInstances.html#CommRing.toGrindCommRing\"><span class=\"name\">CommRing</span>.<span class=\"name\">toGrindCommRing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/CommRing/Basic.html#Lean.Grind.CommRing\">Lean.Grind.CommRing</a> <span class=\"fn\">α</span></span></div></div>"}]}