{"name":"Mathlib.Algebra.Category.Grp.ForgetCorepresentable","instances":[{"typeNames":["CategoryTheory.forget"],"name":"Grp.forget_isCorepresentable","className":"CategoryTheory.Functor.IsCorepresentable"},{"typeNames":["CategoryTheory.forget"],"name":"CommGrp.forget_isCorepresentable","className":"CategoryTheory.Functor.IsCorepresentable"},{"typeNames":["CategoryTheory.forget"],"name":"AddGrp.forget_isCorepresentable","className":"CategoryTheory.Functor.IsCorepresentable"},{"typeNames":["CategoryTheory.forget"],"name":"AddCommGrp.forget_isCorepresentable","className":"CategoryTheory.Functor.IsCorepresentable"}],"imports":["Init","Mathlib.Algebra.Category.Grp.Basic","Mathlib.CategoryTheory.Yoneda"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Algebra/Category/Grp/ForgetCorepresentable.lean#L102-L104","name":"AddCommGrp.forget_isCorepresentable","line":102,"kind":"instance","docLink":"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#AddCommGrp.forget_isCorepresentable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#AddCommGrp.forget_isCorepresentable\"><span class=\"name\">AddCommGrp</span>.<span class=\"name\">forget_isCorepresentable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a>)</span>.<a href=\"./Mathlib/CategoryTheory/Yoneda.html#CategoryTheory.Functor.IsCorepresentable\">IsCorepresentable</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Algebra/Category/Grp/ForgetCorepresentable.lean#L98-L100","name":"AddGrp.forget_isCorepresentable","line":98,"kind":"instance","docLink":"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#AddGrp.forget_isCorepresentable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#AddGrp.forget_isCorepresentable\"><span class=\"name\">AddGrp</span>.<span class=\"name\">forget_isCorepresentable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddGrp\">AddGrp</a>)</span>.<a href=\"./Mathlib/CategoryTheory/Yoneda.html#CategoryTheory.Functor.IsCorepresentable\">IsCorepresentable</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Algebra/Category/Grp/ForgetCorepresentable.lean#L94-L96","name":"CommGrp.forget_isCorepresentable","line":94,"kind":"instance","docLink":"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#CommGrp.forget_isCorepresentable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#CommGrp.forget_isCorepresentable\"><span class=\"name\">CommGrp</span>.<span class=\"name\">forget_isCorepresentable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#CommGrp\">CommGrp</a>)</span>.<a href=\"./Mathlib/CategoryTheory/Yoneda.html#CategoryTheory.Functor.IsCorepresentable\">IsCorepresentable</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Algebra/Category/Grp/ForgetCorepresentable.lean#L90-L92","name":"Grp.forget_isCorepresentable","line":90,"kind":"instance","docLink":"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#Grp.forget_isCorepresentable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#Grp.forget_isCorepresentable\"><span class=\"name\">Grp</span>.<span class=\"name\">forget_isCorepresentable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#Grp\">Grp</a>)</span>.<a href=\"./Mathlib/CategoryTheory/Yoneda.html#CategoryTheory.Functor.IsCorepresentable\">IsCorepresentable</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Algebra/Category/Grp/ForgetCorepresentable.lean#L84-L88","name":"AddCommGrp.coyonedaObjIsoForget","line":84,"kind":"def","docLink":"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#AddCommGrp.coyonedaObjIsoForget","doc":"The forget functor `AddCommGrp.{u} ⥤ Type u` is corepresentable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#AddCommGrp.coyonedaObjIsoForget\"><span class=\"name\">AddCommGrp</span>.<span class=\"name\">coyonedaObjIsoForget</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Yoneda.html#CategoryTheory.coyoneda\">CategoryTheory.coyoneda</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp.of\">of</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift.{u, 0}</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span>)</span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddCommGrp\">AddCommGrp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Algebra/Category/Grp/ForgetCorepresentable.lean#L78-L82","name":"AddGrp.coyonedaObjIsoForget","line":78,"kind":"def","docLink":"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#AddGrp.coyonedaObjIsoForget","doc":"The forget functor `AddGrp.{u} ⥤ Type u` is corepresentable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#AddGrp.coyonedaObjIsoForget\"><span class=\"name\">AddGrp</span>.<span class=\"name\">coyonedaObjIsoForget</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Yoneda.html#CategoryTheory.coyoneda\">CategoryTheory.coyoneda</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddGrp.of\">of</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift.{u, 0}</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span>)</span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#AddGrp\">AddGrp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Algebra/Category/Grp/ForgetCorepresentable.lean#L72-L76","name":"CommGrp.coyonedaObjIsoForget","line":72,"kind":"def","docLink":"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#CommGrp.coyonedaObjIsoForget","doc":"The forget functor `CommGrp.{u} ⥤ Type u` is corepresentable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#CommGrp.coyonedaObjIsoForget\"><span class=\"name\">CommGrp</span>.<span class=\"name\">coyonedaObjIsoForget</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Yoneda.html#CategoryTheory.coyoneda\">CategoryTheory.coyoneda</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#CommGrp.of\">of</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift.{u, 0}</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/TypeTags/Basic.html#Multiplicative\">Multiplicative</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span>)</span>)</span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#CommGrp\">CommGrp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Algebra/Category/Grp/ForgetCorepresentable.lean#L66-L70","name":"Grp.coyonedaObjIsoForget","line":66,"kind":"def","docLink":"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#Grp.coyonedaObjIsoForget","doc":"The forget functor `Grp.{u} ⥤ Type u` is corepresentable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#Grp.coyonedaObjIsoForget\"><span class=\"name\">Grp</span>.<span class=\"name\">coyonedaObjIsoForget</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Yoneda.html#CategoryTheory.coyoneda\">CategoryTheory.coyoneda</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#Grp.of\">of</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift.{u, 0}</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/TypeTags/Basic.html#Multiplicative\">Multiplicative</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span>)</span>)</span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Algebra/Category/Grp/Basic.html#Grp\">Grp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Algebra/Category/Grp/ForgetCorepresentable.lean#L59-L62","name":"AddMonoidHom.fromULiftIntEquiv","line":59,"kind":"def","docLink":"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#AddMonoidHom.fromULiftIntEquiv","doc":"The equivalence `(ULift ℤ →+ α) ≃ α` for any additive group `α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#AddMonoidHom.fromULiftIntEquiv\"><span class=\"name\">AddMonoidHom</span>.<span class=\"name\">fromULiftIntEquiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift.{u, 0}</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">α</span>) <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Algebra/Category/Grp/ForgetCorepresentable.lean#L55-L57","name":"AddMonoidHom.fromIntEquiv","line":55,"kind":"def","docLink":"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#AddMonoidHom.fromIntEquiv","doc":"The equivalence `(ℤ →+ α) ≃ α` for any additive group `α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#AddMonoidHom.fromIntEquiv\"><span class=\"name\">AddMonoidHom</span>.<span class=\"name\">fromIntEquiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">α</span>) <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Algebra/Category/Grp/ForgetCorepresentable.lean#L45-L49","name":"MonoidHom.fromULiftMultiplicativeIntEquiv","line":45,"kind":"def","docLink":"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#MonoidHom.fromULiftMultiplicativeIntEquiv","doc":"The equivalence `(ULift (Multiplicative ℤ) →* α) ≃ α` for any group `α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#MonoidHom.fromULiftMultiplicativeIntEquiv\"><span class=\"name\">MonoidHom</span>.<span class=\"name\">fromULiftMultiplicativeIntEquiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift.{u, 0}</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/TypeTags/Basic.html#Multiplicative\">Multiplicative</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">α</span>) <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Algebra/Category/Grp/ForgetCorepresentable.lean#L40-L43","name":"MonoidHom.fromMultiplicativeIntEquiv","line":40,"kind":"def","docLink":"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#MonoidHom.fromMultiplicativeIntEquiv","doc":"The equivalence `(Multiplicative ℤ →* α) ≃ α` for any group `α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#MonoidHom.fromMultiplicativeIntEquiv\"><span class=\"name\">MonoidHom</span>.<span class=\"name\">fromMultiplicativeIntEquiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags/Basic.html#Multiplicative\">Multiplicative</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">α</span>) <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Algebra/Category/Grp/ForgetCorepresentable.lean#L34-L34","name":"uliftZPowersHom_apply_apply","line":34,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#uliftZPowersHom_apply_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#uliftZPowersHom_apply_apply\"><span class=\"name\">uliftZPowersHom_apply_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝¹</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift.{u, 0}</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/TypeTags/Basic.html#Multiplicative\">Multiplicative</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#uliftZPowersHom\">uliftZPowersHom</a> <span class=\"fn\">G</span>)</span> <span class=\"fn\">a✝</span>)</span> <span class=\"fn\">a✝¹</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a✝</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags/Basic.html#Multiplicative.toAdd\">Multiplicative.toAdd</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/ULift.html#MulEquiv.ulift\">MulEquiv.ulift</a> <span class=\"fn\">a✝¹</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Algebra/Category/Grp/ForgetCorepresentable.lean#L34-L34","name":"uliftZMultiplesHom_symm_apply","line":34,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#uliftZMultiplesHom_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#uliftZMultiplesHom_symm_apply\"><span class=\"name\">uliftZMultiplesHom_symm_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift.{u, 0}</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#uliftZMultiplesHom\">uliftZMultiplesHom</a> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a✝</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ULift.html#AddEquiv.ulift\">AddEquiv.ulift</a>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv.symm\">symm</a></span> <span class=\"fn\">1</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Algebra/Category/Grp/ForgetCorepresentable.lean#L34-L34","name":"uliftZMultiplesHom_apply_apply","line":34,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#uliftZMultiplesHom_apply_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#uliftZMultiplesHom_apply_apply\"><span class=\"name\">uliftZMultiplesHom_apply_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝¹</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift.{u, 0}</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#uliftZMultiplesHom\">uliftZMultiplesHom</a> <span class=\"fn\">G</span>)</span> <span class=\"fn\">a✝</span>)</span> <span class=\"fn\">a✝¹</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ULift.html#AddEquiv.ulift\">AddEquiv.ulift</a> <span class=\"fn\">a✝¹</span></span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">a✝</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Algebra/Category/Grp/ForgetCorepresentable.lean#L34-L34","name":"uliftZPowersHom_symm_apply","line":34,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#uliftZPowersHom_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#uliftZPowersHom_symm_apply\"><span class=\"name\">uliftZPowersHom_symm_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift.{u, 0}</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/TypeTags/Basic.html#Multiplicative\">Multiplicative</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#uliftZPowersHom\">uliftZPowersHom</a> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a✝</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/ULift.html#MulEquiv.ulift\">MulEquiv.ulift</a>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv.symm\">symm</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/TypeTags/Basic.html#Multiplicative.ofAdd\">Multiplicative.ofAdd</a> <span class=\"fn\">1</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Algebra/Category/Grp/ForgetCorepresentable.lean#L33-L36","name":"uliftZPowersHom","line":33,"kind":"def","docLink":"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#uliftZPowersHom","doc":"The equivalence `(ULift (Multiplicative ℤ) →* G) ≃ G` for any group `G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#uliftZPowersHom\"><span class=\"name\">uliftZPowersHom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift.{u, 0}</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/TypeTags/Basic.html#Multiplicative\">Multiplicative</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">G</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Algebra/Category/Grp/ForgetCorepresentable.lean#L29-L31","name":"uliftZMultiplesHom","line":29,"kind":"def","docLink":"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#uliftZMultiplesHom","doc":"The equivalence `(ULift ℤ →+ G) ≃ G` for any additive group `G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/Grp/ForgetCorepresentable.html#uliftZMultiplesHom\"><span class=\"name\">uliftZMultiplesHom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift.{u, 0}</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">G</span>)</div></div>"}]}