{"name":"Mathlib.Analysis.Meromorphic.FactorizedRational","instances":[],"imports":["Init","Mathlib.Analysis.Meromorphic.Divisor","Mathlib.Analysis.Meromorphic.NormalForm","Mathlib.Analysis.SpecialFunctions.Log.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Analysis/Meromorphic/FactorizedRational.lean#L236-L283","name":"MeromorphicOn.extract_zeros_poles_log","line":236,"kind":"theorem","docLink":"./Mathlib/Analysis/Meromorphic/FactorizedRational.html#MeromorphicOn.extract_zeros_poles_log","doc":"In the setting of `MeromorphicOn.extract_zeros_poles`, the function `log ‖f‖` is equivalent, modulo\nequality on codiscrete subsets, to `∑ᶠ u, (divisor f U u * log ‖· - u‖) + log ‖g ·‖`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Meromorphic/FactorizedRational.html#MeromorphicOn.extract_zeros_poles_log\"><span class=\"name\">MeromorphicOn</span>.<span class=\"name\">extract_zeros_poles_log</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝕜</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Field/Basic.html#NontriviallyNormedField\">NontriviallyNormedField</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <span class=\"fn\">𝕜</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">𝕜</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">𝕜</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">D</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/LocallyFinsupp.html#Function.locallyFinsuppWithin\">Function.locallyFinsuppWithin</a> <span class=\"fn\">U</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">∀ (<span class=\"fn\">u</span> : <span class=\"fn\">↑<span class=\"fn\">U</span></span>), <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">↑<span class=\"fn\">u</span></span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">f</span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/Topology/DiscreteSubset.html#Filter.codiscreteWithin\">Filter.codiscreteWithin</a> <span class=\"fn\">U</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/BigOperators/Finprod.html#finprod\">∏ᶠ</a> (<span class=\"fn\">u</span> : <span class=\"fn\">𝕜</span>)<a href=\"./Mathlib/Algebra/BigOperators/Finprod.html#finprod\">,</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">𝕜</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">u</span>)</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">D</span> <span class=\"fn\">u</span></span>)</span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">𝕜</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Analysis/SpecialFunctions/Log/Basic.html#Real.log\">Real.log</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span>)</span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/Topology/DiscreteSubset.html#Filter.codiscreteWithin\">Filter.codiscreteWithin</a> <span class=\"fn\">U</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">]</a>   <span class=\"fn\">(<a href=\"./Mathlib/Algebra/BigOperators/Finprod.html#finsum\">∑ᶠ</a> (<span class=\"fn\">u</span> : <span class=\"fn\">𝕜</span>)<a href=\"./Mathlib/Algebra/BigOperators/Finprod.html#finsum\">,</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">𝕜</span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\">D</span> <span class=\"fn\">u</span>)</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/SpecialFunctions/Log/Basic.html#Real.log\">Real.log</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">u</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span></span>)</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">𝕜</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Analysis/SpecialFunctions/Log/Basic.html#Real.log\">Real.log</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Analysis/Meromorphic/FactorizedRational.lean#L193-L234","name":"MeromorphicOn.extract_zeros_poles","line":193,"kind":"theorem","docLink":"./Mathlib/Analysis/Meromorphic/FactorizedRational.html#MeromorphicOn.extract_zeros_poles","doc":"If `f` is meromorphic on an open set `U`, if `f` is nowhere locally constant zero, and if the\nsupport of the divisor of `f` is finite, then there exists an analytic function `g` on `U` without\nzeros such that `f` is equivalent, modulo equality on codiscrete sets, to the product of `g` and the\nfactorized rational function associated with the divisor of `f`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Meromorphic/FactorizedRational.html#MeromorphicOn.extract_zeros_poles\"><span class=\"name\">MeromorphicOn</span>.<span class=\"name\">extract_zeros_poles</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝕜</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Field/Basic.html#NontriviallyNormedField\">NontriviallyNormedField</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <span class=\"fn\">𝕜</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">𝕜</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">𝕜</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁f</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Meromorphic/Basic.html#MeromorphicOn\">MeromorphicOn</a> <span class=\"fn\">f</span> <span class=\"fn\">U</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂f</span> : <span class=\"fn\">∀ (<span class=\"fn\">u</span> : <span class=\"fn\">↑<span class=\"fn\">U</span></span>), <span class=\"fn\"><span class=\"fn\">⋯</span>.<a href=\"./Mathlib/Analysis/Meromorphic/Order.html#MeromorphicAt.order\">order</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₃f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Analysis/Meromorphic/Divisor.html#MeromorphicOn.divisor\">divisor</a> <span class=\"fn\">f</span> <span class=\"fn\">U</span>)</span>.<a href=\"./Mathlib/Data/LocallyFinsupp.html#Function.locallyFinsuppWithin.support\">support</a></span>.<a href=\"./Mathlib/Data/Finite/Defs.html#Set.Finite\">Finite</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">𝕜</span> → <span class=\"fn\">E</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/Analysis/Analytic/Basic.html#AnalyticOnNhd\">AnalyticOnNhd</a> <span class=\"fn\">𝕜</span> <span class=\"fn\">g</span> <span class=\"fn\">U</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\">(∀ (<span class=\"fn\">u</span> : <span class=\"fn\">↑<span class=\"fn\">U</span></span>), <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">↑<span class=\"fn\">u</span></span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">f</span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/Topology/DiscreteSubset.html#Filter.codiscreteWithin\">Filter.codiscreteWithin</a> <span class=\"fn\">U</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/BigOperators/Finprod.html#finprod\">∏ᶠ</a> (<span class=\"fn\">u</span> : <span class=\"fn\">𝕜</span>)<a href=\"./Mathlib/Algebra/BigOperators/Finprod.html#finprod\">,</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">𝕜</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">u</span>)</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Analysis/Meromorphic/Divisor.html#MeromorphicOn.divisor\">divisor</a> <span class=\"fn\">f</span> <span class=\"fn\">U</span>)</span> <span class=\"fn\">u</span></span>)</span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Analysis/Meromorphic/FactorizedRational.lean#L168-L175","name":"Function.FactorizedRational.divisor","line":168,"kind":"theorem","docLink":"./Mathlib/Analysis/Meromorphic/FactorizedRational.html#Function.FactorizedRational.divisor","doc":"If `D` is a divisor, then the divisor of the factorized rational function equals `D`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Meromorphic/FactorizedRational.html#Function.FactorizedRational.divisor\"><span class=\"name\">Function</span>.<span class=\"name\">FactorizedRational</span>.<span class=\"name\">divisor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝕜</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Field/Basic.html#NontriviallyNormedField\">NontriviallyNormedField</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">𝕜</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">D</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/LocallyFinsupp.html#Function.locallyFinsuppWithin\">locallyFinsuppWithin</a> <span class=\"fn\">U</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hD</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">D</span>.<a href=\"./Mathlib/Data/LocallyFinsupp.html#Function.locallyFinsuppWithin.support\">support</a></span>.<a href=\"./Mathlib/Data/Finite/Defs.html#Set.Finite\">Finite</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Meromorphic/Divisor.html#MeromorphicOn.divisor\">MeromorphicOn.divisor</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/BigOperators/Finprod.html#finprod\">∏ᶠ</a> (<span class=\"fn\">u</span> : <span class=\"fn\">𝕜</span>)<a href=\"./Mathlib/Algebra/BigOperators/Finprod.html#finprod\">,</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">𝕜</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">u</span>)</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">D</span> <span class=\"fn\">u</span></span>)</span> <span class=\"fn\">U</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">D</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Analysis/Meromorphic/FactorizedRational.lean#L156-L166","name":"Function.FactorizedRational.order_ne_top","line":156,"kind":"theorem","docLink":"./Mathlib/Analysis/Meromorphic/FactorizedRational.html#Function.FactorizedRational.order_ne_top","doc":"Factorized rational functions are nowhere locally constant zero.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Meromorphic/FactorizedRational.html#Function.FactorizedRational.order_ne_top\"><span class=\"name\">Function</span>.<span class=\"name\">FactorizedRational</span>.<span class=\"name\">order_ne_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝕜</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Field/Basic.html#NontriviallyNormedField\">NontriviallyNormedField</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">z</span> : <span class=\"fn\">𝕜</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><span class=\"fn\">𝕜</span> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⋯</span>.<a href=\"./Mathlib/Analysis/Meromorphic/Order.html#MeromorphicAt.order\">order</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Analysis/Meromorphic/FactorizedRational.lean#L143-L154","name":"Function.FactorizedRational.order","line":143,"kind":"theorem","docLink":"./Mathlib/Analysis/Meromorphic/FactorizedRational.html#Function.FactorizedRational.order","doc":"The order of the factorized rational function `(∏ᶠ u, fun z ↦ (z - u) ^ d u)` at `z` equals `d z`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Meromorphic/FactorizedRational.html#Function.FactorizedRational.order\"><span class=\"name\">Function</span>.<span class=\"name\">FactorizedRational</span>.<span class=\"name\">order</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝕜</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Field/Basic.html#NontriviallyNormedField\">NontriviallyNormedField</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">z</span> : <span class=\"fn\">𝕜</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><span class=\"fn\">𝕜</span> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁d</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Support.html#Function.support\">support</a> <span class=\"fn\">d</span>)</span>.<a href=\"./Mathlib/Data/Finite/Defs.html#Set.Finite\">Finite</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⋯</span>.<a href=\"./Mathlib/Analysis/Meromorphic/Order.html#MeromorphicAt.order\">order</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\">d</span> <span class=\"fn\">z</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Analysis/Meromorphic/FactorizedRational.lean#L133-L137","name":"Function.FactorizedRational.meromorphicNFOn","line":133,"kind":"theorem","docLink":"./Mathlib/Analysis/Meromorphic/FactorizedRational.html#Function.FactorizedRational.meromorphicNFOn","doc":"Factorized rational functions are meromorphic in normal form on arbitrary subsets of `𝕜`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Meromorphic/FactorizedRational.html#Function.FactorizedRational.meromorphicNFOn\"><span class=\"name\">Function</span>.<span class=\"name\">FactorizedRational</span>.<span class=\"name\">meromorphicNFOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝕜</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Field/Basic.html#NontriviallyNormedField\">NontriviallyNormedField</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><span class=\"fn\">𝕜</span> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">U</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">𝕜</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Meromorphic/NormalForm.html#MeromorphicNFOn\">MeromorphicNFOn</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/BigOperators/Finprod.html#finprod\">∏ᶠ</a> (<span class=\"fn\">u</span> : <span class=\"fn\">𝕜</span>)<a href=\"./Mathlib/Algebra/BigOperators/Finprod.html#finprod\">,</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">𝕜</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">u</span>)</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">u</span></span>)</span> <span class=\"fn\">U</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Analysis/Meromorphic/FactorizedRational.lean#L117-L131","name":"Function.FactorizedRational.meromorphicNFOn_univ","line":117,"kind":"theorem","docLink":"./Mathlib/Analysis/Meromorphic/FactorizedRational.html#Function.FactorizedRational.meromorphicNFOn_univ","doc":"Factorized rational functions are meromorphic in normal form on `univ`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Meromorphic/FactorizedRational.html#Function.FactorizedRational.meromorphicNFOn_univ\"><span class=\"name\">Function</span>.<span class=\"name\">FactorizedRational</span>.<span class=\"name\">meromorphicNFOn_univ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝕜</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Field/Basic.html#NontriviallyNormedField\">NontriviallyNormedField</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><span class=\"fn\">𝕜</span> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Meromorphic/NormalForm.html#MeromorphicNFOn\">MeromorphicNFOn</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/BigOperators/Finprod.html#finprod\">∏ᶠ</a> (<span class=\"fn\">u</span> : <span class=\"fn\">𝕜</span>)<a href=\"./Mathlib/Algebra/BigOperators/Finprod.html#finprod\">,</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">𝕜</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">u</span>)</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">u</span></span>)</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Analysis/Meromorphic/FactorizedRational.lean#L98-L115","name":"Function.FactorizedRational.extractFactor","line":98,"kind":"theorem","docLink":"./Mathlib/Analysis/Meromorphic/FactorizedRational.html#Function.FactorizedRational.extractFactor","doc":"Helper Lemma for Computations: Extract one factor out of a factorized rational function.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Meromorphic/FactorizedRational.html#Function.FactorizedRational.extractFactor\"><span class=\"name\">Function</span>.<span class=\"name\">FactorizedRational</span>.<span class=\"name\">extractFactor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝕜</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Field/Basic.html#NontriviallyNormedField\">NontriviallyNormedField</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">d</span> : <span class=\"fn\"><span class=\"fn\">𝕜</span> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u₀</span> : <span class=\"fn\">𝕜</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hd</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Support.html#Function.support\">support</a> <span class=\"fn\">d</span>)</span>.<a href=\"./Mathlib/Data/Finite/Defs.html#Set.Finite\">Finite</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Finprod.html#finprod\">∏ᶠ</a> (<span class=\"fn\">u</span> : <span class=\"fn\">𝕜</span>)<a href=\"./Mathlib/Algebra/BigOperators/Finprod.html#finprod\">,</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">𝕜</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">u</span>)</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">u</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">𝕜</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">u₀</span>)</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">u₀</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Finprod.html#finprod\">∏ᶠ</a> (<span class=\"fn\">u</span> : <span class=\"fn\">𝕜</span>)<a href=\"./Mathlib/Algebra/BigOperators/Finprod.html#finprod\">,</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">𝕜</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">u</span>)</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">update</a> <span class=\"fn\">d</span> <span class=\"fn\">u₀</span> <span class=\"fn\">0</span> <span class=\"fn\">u</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Analysis/Meromorphic/FactorizedRational.lean#L85-L95","name":"Function.FactorizedRational.ne_zero","line":85,"kind":"theorem","docLink":"./Mathlib/Analysis/Meromorphic/FactorizedRational.html#Function.FactorizedRational.ne_zero","doc":"Factorized rational functions are non-zero wherever the exponent is zero.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Meromorphic/FactorizedRational.html#Function.FactorizedRational.ne_zero\"><span class=\"name\">Function</span>.<span class=\"name\">FactorizedRational</span>.<span class=\"name\">ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝕜</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Field/Basic.html#NontriviallyNormedField\">NontriviallyNormedField</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">d</span> : <span class=\"fn\"><span class=\"fn\">𝕜</span> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">𝕜</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/BigOperators/Finprod.html#finprod\">∏ᶠ</a> (<span class=\"fn\">u</span> : <span class=\"fn\">𝕜</span>)<a href=\"./Mathlib/Algebra/BigOperators/Finprod.html#finprod\">,</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">𝕜</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">u</span>)</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">u</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Analysis/Meromorphic/FactorizedRational.lean#L72-L83","name":"Function.FactorizedRational.analyticAt","line":72,"kind":"theorem","docLink":"./Mathlib/Analysis/Meromorphic/FactorizedRational.html#Function.FactorizedRational.analyticAt","doc":"Factorized rational functions are analytic wherever the exponent is non-negative.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Meromorphic/FactorizedRational.html#Function.FactorizedRational.analyticAt\"><span class=\"name\">Function</span>.<span class=\"name\">FactorizedRational</span>.<span class=\"name\">analyticAt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝕜</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Field/Basic.html#NontriviallyNormedField\">NontriviallyNormedField</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">d</span> : <span class=\"fn\"><span class=\"fn\">𝕜</span> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">𝕜</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Analytic/Basic.html#AnalyticAt\">AnalyticAt</a> <span class=\"fn\">𝕜</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/BigOperators/Finprod.html#finprod\">∏ᶠ</a> (<span class=\"fn\">u</span> : <span class=\"fn\">𝕜</span>)<a href=\"./Mathlib/Algebra/BigOperators/Finprod.html#finprod\">,</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">𝕜</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">u</span>)</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">u</span></span>)</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Analysis/Meromorphic/FactorizedRational.lean#L57-L70","name":"Function.FactorizedRational.finprod_eq_fun","line":57,"kind":"theorem","docLink":"./Mathlib/Analysis/Meromorphic/FactorizedRational.html#Function.FactorizedRational.finprod_eq_fun","doc":"Helper Lemma: If the support of `d` is finite, then evaluation of functions commutes with finprod,\nand the function `∏ᶠ u, (· - u) ^ d u` equals `fun x ↦ ∏ᶠ u, (x - u) ^ d u`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Meromorphic/FactorizedRational.html#Function.FactorizedRational.finprod_eq_fun\"><span class=\"name\">Function</span>.<span class=\"name\">FactorizedRational</span>.<span class=\"name\">finprod_eq_fun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝕜</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Field/Basic.html#NontriviallyNormedField\">NontriviallyNormedField</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">d</span> : <span class=\"fn\"><span class=\"fn\">𝕜</span> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Support.html#Function.support\">support</a> <span class=\"fn\">d</span>)</span>.<a href=\"./Mathlib/Data/Finite/Defs.html#Set.Finite\">Finite</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Finprod.html#finprod\">∏ᶠ</a> (<span class=\"fn\">u</span> : <span class=\"fn\">𝕜</span>)<a href=\"./Mathlib/Algebra/BigOperators/Finprod.html#finprod\">,</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">𝕜</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">u</span>)</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">u</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">𝕜</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Finprod.html#finprod\">∏ᶠ</a> (<span class=\"fn\">u</span> : <span class=\"fn\">𝕜</span>)<a href=\"./Mathlib/Algebra/BigOperators/Finprod.html#finprod\">,</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">u</span>) <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">u</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Analysis/Meromorphic/FactorizedRational.lean#L42-L55","name":"Function.FactorizedRational.mulSupport","line":42,"kind":"theorem","docLink":"./Mathlib/Analysis/Meromorphic/FactorizedRational.html#Function.FactorizedRational.mulSupport","doc":"Helper Lemma: Identify the support of `d` as the mulsupport of the product defining the factorized\nrational function.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Meromorphic/FactorizedRational.html#Function.FactorizedRational.mulSupport\"><span class=\"name\">Function</span>.<span class=\"name\">FactorizedRational</span>.<span class=\"name\">mulSupport</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝕜</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Field/Basic.html#NontriviallyNormedField\">NontriviallyNormedField</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><span class=\"fn\">𝕜</span> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Support.html#Function.mulSupport\">Function.mulSupport</a> <span class=\"fn\">fun (<span class=\"fn\">u</span> : <span class=\"fn\">𝕜</span>) =&gt; <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">𝕜</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">u</span>)</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">u</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Support.html#Function.support\">support</a> <span class=\"fn\">d</span></span></div></div>"}]}