{"name":"Mathlib.Topology.Category.Profinite.Nobeling.Span","instances":[{"typeNames":["Set.Elem"],"name":"Profinite.NobelingProof.instFintypeElemForallBoolπMemFinset","className":"Fintype"}],"imports":["Init","Mathlib.Data.Finset.Sort","Mathlib.Topology.Category.Profinite.CofilteredLimit","Mathlib.Topology.Category.Profinite.Nobeling.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/Span.lean#L233-L242","name":"Profinite.NobelingProof.GoodProducts.span","line":233,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.GoodProducts.span","doc":"The good products span all of `LocallyConstant C ℤ` if `C` is closed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.GoodProducts.span\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">span</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span/Defs.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.GoodProducts.eval\">eval</a> <span class=\"fn\">C</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/Span.lean#L223-L231","name":"Profinite.NobelingProof.fin_comap_jointlySurjective","line":223,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.fin_comap_jointlySurjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.fin_comap_jointlySurjective\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">fin_comap_jointlySurjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>) (<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>),\n  <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant.comap\">LocallyConstant.comap</a> <a href=\"./Mathlib/Topology/ContinuousMap/Defs.html#ContinuousMap.mk\">{</a> <span class=\"fn\">toFun</span> := <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.ProjRestrict\">ProjRestrict</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span>, <span class=\"fn\">continuous_toFun</span> := <span class=\"fn\">⋯</span> <a href=\"./Mathlib/Topology/ContinuousMap/Defs.html#ContinuousMap.mk\">}</a> <span class=\"fn\">g</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/Span.lean#L168-L219","name":"Profinite.NobelingProof.GoodProducts.spanFin","line":168,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.GoodProducts.spanFin","doc":"If `s` is a finite subset of `I`, then the good products span. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.GoodProducts.spanFin\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">spanFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span/Defs.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.GoodProducts.eval\">eval</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/Span.lean#L165-L166","name":"Profinite.NobelingProof.GoodProducts.finsupp_sum_mem_span_eval","line":165,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.GoodProducts.finsupp_sum_mem_span_eval","doc":"**Alias** of `Profinite.NobelingProof.GoodProducts.finsuppSum_mem_span_eval`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.GoodProducts.finsupp_sum_mem_span_eval\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">finsupp_sum_mem_span_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">I</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\"><a href=\"./Batteries/Data/List/Basic.html#List.Chain'\">List.Chain'</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">x2</span>)</span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">as</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">→₀</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp.support\">support</a></span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">m</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">as</span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Algebra/BigOperators/Finsupp/Basic.html#Finsupp.sum\">sum</a></span> <span class=\"fn\">fun (<span class=\"fn\">a_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span>) (<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>) =&gt;\n    <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.e\">e</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.Products.eval\">Products.eval</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">a_1</span></span></span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a>   <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span/Defs.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> (<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.Products.eval\">Products.eval</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">m</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">as</span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/Span.lean#L147-L163","name":"Profinite.NobelingProof.GoodProducts.finsuppSum_mem_span_eval","line":147,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.GoodProducts.finsuppSum_mem_span_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.GoodProducts.finsuppSum_mem_span_eval\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">finsuppSum_mem_span_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">I</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\"><a href=\"./Batteries/Data/List/Basic.html#List.Chain'\">List.Chain'</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">x2</span>)</span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">as</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">→₀</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp.support\">support</a></span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">m</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">as</span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Algebra/BigOperators/Finsupp/Basic.html#Finsupp.sum\">sum</a></span> <span class=\"fn\">fun (<span class=\"fn\">a_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span>) (<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>) =&gt;\n    <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.e\">e</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.Products.eval\">Products.eval</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">a_1</span></span></span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a>   <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span/Defs.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> (<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.Products.eval\">Products.eval</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">m</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">as</span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/Span.lean#L138-L145","name":"Profinite.NobelingProof.factors_prod_eq_basis","line":138,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.factors_prod_eq_basis","doc":"If `s` is finite, the product of the elements of the list `factors C s x`\nis the delta function at `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.factors_prod_eq_basis\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">factors_prod_eq_basis</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.factors\">factors</a> <span class=\"fn\">C</span> <span class=\"fn\">s</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/List/Defs.html#List.prod\">prod</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.spanFinBasis\">spanFinBasis</a> <span class=\"fn\">C</span> <span class=\"fn\">s</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/Span.lean#L123-L136","name":"Profinite.NobelingProof.factors_prod_eq_basis_of_ne","line":123,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.factors_prod_eq_basis_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.factors_prod_eq_basis_of_ne\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">factors_prod_eq_basis_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.factors\">factors</a> <span class=\"fn\">C</span> <span class=\"fn\">s</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/List/Defs.html#List.prod\">prod</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/Span.lean#L115-L121","name":"Profinite.NobelingProof.one_sub_e_mem_of_false","line":115,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.one_sub_e_mem_of_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.one_sub_e_mem_of_false\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">one_sub_e_mem_of_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">I</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">y</span></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">x</span></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.e\">e</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.factors\">factors</a> <span class=\"fn\">C</span> <span class=\"fn\">s</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/Span.lean#L108-L113","name":"Profinite.NobelingProof.e_mem_of_eq_true","line":108,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.e_mem_of_eq_true","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.e_mem_of_eq_true\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">e_mem_of_eq_true</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">I</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">x</span></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.e\">e</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.factors\">factors</a> <span class=\"fn\">C</span> <span class=\"fn\">s</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/Span.lean#L96-L106","name":"Profinite.NobelingProof.factors_prod_eq_basis_of_eq","line":96,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.factors_prod_eq_basis_of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.factors_prod_eq_basis_of_eq\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">factors_prod_eq_basis_of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.factors\">factors</a> <span class=\"fn\">C</span> <span class=\"fn\">s</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/List/Defs.html#List.prod\">prod</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/Span.lean#L92-L94","name":"Profinite.NobelingProof.list_prod_apply","line":92,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.list_prod_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.list_prod_apply\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">list_prod_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">↑<span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/List/Defs.html#List.prod\">prod</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/LocallyConstant/Algebra.html#LocallyConstant.evalMonoidHom\">LocallyConstant.evalMonoidHom</a> <span class=\"fn\">x</span>)</span>)</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/List/Defs.html#List.prod\">prod</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/Span.lean#L84-L90","name":"Profinite.NobelingProof.factors","line":84,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.factors","doc":"A certain explicit list of locally constant maps. The theorem `factors_prod_eq_basis` shows that the\nproduct of the elements in this list is the delta function `spanFinBasis C s x`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.factors\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">factors</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/Span.lean#L73-L82","name":"Profinite.NobelingProof.spanFinBasis.span","line":73,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.spanFinBasis.span","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.spanFinBasis.span\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">spanFinBasis</span>.<span class=\"name\">span</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span/Defs.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.spanFinBasis\">spanFinBasis</a> <span class=\"fn\">C</span> <span class=\"fn\">s</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/Span.lean#L64-L70","name":"Profinite.NobelingProof.spanFinBasis","line":64,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.spanFinBasis","doc":"The Kronecker delta as a locally constant map from `π C (· ∈ s)` to `ℤ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.spanFinBasis\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">spanFinBasis</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/Span.lean#L52-L61","name":"Profinite.NobelingProof.instFintypeElemForallBoolπMemFinset","line":52,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.instFintypeElemForallBoolπMemFinset","doc":"`π C (· ∈ s)` is finite for a finite set `s`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.instFintypeElemForallBoolπMemFinset\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">instFintypeElemForallBoolπMemFinset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/Span.lean#L45-L50","name":"Profinite.NobelingProof.eval_eq_πJ","line":45,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.eval_eq_πJ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.eval_eq_πJ\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">eval_eq_πJ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.Products.isGood\">Products.isGood</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.Products.eval\">Products.eval</a> <span class=\"fn\">C</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.πJ\">πJ</a> <span class=\"fn\">C</span> <span class=\"fn\">s</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.Products.eval\">Products.eval</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">l</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/Span.lean#L40-L43","name":"Profinite.NobelingProof.πJ","line":40,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.πJ","doc":"The `ℤ`-linear map induced by precomposition of the projection `C → π C (· ∈ s)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Span.html#Profinite.NobelingProof.πJ\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">πJ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Defs.html#LinearMap\">→ₗ[</a><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a><a href=\"./Mathlib/Algebra/Module/LinearMap/Defs.html#LinearMap\">]</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"}]}