{"name":"Mathlib.SetTheory.Game.Basic","instances":[{"typeNames":["SetTheory.Game"],"name":"SetTheory.Game.instNeg","className":"Neg"},{"typeNames":["SetTheory.Game"],"name":"SetTheory.Game.instZero","className":"Zero"},{"typeNames":["SetTheory.Game"],"name":"SetTheory.Game.instAdd","className":"Add"},{"typeNames":["SetTheory.Game"],"name":"SetTheory.Game.instAddCommGroupWithOneGame","className":"AddCommGroupWithOne"},{"typeNames":["SetTheory.Game"],"name":"SetTheory.Game.instInhabited","className":"Inhabited"},{"typeNames":["SetTheory.Game"],"name":"SetTheory.Game.instPartialOrderGame","className":"PartialOrder"},{"typeNames":["SetTheory.Game","SetTheory.Game.LF"],"name":"SetTheory.Game.instIsTrichotomousLF","className":"IsTrichotomous"},{"typeNames":["SetTheory.Game"],"name":"SetTheory.Game.addLeftMono","className":"CovariantClass"},{"typeNames":["SetTheory.Game"],"name":"SetTheory.Game.addRightMono","className":"CovariantClass"},{"typeNames":["SetTheory.Game"],"name":"SetTheory.Game.addLeftStrictMono","className":"CovariantClass"},{"typeNames":["SetTheory.Game"],"name":"SetTheory.Game.addRightStrictMono","className":"CovariantClass"},{"typeNames":["SetTheory.Game"],"name":"SetTheory.Game.isOrderedAddMonoid","className":"IsOrderedAddMonoid"},{"typeNames":["SetTheory.PGame"],"name":"SetTheory.PGame.instMul","className":"Mul"},{"typeNames":["SetTheory.PGame.LeftMoves"],"name":"SetTheory.PGame.isEmpty_leftMoves_mul","className":"IsEmpty"},{"typeNames":["SetTheory.PGame.RightMoves"],"name":"SetTheory.PGame.isEmpty_rightMoves_mul","className":"IsEmpty"},{"typeNames":["SetTheory.PGame.InvTy"],"name":"SetTheory.PGame.instIsEmptyInvTyTrue","className":"IsEmpty"},{"typeNames":["SetTheory.PGame.InvTy"],"name":"SetTheory.PGame.InvTy.instInhabited","className":"Inhabited"},{"typeNames":["SetTheory.PGame.InvTy"],"name":"SetTheory.PGame.uniqueInvTy","className":"Unique"},{"typeNames":["SetTheory.PGame"],"name":"SetTheory.PGame.instInv","className":"Inv"},{"typeNames":["SetTheory.PGame"],"name":"SetTheory.PGame.instDiv","className":"Div"}],"imports":["Init","Mathlib.Algebra.Order.Monoid.Defs","Mathlib.SetTheory.PGame.Algebra","Mathlib.Tactic.Abel"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L1019-L1020","name":"SetTheory.PGame.inv_one_equiv","line":1019,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv_one_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv_one_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">inv_one_equiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">1</span><a href=\"./Mathlib/Algebra/Notation/Defs.html#Inv.inv\">⁻¹</a> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L1014-L1017","name":"SetTheory.PGame.invOne","line":1014,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.invOne","doc":"`1⁻¹` has exactly the same moves as `1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.invOne\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">invOne</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">1</span><a href=\"./Mathlib/Algebra/Notation/Defs.html#Inv.inv\">⁻¹</a>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.Relabelling\">Relabelling</a></span> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L1009-L1012","name":"SetTheory.PGame.inv_one","line":1009,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv_one","doc":"`1⁻¹` has exactly the same moves as `1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv_one\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">inv_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">1</span><a href=\"./Mathlib/Algebra/Notation/Defs.html#Inv.inv\">⁻¹</a>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.Identical\">Identical</a></span> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L1006-L1007","name":"SetTheory.PGame.inv_eq_of_lf_zero","line":1006,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv_eq_of_lf_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv_eq_of_lf_zero\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">inv_eq_of_lf_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Order.html#SetTheory.PGame.LF\">LF</a></span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span><a href=\"./Mathlib/Algebra/Notation/Defs.html#Inv.inv\">⁻¹</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'\">inv'</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L1003-L1004","name":"SetTheory.PGame.inv_eq_of_pos","line":1003,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv_eq_of_pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv_eq_of_pos\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">inv_eq_of_pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span><a href=\"./Mathlib/Algebra/Notation/Defs.html#Inv.inv\">⁻¹</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'\">inv'</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L999-L1001","name":"SetTheory.PGame.inv_zero","line":999,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv_zero\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">inv_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span><a href=\"./Mathlib/Algebra/Notation/Defs.html#Inv.inv\">⁻¹</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L997-L997","name":"SetTheory.PGame.inv_eq_of_equiv_zero","line":997,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv_eq_of_equiv_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv_eq_of_equiv_zero\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">inv_eq_of_equiv_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span><a href=\"./Mathlib/Algebra/Notation/Defs.html#Inv.inv\">⁻¹</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L994-L995","name":"SetTheory.PGame.instDiv","line":994,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.instDiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.instDiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instDiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L990-L992","name":"SetTheory.PGame.instInv","line":990,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.instInv","doc":"The inverse of a pre-game in terms of the inverse on positive pre-games. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.instInv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instInv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#Inv\">Inv</a> <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L987-L988","name":"SetTheory.PGame.inv'_one_equiv","line":987,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'_one_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'_one_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">inv'_one_equiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'\">inv'</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L974-L985","name":"SetTheory.PGame.inv'One","line":974,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'One","doc":"`inv' 1` has exactly the same moves as `1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'One\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">inv'One</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'\">inv'</a> <span class=\"fn\">1</span>)</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.Relabelling\">Relabelling</a></span> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L967-L972","name":"SetTheory.PGame.inv'_one","line":967,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'_one","doc":"`inv' 1` has exactly the same moves as `1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'_one\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">inv'_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'\">inv'</a> <span class=\"fn\">1</span>)</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.Identical\">Identical</a></span> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L964-L965","name":"SetTheory.PGame.inv'_zero_equiv","line":964,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'_zero_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'_zero_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">inv'_zero_equiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'\">inv'</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L951-L962","name":"SetTheory.PGame.inv'Zero","line":951,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'Zero","doc":"`inv' 0` has exactly the same moves as `1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'Zero\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">inv'Zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'\">inv'</a> <span class=\"fn\">0</span>)</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.Relabelling\">Relabelling</a></span> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L946-L949","name":"SetTheory.PGame.zero_lf_inv'","line":946,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.zero_lf_inv'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.zero_lf_inv'\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">zero_lf_inv'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Order.html#SetTheory.PGame.LF\">LF</a> <span class=\"fn\">0</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'\">inv'</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L931-L944","name":"SetTheory.PGame.inv'","line":931,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'","doc":"The inverse of a positive surreal number `x = {L | R}` is\ngiven by `x⁻¹ = {0,\n  (1 + (R - x) * x⁻¹L) * R, (1 + (L - x) * x⁻¹R) * L |\n  (1 + (L - x) * x⁻¹L) * L, (1 + (R - x) * x⁻¹R) * R}`.\nBecause the two halves `x⁻¹L, x⁻¹R` of `x⁻¹` are used in their own\ndefinition, the sets and elements are inductively generated. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.inv'\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">inv'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L924-L929","name":"SetTheory.PGame.invVal_isEmpty","line":924,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.invVal_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.invVal_isEmpty\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">invVal_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><span class=\"fn\">l</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">r</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">IHl</span> : <span class=\"fn\"><span class=\"fn\">l</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">IHr</span> : <span class=\"fn\"><span class=\"fn\">r</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy\">InvTy</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.invVal\">invVal</a> <span class=\"fn\">L</span> <span class=\"fn\">R</span> <span class=\"fn\">IHl</span> <span class=\"fn\">IHr</span> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L913-L922","name":"SetTheory.PGame.invVal","line":913,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.invVal","doc":"Because the two halves of the definition of `inv` produce more elements\nof each side, we have to define the two families inductively.\nThis is the function part, defined by recursion on `InvTy`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.invVal\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">invVal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><span class=\"fn\">l</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">r</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">IHl</span> : <span class=\"fn\"><span class=\"fn\">l</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">IHr</span> : <span class=\"fn\"><span class=\"fn\">r</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy\">InvTy</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">b</span></span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L906-L911","name":"SetTheory.PGame.uniqueInvTy","line":906,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.uniqueInvTy","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.uniqueInvTy\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">uniqueInvTy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">r</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy\">InvTy</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L903-L904","name":"SetTheory.PGame.InvTy.instInhabited","line":903,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy.instInhabited\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">InvTy</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">r</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy\">InvTy</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L900-L901","name":"SetTheory.PGame.instIsEmptyInvTyTrue","line":900,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.instIsEmptyInvTyTrue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.instIsEmptyInvTyTrue\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instIsEmptyInvTyTrue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">r</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">l</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy\">InvTy</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L898-L898","name":"SetTheory.PGame.InvTy.right₂","line":898,"kind":"ctor","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy.right₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy.right₂\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">InvTy</span>.<span class=\"name\">right₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">r</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy\">InvTy</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> → <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy\">InvTy</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L897-L897","name":"SetTheory.PGame.InvTy.right₁","line":897,"kind":"ctor","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy.right₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy.right₁\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">InvTy</span>.<span class=\"name\">right₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy\">InvTy</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span> → <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy\">InvTy</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L896-L896","name":"SetTheory.PGame.InvTy.left₂","line":896,"kind":"ctor","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy.left₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy.left₂\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">InvTy</span>.<span class=\"name\">left₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy\">InvTy</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> → <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy\">InvTy</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L895-L895","name":"SetTheory.PGame.InvTy.left₁","line":895,"kind":"ctor","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy.left₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy.left₁\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">InvTy</span>.<span class=\"name\">left₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">r</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy\">InvTy</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span> → <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy\">InvTy</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L894-L894","name":"SetTheory.PGame.InvTy.zero","line":894,"kind":"ctor","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy.zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy.zero\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">InvTy</span>.<span class=\"name\">zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy\">InvTy</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L890-L898","name":"SetTheory.PGame.InvTy","line":890,"kind":"inductive","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy","doc":"Because the two halves of the definition of `inv` produce more elements\non each side, we have to define the two families inductively.\nThis is the indexing set for the function, and `invVal` is the function part. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.InvTy\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">InvTy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">r</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./foundational_types.html\">Type</a> u</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L867-L888","name":"SetTheory.PGame.rightMoves_mul_iff","line":867,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.rightMoves_mul_iff","doc":"The right options of `x * y` are the left options of `x * (-y)` and of `(-x) * y` of the first\nkind, up to equivalence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.rightMoves_mul_iff\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">rightMoves_mul_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">Game</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">k</span> : <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.RightMoves\">RightMoves</a></span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveRight\">moveRight</a></span> <span class=\"fn\">k</span></span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">(∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span>) (<span class=\"fn\">j</span> : <span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span>), <span class=\"fn\"><span class=\"fn\">P</span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulOption\">mulOption</a></span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>) <span class=\"fn\">i</span> <span class=\"fn\">j</span></span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span>)</span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span>) (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span>), <span class=\"fn\"><span class=\"fn\">P</span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulOption\">mulOption</a></span> <span class=\"fn\">y</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L845-L865","name":"SetTheory.PGame.leftMoves_mul_iff","line":845,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.leftMoves_mul_iff","doc":"The left options of `x * y` of the second kind are the left options of `(-x) * (-y)` of the\nfirst kind, up to equivalence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.leftMoves_mul_iff\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">leftMoves_mul_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">Game</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">k</span> : <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveLeft\">moveLeft</a></span> <span class=\"fn\">k</span></span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">(∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span>) (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulOption\">mulOption</a></span> <span class=\"fn\">y</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span>) (<span class=\"fn\">j</span> : <span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulOption\">mulOption</a></span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>) <span class=\"fn\">i</span> <span class=\"fn\">j</span></span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L837-L843","name":"SetTheory.PGame.mulOption_symm","line":837,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulOption_symm","doc":"The left options of `x * y` agree with that of `y * x` up to equivalence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulOption_symm\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mulOption_symm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulOption\">mulOption</a></span> <span class=\"fn\">y</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulOption\">mulOption</a></span> <span class=\"fn\">x</span> <span class=\"fn\">j</span> <span class=\"fn\">i</span></span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L831-L835","name":"SetTheory.PGame.mulOption_neg_neg","line":831,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulOption_neg_neg","doc":"Any left option of `x * y` of the first kind is also a left option of `x * -(-y)` of\nthe first kind. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulOption_neg_neg\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mulOption_neg_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulOption\">mulOption</a></span> <span class=\"fn\">y</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulOption\">mulOption</a></span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>) <span class=\"fn\">i</span> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/PGame/Algebra.html#SetTheory.PGame.toLeftMovesNeg\">toLeftMovesNeg</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/PGame/Algebra.html#SetTheory.PGame.toRightMovesNeg\">toRightMovesNeg</a> <span class=\"fn\">j</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L827-L829","name":"SetTheory.PGame.mulOption","line":827,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulOption","doc":"The left options of `x * y` of the first kind, i.e. of the form `xL * y + x * yL - xL * yL`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulOption\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mulOption</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L823-L825","name":"SetTheory.PGame.mul_assoc_equiv","line":823,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_assoc_equiv","doc":"`x * y * z` is equivalent to `x * (y * z)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_assoc_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mul_assoc_equiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L673-L821","name":"SetTheory.PGame.quot_mul_assoc","line":673,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_mul_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_mul_assoc\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_mul_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span>)<a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L669-L671","name":"SetTheory.PGame.one_mul_equiv","line":669,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.one_mul_equiv","doc":"`1 * x` is equivalent to `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.one_mul_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">one_mul_equiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L665-L667","name":"SetTheory.PGame.quot_one_mul","line":665,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_one_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_one_mul\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_one_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L661-L663","name":"SetTheory.PGame.oneMulRelabelling","line":661,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.oneMulRelabelling","doc":"`1 * x` has the same moves as `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.oneMulRelabelling\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">oneMulRelabelling</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.Relabelling\">Relabelling</a></span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L657-L659","name":"SetTheory.PGame.mul_one_equiv","line":657,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_one_equiv","doc":"`x * 1` is equivalent to `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_one_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mul_one_equiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">1</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L653-L655","name":"SetTheory.PGame.quot_mul_one","line":653,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_mul_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_mul_one\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_mul_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">1</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L650-L651","name":"SetTheory.PGame.mul_one","line":650,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_one","doc":"`x * 1` has the same moves as `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_one\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mul_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">1</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.Identical\">Identical</a></span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L641-L648","name":"SetTheory.PGame.one_mul","line":641,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.one_mul","doc":"`1 * x` has the same moves as `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.one_mul\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">one_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.Identical\">Identical</a></span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L624-L639","name":"SetTheory.PGame.mulOneRelabelling","line":624,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulOneRelabelling","doc":"`x * 1` has the same moves as `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulOneRelabelling\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mulOneRelabelling</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">1</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.Relabelling\">Relabelling</a></span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L619-L622","name":"SetTheory.PGame.quot_right_distrib_sub","line":619,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_right_distrib_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_right_distrib_sub\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_right_distrib_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a>(<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">z</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L615-L617","name":"SetTheory.PGame.right_distrib_equiv","line":615,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.right_distrib_equiv","doc":"`(x + y) * z` is equivalent to `x * z + y * z`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.right_distrib_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">right_distrib_equiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L611-L613","name":"SetTheory.PGame.quot_right_distrib","line":611,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_right_distrib","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_right_distrib\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_right_distrib</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L606-L609","name":"SetTheory.PGame.quot_left_distrib_sub","line":606,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_left_distrib_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_left_distrib_sub\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_left_distrib_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">z</span>)<a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L602-L604","name":"SetTheory.PGame.left_distrib_equiv","line":602,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.left_distrib_equiv","doc":"`x * (y + z)` is equivalent to `x * y + x * z`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.left_distrib_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">left_distrib_equiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">z</span>) <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L505-L600","name":"SetTheory.PGame.quot_left_distrib","line":505,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_left_distrib","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_left_distrib\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_left_distrib</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">z</span>)<a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L503-L503","name":"SetTheory.PGame.quot_neg_mul_neg","line":503,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_neg_mul_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_neg_mul_neg\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_neg_mul_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L500-L501","name":"SetTheory.PGame.quot_mul_neg","line":500,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_mul_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_mul_neg\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_mul_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L496-L498","name":"SetTheory.PGame.mulNegRelabelling","line":496,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulNegRelabelling","doc":"`x * -y` and `-(x * y)` have the same moves. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulNegRelabelling\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mulNegRelabelling</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.Relabelling\">Relabelling</a></span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>))</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L492-L494","name":"SetTheory.PGame.quot_neg_mul","line":492,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_neg_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_neg_mul\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_neg_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L488-L490","name":"SetTheory.PGame.neg_mul","line":488,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.neg_mul","doc":"`-x * y` and `-(x * y)` have the same moves. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.neg_mul\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">neg_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.Identical\">Identical</a></span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>))</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L475-L486","name":"SetTheory.PGame.mul_neg","line":475,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_neg","doc":"`x * -y` and `-(x * y)` have the same moves. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_neg\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mul_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L456-L473","name":"SetTheory.PGame.negMulRelabelling","line":456,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.negMulRelabelling","doc":"`-x * y` and `-(x * y)` have the same moves. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.negMulRelabelling\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">negMulRelabelling</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.Relabelling\">Relabelling</a></span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>))</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L452-L454","name":"SetTheory.PGame.quot_zero_mul","line":452,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_zero_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_zero_mul\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_zero_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L448-L450","name":"SetTheory.PGame.zero_mul_equiv","line":448,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.zero_mul_equiv","doc":"`0 * x` is equivalent to `0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.zero_mul_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">zero_mul_equiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L444-L446","name":"SetTheory.PGame.zeroMulRelabelling","line":444,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.zeroMulRelabelling","doc":"`0 * x` has exactly the same moves as `0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.zeroMulRelabelling\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">zeroMulRelabelling</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.Relabelling\">Relabelling</a></span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L441-L442","name":"SetTheory.PGame.zero_mul","line":441,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.zero_mul","doc":"`0 * x` has exactly the same moves as `0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.zero_mul\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">zero_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.Identical\">Identical</a></span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L437-L439","name":"SetTheory.PGame.quot_mul_zero","line":437,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_mul_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_mul_zero\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_mul_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">0</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L433-L435","name":"SetTheory.PGame.mul_zero_equiv","line":433,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_zero_equiv","doc":"`x * 0` is equivalent to `0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_zero_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mul_zero_equiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L429-L431","name":"SetTheory.PGame.mulZeroRelabelling","line":429,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulZeroRelabelling","doc":"`x * 0` has exactly the same moves as `0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulZeroRelabelling\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mulZeroRelabelling</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">0</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.Relabelling\">Relabelling</a></span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L426-L427","name":"SetTheory.PGame.mul_zero","line":426,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_zero","doc":"`x * 0` has exactly the same moves as `0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_zero\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mul_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">0</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.Identical\">Identical</a></span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L419-L424","name":"SetTheory.PGame.isEmpty_rightMoves_mul","line":419,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.isEmpty_rightMoves_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.isEmpty_rightMoves_mul\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">isEmpty_rightMoves_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> (<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.RightMoves\">RightMoves</a></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.RightMoves\">RightMoves</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span>)</span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.RightMoves\">RightMoves</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L412-L417","name":"SetTheory.PGame.isEmpty_leftMoves_mul","line":412,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.isEmpty_leftMoves_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.isEmpty_leftMoves_mul\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">isEmpty_leftMoves_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> (<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.RightMoves\">RightMoves</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.RightMoves\">RightMoves</a></span>)</span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L408-L410","name":"SetTheory.PGame.mul_comm_equiv","line":408,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_comm_equiv","doc":"`x * y` is equivalent to `y * x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_comm_equiv\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mul_comm_equiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L405-L406","name":"SetTheory.PGame.quot_mul_comm","line":405,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_mul_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_mul_comm\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_mul_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L391-L403","name":"SetTheory.PGame.mulCommRelabelling","line":391,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulCommRelabelling","doc":"`x * y` and `y * x` have the same moves. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mulCommRelabelling\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mulCommRelabelling</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.Relabelling\">Relabelling</a></span> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L380-L389","name":"SetTheory.PGame.mul_comm","line":380,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_comm","doc":"`x * y` and `y * x` have the same moves. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_comm\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mul_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.Identical\">Identical</a></span> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L372-L378","name":"SetTheory.PGame.rightMoves_mul_cases","line":372,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.rightMoves_mul_cases","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.rightMoves_mul_cases\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">rightMoves_mul_cases</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.RightMoves\">RightMoves</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.RightMoves\">RightMoves</a></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\">∀ (<span class=\"fn\">ix</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span>) (<span class=\"fn\">jy</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.RightMoves\">RightMoves</a></span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.toRightMovesMul\">toRightMovesMul</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">ix</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">jy</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\">∀ (<span class=\"fn\">jx</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.RightMoves\">RightMoves</a></span>) (<span class=\"fn\">iy</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.toRightMovesMul\">toRightMovesMul</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">jx</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">iy</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L364-L370","name":"SetTheory.PGame.leftMoves_mul_cases","line":364,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.leftMoves_mul_cases","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.leftMoves_mul_cases\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">leftMoves_mul_cases</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\">∀ (<span class=\"fn\">ix</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span>) (<span class=\"fn\">iy</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.toLeftMovesMul\">toLeftMovesMul</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">ix</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">iy</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\">∀ (<span class=\"fn\">jx</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.RightMoves\">RightMoves</a></span>) (<span class=\"fn\">jy</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.RightMoves\">RightMoves</a></span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.toLeftMovesMul\">toLeftMovesMul</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">jx</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">jy</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L358-L362","name":"SetTheory.PGame.neg_mk_mul_moveRight_inr","line":358,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.neg_mk_mul_moveRight_inr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.neg_mk_mul_moveRight_inr\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">neg_mk_mul_moveRight_inr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xl </span><span class=\"fn\">xr </span><span class=\"fn\">yl </span><span class=\"fn\">yr</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xL</span> : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xR</span> : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">yL</span> : <span class=\"fn\"><span class=\"fn\">yl</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">yR</span> : <span class=\"fn\"><span class=\"fn\">yr</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\">xr</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\">yr</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span>)).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveRight\">moveRight</a></span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\"><span class=\"fn\">xR</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yR</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">xR</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yR</span> <span class=\"fn\">j</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L352-L356","name":"SetTheory.PGame.neg_mk_mul_moveRight_inl","line":352,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.neg_mk_mul_moveRight_inl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.neg_mk_mul_moveRight_inl\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">neg_mk_mul_moveRight_inl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xl </span><span class=\"fn\">xr </span><span class=\"fn\">yl </span><span class=\"fn\">yr</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xL</span> : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xR</span> : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">yL</span> : <span class=\"fn\"><span class=\"fn\">yl</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">yR</span> : <span class=\"fn\"><span class=\"fn\">yr</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\">xl</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\">yl</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span>)).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveRight\">moveRight</a></span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\"><span class=\"fn\">xL</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yL</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">xL</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yL</span> <span class=\"fn\">j</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L346-L350","name":"SetTheory.PGame.neg_mk_mul_moveLeft_inr","line":346,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.neg_mk_mul_moveLeft_inr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.neg_mk_mul_moveLeft_inr\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">neg_mk_mul_moveLeft_inr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xl </span><span class=\"fn\">xr </span><span class=\"fn\">yl </span><span class=\"fn\">yr</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xL</span> : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xR</span> : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">yL</span> : <span class=\"fn\"><span class=\"fn\">yl</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">yR</span> : <span class=\"fn\"><span class=\"fn\">yr</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\">xr</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\">yl</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span>)).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveLeft\">moveLeft</a></span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\"><span class=\"fn\">xR</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yL</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">xR</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yL</span> <span class=\"fn\">j</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L340-L344","name":"SetTheory.PGame.neg_mk_mul_moveLeft_inl","line":340,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.neg_mk_mul_moveLeft_inl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.neg_mk_mul_moveLeft_inl\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">neg_mk_mul_moveLeft_inl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xl </span><span class=\"fn\">xr </span><span class=\"fn\">yl </span><span class=\"fn\">yr</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xL</span> : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xR</span> : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">yL</span> : <span class=\"fn\"><span class=\"fn\">yl</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">yR</span> : <span class=\"fn\"><span class=\"fn\">yr</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\">xl</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\">yr</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span>)).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveLeft\">moveLeft</a></span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\"><span class=\"fn\">xL</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yR</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">xL</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yR</span> <span class=\"fn\">j</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L332-L338","name":"SetTheory.PGame.mul_moveRight_inr","line":332,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_moveRight_inr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_moveRight_inr\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mul_moveRight_inr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.RightMoves\">RightMoves</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveRight\">moveRight</a></span> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.toRightMovesMul\">toRightMovesMul</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveRight\">moveRight</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveLeft\">moveLeft</a></span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveRight\">moveRight</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveLeft\">moveLeft</a></span> <span class=\"fn\">j</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L326-L330","name":"SetTheory.PGame.mk_mul_moveRight_inr","line":326,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mk_mul_moveRight_inr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mk_mul_moveRight_inr\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mk_mul_moveRight_inr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xl </span><span class=\"fn\">xr </span><span class=\"fn\">yl </span><span class=\"fn\">yr</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xL</span> : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xR</span> : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">yL</span> : <span class=\"fn\"><span class=\"fn\">yl</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">yR</span> : <span class=\"fn\"><span class=\"fn\">yr</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\">xr</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\">yl</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveRight\">moveRight</a></span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">xR</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yL</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">xR</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yL</span> <span class=\"fn\">j</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L318-L324","name":"SetTheory.PGame.mul_moveRight_inl","line":318,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_moveRight_inl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_moveRight_inl\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mul_moveRight_inl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.RightMoves\">RightMoves</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveRight\">moveRight</a></span> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.toRightMovesMul\">toRightMovesMul</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveLeft\">moveLeft</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveRight\">moveRight</a></span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveLeft\">moveLeft</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveRight\">moveRight</a></span> <span class=\"fn\">j</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L312-L316","name":"SetTheory.PGame.mk_mul_moveRight_inl","line":312,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mk_mul_moveRight_inl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mk_mul_moveRight_inl\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mk_mul_moveRight_inl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xl </span><span class=\"fn\">xr </span><span class=\"fn\">yl </span><span class=\"fn\">yr</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xL</span> : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xR</span> : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">yL</span> : <span class=\"fn\"><span class=\"fn\">yl</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">yR</span> : <span class=\"fn\"><span class=\"fn\">yr</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\">xl</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\">yr</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveRight\">moveRight</a></span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">xL</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yR</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">xL</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yR</span> <span class=\"fn\">j</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L304-L310","name":"SetTheory.PGame.mul_moveLeft_inr","line":304,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_moveLeft_inr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_moveLeft_inr\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mul_moveLeft_inr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.RightMoves\">RightMoves</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.RightMoves\">RightMoves</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveLeft\">moveLeft</a></span> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.toLeftMovesMul\">toLeftMovesMul</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveRight\">moveRight</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveRight\">moveRight</a></span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveRight\">moveRight</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveRight\">moveRight</a></span> <span class=\"fn\">j</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L298-L302","name":"SetTheory.PGame.mk_mul_moveLeft_inr","line":298,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mk_mul_moveLeft_inr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mk_mul_moveLeft_inr\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mk_mul_moveLeft_inr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xl </span><span class=\"fn\">xr </span><span class=\"fn\">yl </span><span class=\"fn\">yr</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xL</span> : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xR</span> : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">yL</span> : <span class=\"fn\"><span class=\"fn\">yl</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">yR</span> : <span class=\"fn\"><span class=\"fn\">yr</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\">xr</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\">yr</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveLeft\">moveLeft</a></span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">xR</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yR</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">xR</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yR</span> <span class=\"fn\">j</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L290-L296","name":"SetTheory.PGame.mul_moveLeft_inl","line":290,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_moveLeft_inl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mul_moveLeft_inl\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mul_moveLeft_inl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveLeft\">moveLeft</a></span> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.toLeftMovesMul\">toLeftMovesMul</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveLeft\">moveLeft</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveLeft\">moveLeft</a></span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveLeft\">moveLeft</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveLeft\">moveLeft</a></span> <span class=\"fn\">j</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L284-L288","name":"SetTheory.PGame.mk_mul_moveLeft_inl","line":284,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mk_mul_moveLeft_inl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.mk_mul_moveLeft_inl\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">mk_mul_moveLeft_inl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xl </span><span class=\"fn\">xr </span><span class=\"fn\">yl </span><span class=\"fn\">yr</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xL</span> : <span class=\"fn\"><span class=\"fn\">xl</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xR</span> : <span class=\"fn\"><span class=\"fn\">xr</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">yL</span> : <span class=\"fn\"><span class=\"fn\">yl</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">yR</span> : <span class=\"fn\"><span class=\"fn\">yr</span> → <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\">xl</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\">yl</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveLeft\">moveLeft</a></span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">xL</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">yl</span> <span class=\"fn\">yr</span> <span class=\"fn\">yL</span> <span class=\"fn\">yR</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.mk\">mk</a> <span class=\"fn\">xl</span> <span class=\"fn\">xr</span> <span class=\"fn\">xL</span> <span class=\"fn\">xR</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yL</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">xL</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">yL</span> <span class=\"fn\">j</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L276-L282","name":"SetTheory.PGame.toRightMovesMul","line":276,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.toRightMovesMul","doc":"Turns a left and a right move for `x` and `y` into a right move for `x * y` and vice versa.\n\nEven though these types are the same (not definitionally so), this is the preferred way to convert\nbetween them. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.toRightMovesMul\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">toRightMovesMul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.RightMoves\">RightMoves</a></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.RightMoves\">RightMoves</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.RightMoves\">RightMoves</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L268-L274","name":"SetTheory.PGame.toLeftMovesMul","line":268,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.toLeftMovesMul","doc":"Turns two left or right moves for `x` and `y` into a left move for `x * y` and vice versa.\n\nEven though these types are the same (not definitionally so), this is the preferred way to convert\nbetween them. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.toLeftMovesMul\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">toLeftMovesMul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.RightMoves\">RightMoves</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.RightMoves\">RightMoves</a></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L263-L266","name":"SetTheory.PGame.rightMoves_mul","line":263,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.rightMoves_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.rightMoves_mul\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">rightMoves_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.RightMoves\">RightMoves</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.RightMoves\">RightMoves</a></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.RightMoves\">RightMoves</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L258-L261","name":"SetTheory.PGame.leftMoves_mul","line":258,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.leftMoves_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.leftMoves_mul\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">leftMoves_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>).<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.RightMoves\">RightMoves</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.RightMoves\">RightMoves</a></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L245-L256","name":"SetTheory.PGame.instMul","line":245,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.instMul","doc":"The product of `x = {xL | xR}` and `y = {yL | yR}` is\n`{xL*y + x*yL - xL*yL, xR*y + x*yR - xR*yR | xL*y + x*yR - xL*yR, xR*y + x*yL - xR*yL}`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.instMul\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">instMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L234-L238","name":"SetTheory.PGame.quot_eq_of_mk'_quot_eq","line":234,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_eq_of_mk'_quot_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_eq_of_mk'_quot_eq\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_eq_of_mk'_quot_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.RightMoves\">RightMoves</a></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.RightMoves\">RightMoves</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.LeftMoves\">LeftMoves</a></span>), <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveLeft\">moveLeft</a></span> <span class=\"fn\">i</span></span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveLeft\">moveLeft</a></span> <span class=\"fn\">(<span class=\"fn\">L</span> <span class=\"fn\">i</span>)</span></span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\">∀ (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.RightMoves\">RightMoves</a></span>), <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveRight\">moveRight</a></span> <span class=\"fn\">j</span></span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame.moveRight\">moveRight</a></span> <span class=\"fn\">(<span class=\"fn\">R</span> <span class=\"fn\">j</span>)</span></span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">y</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L227-L232","name":"SetTheory.PGame.quot_natCast","line":227,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_natCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_natCast\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_natCast</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">↑<span class=\"fn\">n</span></span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L225-L225","name":"SetTheory.PGame.quot_sub","line":225,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_sub\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">a</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">b</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L224-L224","name":"SetTheory.PGame.quot_add","line":224,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_add\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">a</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">b</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L223-L223","name":"SetTheory.PGame.quot_neg","line":223,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_neg\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">a</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L222-L222","name":"SetTheory.PGame.quot_one","line":222,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_one\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">1</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L221-L221","name":"SetTheory.PGame.quot_zero","line":221,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.quot_zero\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">quot_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">0</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L213-L215","name":"SetTheory.Game.bddBelow_of_small","line":213,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.bddBelow_of_small","doc":"A small set of games is bounded below. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.bddBelow_of_small\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">bddBelow_of_small</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">Game</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u + 1}</a> <span class=\"fn\">↑<span class=\"fn\">s</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Bounds/Defs.html#BddBelow\">BddBelow</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L206-L211","name":"SetTheory.Game.bddBelow_range_of_small","line":206,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.bddBelow_range_of_small","doc":"A small family of games is bounded below. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.bddBelow_range_of_small\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">bddBelow_range_of_small</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u_1}</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">Game</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Bounds/Defs.html#BddBelow\">BddBelow</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L202-L204","name":"SetTheory.Game.bddAbove_of_small","line":202,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.bddAbove_of_small","doc":"A small set of games is bounded above. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.bddAbove_of_small\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">bddAbove_of_small</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">Game</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u + 1}</a> <span class=\"fn\">↑<span class=\"fn\">s</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Bounds/Defs.html#BddAbove\">BddAbove</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L195-L200","name":"SetTheory.Game.bddAbove_range_of_small","line":195,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.bddAbove_range_of_small","doc":"A small family of games is bounded above. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.bddAbove_range_of_small\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">bddAbove_range_of_small</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u_1}</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">Game</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Bounds/Defs.html#BddAbove\">BddAbove</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L192-L193","name":"SetTheory.Game.isOrderedAddMonoid","line":192,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.isOrderedAddMonoid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.isOrderedAddMonoid\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">isOrderedAddMonoid</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Defs.html#IsOrderedAddMonoid\">IsOrderedAddMonoid</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">Game</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L188-L190","name":"SetTheory.Game.add_lf_add_left","line":188,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.add_lf_add_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.add_lf_add_left\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">add_lf_add_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">Game</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.LF\">LF</a></span> <span class=\"fn\">c</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">Game</a>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>).<a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.LF\">LF</a></span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L184-L186","name":"SetTheory.Game.add_lf_add_right","line":184,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.add_lf_add_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.add_lf_add_right\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">add_lf_add_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">Game</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.LF\">LF</a></span> <span class=\"fn\">c</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">Game</a>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span>).<a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.LF\">LF</a></span> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L179-L182","name":"SetTheory.Game.addRightStrictMono","line":179,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.addRightStrictMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.addRightStrictMono\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">addRightStrictMono</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightStrictMono\">AddRightStrictMono</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">Game</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L174-L177","name":"SetTheory.Game.addLeftStrictMono","line":174,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.addLeftStrictMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.addLeftStrictMono\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">addLeftStrictMono</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftStrictMono\">AddLeftStrictMono</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">Game</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L169-L172","name":"SetTheory.Game.addRightMono","line":169,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.addRightMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.addRightMono\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">addRightMono</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightMono\">AddRightMono</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">Game</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L164-L167","name":"SetTheory.Game.addLeftMono","line":164,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.addLeftMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.addLeftMono\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">addLeftMono</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftMono\">AddLeftMono</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">Game</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L154-L155","name":"SetTheory.PGame.fuzzy_iff_game_fuzzy","line":154,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.fuzzy_iff_game_fuzzy","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.fuzzy_iff_game_fuzzy\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">fuzzy_iff_game_fuzzy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Order.html#SetTheory.PGame.Fuzzy\">Fuzzy</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.Fuzzy\">Game.Fuzzy</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">y</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L152-L152","name":"SetTheory.PGame.game_eq","line":152,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.game_eq","doc":"**Alias** of the forward direction of `SetTheory.PGame.equiv_iff_game_eq`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.game_eq\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">game_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y</span> → <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">y</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L149-L150","name":"SetTheory.PGame.equiv_iff_game_eq","line":149,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.equiv_iff_game_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.equiv_iff_game_eq\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">equiv_iff_game_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasEquiv.Equiv\">≈</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">y</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L146-L147","name":"SetTheory.PGame.lt_iff_game_lt","line":146,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.lt_iff_game_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.lt_iff_game_lt\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lt_iff_game_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">y</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L143-L144","name":"SetTheory.PGame.lf_iff_game_lf","line":143,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.lf_iff_game_lf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.lf_iff_game_lf\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">lf_iff_game_lf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/PGame/Order.html#SetTheory.PGame.LF\">LF</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.LF\">Game.LF</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">y</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L140-L141","name":"SetTheory.PGame.le_iff_game_le","line":140,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.le_iff_game_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.PGame.le_iff_game_le\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">le_iff_game_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/PGame/Basic.html#SetTheory.PGame\">PGame</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">y</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L123-L128","name":"SetTheory.Game.instIsTrichotomousLF","line":123,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.instIsTrichotomousLF","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.instIsTrichotomousLF\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">instIsTrichotomousLF</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#IsTrichotomous\">IsTrichotomous</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">Game</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.LF\">LF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L116-L120","name":"SetTheory.Game.Fuzzy","line":116,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.Fuzzy","doc":"The fuzzy, confused, or incomparable relation on games.\n\nIf `x ‖ 0`, then the first player can always win `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.Fuzzy\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">Fuzzy</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">Game</a> → <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">Game</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L110-L114","name":"SetTheory.Game.not_lf","line":110,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.not_lf","doc":"On `Game`, simp-normal inequalities should use as few negations as possible. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.not_lf\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">not_lf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">Game</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.LF\">LF</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L104-L108","name":"SetTheory.Game.not_le","line":104,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.not_le","doc":"On `Game`, simp-normal inequalities should use as few negations as possible. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.not_le\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">not_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">Game</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.LF\">LF</a></span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L98-L102","name":"SetTheory.Game.LF","line":98,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.LF","doc":"The less or fuzzy relation on games.\n\nIf `0 ⧏ x` (less or fuzzy with), then Left can win `x` as the first player. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.LF\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">LF</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">Game</a> → <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">Game</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L81-L96","name":"SetTheory.Game.instPartialOrderGame","line":81,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.instPartialOrderGame","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.instPartialOrderGame\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">instPartialOrderGame</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">Game</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L78-L79","name":"SetTheory.Game.zero_def","line":78,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.zero_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.zero_def\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">zero_def</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\">0</span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L75-L76","name":"SetTheory.Game.instInhabited","line":75,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.instInhabited\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">Game</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L56-L73","name":"SetTheory.Game.instAddCommGroupWithOneGame","line":56,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.instAddCommGroupWithOneGame","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.instAddCommGroupWithOneGame\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">instAddCommGroupWithOneGame</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Int/Cast/Defs.html#AddCommGroupWithOne\">AddCommGroupWithOne</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">Game</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L53-L54","name":"SetTheory.Game.instAdd","line":53,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.instAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.instAdd\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">instAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">Game</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L52-L52","name":"SetTheory.Game.instZero","line":52,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.instZero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.instZero\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">instZero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">Game</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L48-L50","name":"SetTheory.Game.instNeg","line":48,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.instNeg","doc":"Negation of games. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game.instNeg\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">instNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">Game</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Game/Basic.lean#L34-L43","name":"SetTheory.Game","line":34,"kind":"def","docLink":"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game","doc":"The type of combinatorial games. In ZFC, a combinatorial game is constructed from\ntwo sets of combinatorial games that have been constructed at an earlier\nstage. To do this in type theory, we say that a combinatorial pre-game is built\ninductively from two families of combinatorial games indexed over any type\nin Type u. The resulting type `PGame.{u}` lives in `Type (u+1)`,\nreflecting that it is a proper class in ZFC.\nA combinatorial game is then constructed by quotienting by the equivalence\n`x ≈ y ↔ x ≤ y ∧ y ≤ x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u_1 + 1)</div></div>"}]}