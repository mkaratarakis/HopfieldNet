{"name":"Mathlib.GroupTheory.SpecificGroups.Cyclic","instances":[{"typeNames":[],"name":"isCyclic_of_subsingleton","className":"IsCyclic"},{"typeNames":[],"name":"isAddCyclic_of_subsingleton","className":"IsAddCyclic"},{"typeNames":["Multiplicative"],"name":"isCyclic_multiplicative","className":"IsCyclic"},{"typeNames":["Additive"],"name":"isAddCyclic_additive","className":"IsAddCyclic"},{"typeNames":[],"name":"IsCyclic.commutative","className":"Std.Commutative"},{"typeNames":[],"name":"IsAddCyclic.commutative","className":"Std.Commutative"},{"typeNames":["Subtype"],"name":"instIsMulCommutativeSubtypeMemSubgroupOfIsCyclic","className":"IsMulCommutative"},{"typeNames":["Subtype"],"name":"Bot.isCyclic","className":"IsCyclic"},{"typeNames":["Subtype"],"name":"Bot.isAddCyclic","className":"IsAddCyclic"},{"typeNames":["Subtype"],"name":"Subgroup.isCyclic","className":"IsCyclic"},{"typeNames":["Subtype"],"name":"AddSubgroup.isAddCyclic","className":"IsAddCyclic"},{"typeNames":[],"name":"IsSimpleGroup.isCyclic","className":"IsCyclic"},{"typeNames":[],"name":"IsSimpleAddGroup.isAddCyclic","className":"IsAddCyclic"},{"typeNames":["Int"],"name":"instIsAddCyclicInt","className":"IsAddCyclic"},{"typeNames":["ZMod"],"name":"ZMod.instIsAddCyclic","className":"IsAddCyclic"},{"typeNames":["ZMod"],"name":"ZMod.instIsSimpleAddGroup","className":"IsSimpleAddGroup"}],"imports":["Init","Mathlib.Data.Nat.Totient","Mathlib.Data.ZMod.Aut","Mathlib.Data.ZMod.QuotientGroup","Mathlib.GroupTheory.Exponent","Mathlib.GroupTheory.Subgroup.Simple","Mathlib.Tactic.Group"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L916-L916","name":"addEquivOfAddOrderOfEq_symm_apply_gen","line":916,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#addEquivOfAddOrderOfEq_symm_apply_gen","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#addEquivOfAddOrderOfEq_symm_apply_gen\"><span class=\"name\">addEquivOfAddOrderOfEq_symm_apply_gen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#AddSubgroup.zmultiples\">AddSubgroup.zmultiples</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g'</span> : <span class=\"fn\">G'</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg'</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">G'</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#AddSubgroup.zmultiples\">AddSubgroup.zmultiples</a> <span class=\"fn\">g'</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">g'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#addEquivOfAddOrderOfEq\">addEquivOfAddOrderOfEq</a> <span class=\"fn\">hg</span> <span class=\"fn\">hg'</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv.symm\">symm</a></span> <span class=\"fn\">g'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L916-L918","name":"mulEquivOfOrderOfEq_symm_apply_gen","line":916,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#mulEquivOfOrderOfEq_symm_apply_gen","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#mulEquivOfOrderOfEq_symm_apply_gen\"><span class=\"name\">mulEquivOfOrderOfEq_symm_apply_gen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#Subgroup.zpowers\">Subgroup.zpowers</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g'</span> : <span class=\"fn\">G'</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg'</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">G'</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#Subgroup.zpowers\">Subgroup.zpowers</a> <span class=\"fn\">g'</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#orderOf\">orderOf</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#orderOf\">orderOf</a> <span class=\"fn\">g'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#mulEquivOfOrderOfEq\">mulEquivOfOrderOfEq</a> <span class=\"fn\">hg</span> <span class=\"fn\">hg'</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv.symm\">symm</a></span> <span class=\"fn\">g'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L912-L912","name":"addEquivOfAddOrderOfEq_symm","line":912,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#addEquivOfAddOrderOfEq_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#addEquivOfAddOrderOfEq_symm\"><span class=\"name\">addEquivOfAddOrderOfEq_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#AddSubgroup.zmultiples\">AddSubgroup.zmultiples</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g'</span> : <span class=\"fn\">G'</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg'</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">G'</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#AddSubgroup.zmultiples\">AddSubgroup.zmultiples</a> <span class=\"fn\">g'</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">g'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#addEquivOfAddOrderOfEq\">addEquivOfAddOrderOfEq</a> <span class=\"fn\">hg</span> <span class=\"fn\">hg'</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv.symm\">symm</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#addEquivOfAddOrderOfEq\">addEquivOfAddOrderOfEq</a> <span class=\"fn\">hg'</span> <span class=\"fn\">hg</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L912-L914","name":"mulEquivOfOrderOfEq_symm","line":912,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#mulEquivOfOrderOfEq_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#mulEquivOfOrderOfEq_symm\"><span class=\"name\">mulEquivOfOrderOfEq_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#Subgroup.zpowers\">Subgroup.zpowers</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g'</span> : <span class=\"fn\">G'</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg'</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">G'</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#Subgroup.zpowers\">Subgroup.zpowers</a> <span class=\"fn\">g'</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#orderOf\">orderOf</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#orderOf\">orderOf</a> <span class=\"fn\">g'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#mulEquivOfOrderOfEq\">mulEquivOfOrderOfEq</a> <span class=\"fn\">hg</span> <span class=\"fn\">hg'</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv.symm\">symm</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#mulEquivOfOrderOfEq\">mulEquivOfOrderOfEq</a> <span class=\"fn\">hg'</span> <span class=\"fn\">hg</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L908-L908","name":"addEquivOfAddOrderOfEq_apply_gen","line":908,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#addEquivOfAddOrderOfEq_apply_gen","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#addEquivOfAddOrderOfEq_apply_gen\"><span class=\"name\">addEquivOfAddOrderOfEq_apply_gen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#AddSubgroup.zmultiples\">AddSubgroup.zmultiples</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g'</span> : <span class=\"fn\">G'</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg'</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">G'</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#AddSubgroup.zmultiples\">AddSubgroup.zmultiples</a> <span class=\"fn\">g'</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">g'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#addEquivOfAddOrderOfEq\">addEquivOfAddOrderOfEq</a> <span class=\"fn\">hg</span> <span class=\"fn\">hg'</span> <span class=\"fn\">h</span>)</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L908-L910","name":"mulEquivOfOrderOfEq_apply_gen","line":908,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#mulEquivOfOrderOfEq_apply_gen","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#mulEquivOfOrderOfEq_apply_gen\"><span class=\"name\">mulEquivOfOrderOfEq_apply_gen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#Subgroup.zpowers\">Subgroup.zpowers</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g'</span> : <span class=\"fn\">G'</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg'</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">G'</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#Subgroup.zpowers\">Subgroup.zpowers</a> <span class=\"fn\">g'</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#orderOf\">orderOf</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#orderOf\">orderOf</a> <span class=\"fn\">g'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#mulEquivOfOrderOfEq\">mulEquivOfOrderOfEq</a> <span class=\"fn\">hg</span> <span class=\"fn\">hg'</span> <span class=\"fn\">h</span>)</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L897-L899","name":"addEquivOfAddOrderOfEq","line":897,"kind":"def","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#addEquivOfAddOrderOfEq","doc":"Given two additive groups that are generated by elements `g` and `g'` of the same order,\nwe obtain an isomorphism sending `g` to `g'`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#addEquivOfAddOrderOfEq\"><span class=\"name\">addEquivOfAddOrderOfEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#AddSubgroup.zmultiples\">AddSubgroup.zmultiples</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g'</span> : <span class=\"fn\">G'</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg'</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">G'</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#AddSubgroup.zmultiples\">AddSubgroup.zmultiples</a> <span class=\"fn\">g'</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">g'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv\">≃+</a> <span class=\"fn\">G'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L895-L906","name":"mulEquivOfOrderOfEq","line":895,"kind":"def","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#mulEquivOfOrderOfEq","doc":"Given two groups that are generated by elements `g` and `g'` of the same order,\nwe obtain an isomorphism sending `g` to `g'`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#mulEquivOfOrderOfEq\"><span class=\"name\">mulEquivOfOrderOfEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#Subgroup.zpowers\">Subgroup.zpowers</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g'</span> : <span class=\"fn\">G'</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg'</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">G'</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#Subgroup.zpowers\">Subgroup.zpowers</a> <span class=\"fn\">g'</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#orderOf\">orderOf</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#orderOf\">orderOf</a> <span class=\"fn\">g'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv\">≃*</a> <span class=\"fn\">G'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L884-L886","name":"AddEquiv.eq_iff_eq_on_generator","line":884,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#AddEquiv.eq_iff_eq_on_generator","doc":"Two isomorphisms `G ≃+ G'` of additive groups are equal if and only if they agree\non a generator of `G`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#AddEquiv.eq_iff_eq_on_generator\"><span class=\"name\">AddEquiv</span>.<span class=\"name\">eq_iff_eq_on_generator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#AddSubgroup.zmultiples\">AddSubgroup.zmultiples</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f₁ </span><span class=\"fn\">f₂</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv\">≃+</a> <span class=\"fn\">G'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L883-L889","name":"MulEquiv.eq_iff_eq_on_generator","line":883,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#MulEquiv.eq_iff_eq_on_generator","doc":"Two group isomorphisms `G ≃* G'` are equal if and only if they agree on a generator of `G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#MulEquiv.eq_iff_eq_on_generator\"><span class=\"name\">MulEquiv</span>.<span class=\"name\">eq_iff_eq_on_generator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#Subgroup.zpowers\">Subgroup.zpowers</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f₁ </span><span class=\"fn\">f₂</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv\">≃*</a> <span class=\"fn\">G'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L874-L876","name":"AddMonoidHom.eq_iff_eq_on_generator","line":874,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#AddMonoidHom.eq_iff_eq_on_generator","doc":"Two homomorphisms `G →+ G'` of additive groups are equal if and only if they agree\non a generator of `G`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#AddMonoidHom.eq_iff_eq_on_generator\"><span class=\"name\">AddMonoidHom</span>.<span class=\"name\">eq_iff_eq_on_generator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#AddSubgroup.zmultiples\">AddSubgroup.zmultiples</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f₁ </span><span class=\"fn\">f₂</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">G'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L873-L881","name":"MonoidHom.eq_iff_eq_on_generator","line":873,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#MonoidHom.eq_iff_eq_on_generator","doc":"Two group homomorphisms `G →* G'` are equal if and only if they agree on a generator of `G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#MonoidHom.eq_iff_eq_on_generator\"><span class=\"name\">MonoidHom</span>.<span class=\"name\">eq_iff_eq_on_generator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#Subgroup.zpowers\">Subgroup.zpowers</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f₁ </span><span class=\"fn\">f₂</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">G'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L859-L859","name":"addMonoidHomOfForallMemZmultiples_apply_gen","line":859,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#addMonoidHomOfForallMemZmultiples_apply_gen","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#addMonoidHomOfForallMemZmultiples_apply_gen\"><span class=\"name\">addMonoidHomOfForallMemZmultiples_apply_gen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#AddSubgroup.zmultiples\">AddSubgroup.zmultiples</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g'</span> : <span class=\"fn\">G'</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg'</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">g'</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#addMonoidHomOfForallMemZmultiples\">addMonoidHomOfForallMemZmultiples</a> <span class=\"fn\">hg</span> <span class=\"fn\">hg'</span>)</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L859-L867","name":"monoidHomOfForallMemZpowers_apply_gen","line":859,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#monoidHomOfForallMemZpowers_apply_gen","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#monoidHomOfForallMemZpowers_apply_gen\"><span class=\"name\">monoidHomOfForallMemZpowers_apply_gen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#Subgroup.zpowers\">Subgroup.zpowers</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g'</span> : <span class=\"fn\">G'</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg'</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#orderOf\">orderOf</a> <span class=\"fn\">g'</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#orderOf\">orderOf</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#monoidHomOfForallMemZpowers\">monoidHomOfForallMemZpowers</a> <span class=\"fn\">hg</span> <span class=\"fn\">hg'</span>)</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L844-L846","name":"addMonoidHomOfForallMemZmultiples","line":844,"kind":"def","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#addMonoidHomOfForallMemZmultiples","doc":"If `g` generates the additive group `G` and `g'` is an element of another additive group `G'`\nwhose order divides that of `g`, then there is a homomorphism `G →+ G'` mapping `g` to `g'`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#addMonoidHomOfForallMemZmultiples\"><span class=\"name\">addMonoidHomOfForallMemZmultiples</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#AddSubgroup.zmultiples\">AddSubgroup.zmultiples</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g'</span> : <span class=\"fn\">G'</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg'</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">g'</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">G'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L842-L857","name":"monoidHomOfForallMemZpowers","line":842,"kind":"def","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#monoidHomOfForallMemZpowers","doc":"If `g` generates the group `G` and `g'` is an element of another group `G'` whose order\ndivides that of `g`, then there is a homomorphism `G →* G'` mapping `g` to `g'`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#monoidHomOfForallMemZpowers\"><span class=\"name\">monoidHomOfForallMemZpowers</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#Subgroup.zpowers\">Subgroup.zpowers</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g'</span> : <span class=\"fn\">G'</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg'</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#orderOf\">orderOf</a> <span class=\"fn\">g'</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#orderOf\">orderOf</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">G'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L815-L815","name":"IsAddCyclic.index_nsmulAddMonoidHom_range","line":815,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.index_nsmulAddMonoidHom_range","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.index_nsmulAddMonoidHom_range\"><span class=\"name\">IsAddCyclic</span>.<span class=\"name\">index_nsmulAddMonoidHom_range</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Hom/Basic.html#nsmulAddMonoidHom\">nsmulAddMonoidHom</a> <span class=\"fn\">d</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Subgroup/Ker.html#AddMonoidHom.range\">range</a></span>.<a href=\"./Mathlib/GroupTheory/Index.html#AddSubgroup.index\">index</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span>)</span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">d</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L815-L818","name":"IsCyclic.index_powMonoidHom_range","line":815,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.index_powMonoidHom_range","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.index_powMonoidHom_range\"><span class=\"name\">IsCyclic</span>.<span class=\"name\">index_powMonoidHom_range</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Hom/Basic.html#powMonoidHom\">powMonoidHom</a> <span class=\"fn\">d</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Subgroup/Ker.html#MonoidHom.range\">range</a></span>.<a href=\"./Mathlib/GroupTheory/Index.html#Subgroup.index\">index</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span>)</span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">d</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L808-L808","name":"IsAddCyclic.card_nsmulAddMonoidHom_ker","line":808,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.card_nsmulAddMonoidHom_ker","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.card_nsmulAddMonoidHom_ker\"><span class=\"name\">IsAddCyclic</span>.<span class=\"name\">card_nsmulAddMonoidHom_ker</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">↥<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Hom/Basic.html#nsmulAddMonoidHom\">nsmulAddMonoidHom</a> <span class=\"fn\">d</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Subgroup/Ker.html#AddMonoidHom.ker\">ker</a></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span>)</span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">d</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L808-L813","name":"IsCyclic.card_powMonoidHom_ker","line":808,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.card_powMonoidHom_ker","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.card_powMonoidHom_ker\"><span class=\"name\">IsCyclic</span>.<span class=\"name\">card_powMonoidHom_ker</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">↥<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Hom/Basic.html#powMonoidHom\">powMonoidHom</a> <span class=\"fn\">d</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Subgroup/Ker.html#MonoidHom.ker\">ker</a></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span>)</span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">d</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L803-L803","name":"IsAddCyclic.index_nsmulAddMonoidHom_ker","line":803,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.index_nsmulAddMonoidHom_ker","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.index_nsmulAddMonoidHom_ker\"><span class=\"name\">IsAddCyclic</span>.<span class=\"name\">index_nsmulAddMonoidHom_ker</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Hom/Basic.html#nsmulAddMonoidHom\">nsmulAddMonoidHom</a> <span class=\"fn\">d</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Subgroup/Ker.html#AddMonoidHom.ker\">ker</a></span>.<a href=\"./Mathlib/GroupTheory/Index.html#AddSubgroup.index\">index</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span>)</span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">d</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L803-L806","name":"IsCyclic.index_powMonoidHom_ker","line":803,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.index_powMonoidHom_ker","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.index_powMonoidHom_ker\"><span class=\"name\">IsCyclic</span>.<span class=\"name\">index_powMonoidHom_ker</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Hom/Basic.html#powMonoidHom\">powMonoidHom</a> <span class=\"fn\">d</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Subgroup/Ker.html#MonoidHom.ker\">ker</a></span>.<a href=\"./Mathlib/GroupTheory/Index.html#Subgroup.index\">index</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span>)</span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">d</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L796-L796","name":"IsAddCyclic.card_nsmulAddMonoidHom_range","line":796,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.card_nsmulAddMonoidHom_range","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.card_nsmulAddMonoidHom_range\"><span class=\"name\">IsAddCyclic</span>.<span class=\"name\">card_nsmulAddMonoidHom_range</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hG</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">↥<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Hom/Basic.html#nsmulAddMonoidHom\">nsmulAddMonoidHom</a> <span class=\"fn\">d</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Subgroup/Ker.html#AddMonoidHom.range\">range</a></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span>)</span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">d</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L796-L801","name":"IsCyclic.card_powMonoidHom_range","line":796,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.card_powMonoidHom_range","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.card_powMonoidHom_range\"><span class=\"name\">IsCyclic</span>.<span class=\"name\">card_powMonoidHom_range</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hG</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">↥<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Hom/Basic.html#powMonoidHom\">powMonoidHom</a> <span class=\"fn\">d</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Subgroup/Ker.html#MonoidHom.range\">range</a></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span>)</span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">d</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L781-L785","name":"IsCyclic.card_mulAut","line":781,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.card_mulAut","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.card_mulAut\"><span class=\"name\">IsCyclic</span>.<span class=\"name\">card_mulAut</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/End.html#MulAut\">MulAut</a> <span class=\"fn\">G</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/Data/Nat/Totient.html#Nat.totient\">totient</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L774-L774","name":"IsCyclic.val_inv_mulAutMulEquiv_apply","line":774,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.val_inv_mulAutMulEquiv_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.val_inv_mulAutMulEquiv_apply\"><span class=\"name\">IsCyclic</span>.<span class=\"name\">val_inv_mulAutMulEquiv_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/End.html#MulAut\">MulAut</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.mulAutMulEquiv\">mulAutMulEquiv</a> <span class=\"fn\">G</span>)</span> <span class=\"fn\">a✝</span>)</span><a href=\"./Mathlib/Algebra/Notation/Defs.html#Inv.inv\">⁻¹</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags/Basic.html#Multiplicative.toAdd\">Multiplicative.toAdd</a>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#zmodCyclicMulEquiv\">zmodCyclicMulEquiv</a> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv.symm\">symm</a></span> <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv.symm\">MulEquiv.symm</a> <span class=\"fn\">a✝</span>)</span> <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#zmodCyclicMulEquiv\">zmodCyclicMulEquiv</a> <span class=\"fn\">h</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/TypeTags/Basic.html#Multiplicative.ofAdd\">Multiplicative.ofAdd</a> <span class=\"fn\">1</span>)</span>)</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L774-L774","name":"IsCyclic.val_mulAutMulEquiv_apply","line":774,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.val_mulAutMulEquiv_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.val_mulAutMulEquiv_apply\"><span class=\"name\">IsCyclic</span>.<span class=\"name\">val_mulAutMulEquiv_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/End.html#MulAut\">MulAut</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.mulAutMulEquiv\">mulAutMulEquiv</a> <span class=\"fn\">G</span>)</span> <span class=\"fn\">a✝</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags/Basic.html#Multiplicative.toAdd\">Multiplicative.toAdd</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#zmodCyclicMulEquiv\">zmodCyclicMulEquiv</a> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv.symm\">symm</a></span> <span class=\"fn\">(<span class=\"fn\">a✝</span> <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#zmodCyclicMulEquiv\">zmodCyclicMulEquiv</a> <span class=\"fn\">h</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/TypeTags/Basic.html#Multiplicative.ofAdd\">Multiplicative.ofAdd</a> <span class=\"fn\">1</span>)</span>)</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L774-L774","name":"IsCyclic.mulAutMulEquiv_symm_apply_apply","line":774,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.mulAutMulEquiv_symm_apply_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.mulAutMulEquiv_symm_apply_apply\"><span class=\"name\">IsCyclic</span>.<span class=\"name\">mulAutMulEquiv_symm_apply_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">(<a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span>)</span>)</span><a href=\"./Mathlib/Algebra/Group/Units/Defs.html#Units\">ˣ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝¹</span> : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.mulAutMulEquiv\">mulAutMulEquiv</a> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv.symm\">symm</a></span> <span class=\"fn\">a✝</span>)</span> <span class=\"fn\">a✝¹</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#zmodCyclicMulEquiv\">zmodCyclicMulEquiv</a> <span class=\"fn\">h</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/TypeTags/Basic.html#Multiplicative.ofAdd\">Multiplicative.ofAdd</a> (<span class=\"fn\">a✝</span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags/Basic.html#Multiplicative.toAdd\">Multiplicative.toAdd</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#zmodCyclicMulEquiv\">zmodCyclicMulEquiv</a> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv.symm\">symm</a></span> <span class=\"fn\">a✝¹</span>)</span></span>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L774-L774","name":"IsCyclic.mulAutMulEquiv_symm_apply_symm_apply","line":774,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.mulAutMulEquiv_symm_apply_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.mulAutMulEquiv_symm_apply_symm_apply\"><span class=\"name\">IsCyclic</span>.<span class=\"name\">mulAutMulEquiv_symm_apply_symm_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">(<a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span>)</span>)</span><a href=\"./Mathlib/Algebra/Group/Units/Defs.html#Units\">ˣ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝¹</span> : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv.symm\">MulEquiv.symm</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.mulAutMulEquiv\">mulAutMulEquiv</a> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv.symm\">symm</a></span> <span class=\"fn\">a✝</span>)</span>)</span> <span class=\"fn\">a✝¹</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#zmodCyclicMulEquiv\">zmodCyclicMulEquiv</a> <span class=\"fn\">h</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/TypeTags/Basic.html#Multiplicative.ofAdd\">Multiplicative.ofAdd</a> (<span class=\"fn\">a✝</span><a href=\"./Mathlib/Algebra/Notation/Defs.html#Inv.inv\">⁻¹</a> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags/Basic.html#Multiplicative.toAdd\">Multiplicative.toAdd</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#zmodCyclicMulEquiv\">zmodCyclicMulEquiv</a> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv.symm\">symm</a></span> <span class=\"fn\">a✝¹</span>)</span></span>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L773-L778","name":"IsCyclic.mulAutMulEquiv","line":773,"kind":"def","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.mulAutMulEquiv","doc":"The automorphism group of a cyclic group is isomorphic to the multiplicative group of ZMod. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.mulAutMulEquiv\"><span class=\"name\">IsCyclic</span>.<span class=\"name\">mulAutMulEquiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/End.html#MulAut\">MulAut</a> <span class=\"fn\">G</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv\">≃*</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span>)</span>)</span><a href=\"./Mathlib/Algebra/Group/Units/Defs.html#Units\">ˣ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L764-L764","name":"addEquivOfPrimeCardEq","line":764,"kind":"def","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#addEquivOfPrimeCardEq","doc":"Two additive groups of the same prime cardinality are isomorphic."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#addEquivOfPrimeCardEq\"><span class=\"name\">addEquivOfPrimeCardEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hG</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hH</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv\">≃+</a> <span class=\"fn\">G'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L763-L770","name":"mulEquivOfPrimeCardEq","line":763,"kind":"def","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#mulEquivOfPrimeCardEq","doc":"Two groups of the same prime cardinality are isomorphic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#mulEquivOfPrimeCardEq\"><span class=\"name\">mulEquivOfPrimeCardEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hG</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hH</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv\">≃*</a> <span class=\"fn\">G'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L757-L761","name":"mulEquivOfCyclicCardEq","line":757,"kind":"def","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#mulEquivOfCyclicCardEq","doc":"Two cyclic groups of the same cardinality are isomorphic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#mulEquivOfCyclicCardEq\"><span class=\"name\">mulEquivOfCyclicCardEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hG</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hH</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcard</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv\">≃*</a> <span class=\"fn\">G'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L752-L755","name":"addEquivOfAddCyclicCardEq","line":752,"kind":"def","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#addEquivOfAddCyclicCardEq","doc":"Two cyclic additive groups of the same cardinality are isomorphic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#addEquivOfAddCyclicCardEq\"><span class=\"name\">addEquivOfAddCyclicCardEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hG</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hH</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcard</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv\">≃+</a> <span class=\"fn\">G'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L746-L750","name":"zmodCyclicMulEquiv","line":746,"kind":"def","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#zmodCyclicMulEquiv","doc":"The isomorphism from `Multiplicative (ZMod n)` to any cyclic group of `Nat.card` equal to `n`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#zmodCyclicMulEquiv\"><span class=\"name\">zmodCyclicMulEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags/Basic.html#Multiplicative\">Multiplicative</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span>)</span>)</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv\">≃*</a> <span class=\"fn\">G</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L732-L744","name":"zmodAddCyclicAddEquiv","line":732,"kind":"def","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#zmodAddCyclicAddEquiv","doc":"The isomorphism from `ZMod n` to any cyclic additive group of `Nat.card` equal to `n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#zmodAddCyclicAddEquiv\"><span class=\"name\">zmodAddCyclicAddEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span>)</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv\">≃+</a> <span class=\"fn\">G</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L727-L730","name":"zpowersHom_ker_eq","line":727,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#zpowersHom_ker_eq","doc":"The kernel of `zpowersHom G g` is equal to the subgroup generated by `orderOf g`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#zpowersHom_ker_eq\"><span class=\"name\">zpowersHom_ker_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/Data/Int/Cast/Lemmas.html#zpowersHom\">zpowersHom</a> <span class=\"fn\">G</span>)</span> <span class=\"fn\">g</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Subgroup/Ker.html#MonoidHom.ker\">ker</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#Subgroup.zpowers\">Subgroup.zpowers</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/TypeTags/Basic.html#Multiplicative.ofAdd\">Multiplicative.ofAdd</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/OrderOfElement.html#orderOf\">orderOf</a> <span class=\"fn\">g</span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L719-L725","name":"zmultiplesHom_ker_eq","line":719,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#zmultiplesHom_ker_eq","doc":"The kernel of `zmultiplesHom G g` is equal to the additive subgroup generated by\n`addOrderOf g`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#zmultiplesHom_ker_eq\"><span class=\"name\">zmultiplesHom_ker_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/Data/Int/Cast/Lemmas.html#zmultiplesHom\">zmultiplesHom</a> <span class=\"fn\">G</span>)</span> <span class=\"fn\">g</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Subgroup/Ker.html#AddMonoidHom.ker\">ker</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#AddSubgroup.zmultiples\">AddSubgroup.zmultiples</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">g</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L687-L687","name":"not_isAddCyclic_iff_exponent_eq_prime","line":687,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#not_isAddCyclic_iff_exponent_eq_prime","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#not_isAddCyclic_iff_exponent_eq_prime\"><span class=\"name\">not_isAddCyclic_iff_exponent_eq_prime</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hα</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Exponent.html#AddMonoid.exponent\">AddMonoid.exponent</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L686-L711","name":"not_isCyclic_iff_exponent_eq_prime","line":686,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#not_isCyclic_iff_exponent_eq_prime","doc":"A group of order `p ^ 2` is not cyclic if and only if its exponent is `p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#not_isCyclic_iff_exponent_eq_prime\"><span class=\"name\">not_isCyclic_iff_exponent_eq_prime</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hα</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Exponent.html#Monoid.exponent\">Monoid.exponent</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L682-L684","name":"ZMod.exponent","line":682,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#ZMod.exponent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#ZMod.exponent\"><span class=\"name\">ZMod</span>.<span class=\"name\">exponent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Exponent.html#AddMonoid.exponent\">AddMonoid.exponent</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L676-L676","name":"IsAddCyclic.exponent_eq_zero_of_infinite","line":676,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.exponent_eq_zero_of_infinite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.exponent_eq_zero_of_infinite\"><span class=\"name\">IsAddCyclic</span>.<span class=\"name\">exponent_eq_zero_of_infinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Infinite\">Infinite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Exponent.html#AddMonoid.exponent\">AddMonoid.exponent</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L676-L680","name":"IsCyclic.exponent_eq_zero_of_infinite","line":676,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.exponent_eq_zero_of_infinite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.exponent_eq_zero_of_infinite\"><span class=\"name\">IsCyclic</span>.<span class=\"name\">exponent_eq_zero_of_infinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Infinite\">Infinite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Exponent.html#Monoid.exponent\">Monoid.exponent</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L671-L671","name":"IsAddCyclic.iff_exponent_eq_card","line":671,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.iff_exponent_eq_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.iff_exponent_eq_card\"><span class=\"name\">IsAddCyclic</span>.<span class=\"name\">iff_exponent_eq_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Exponent.html#AddMonoid.exponent\">AddMonoid.exponent</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L671-L674","name":"IsCyclic.iff_exponent_eq_card","line":671,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.iff_exponent_eq_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.iff_exponent_eq_card\"><span class=\"name\">IsCyclic</span>.<span class=\"name\">iff_exponent_eq_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Exponent.html#Monoid.exponent\">Monoid.exponent</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L664-L664","name":"IsAddCyclic.of_exponent_eq_card","line":664,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.of_exponent_eq_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.of_exponent_eq_card\"><span class=\"name\">IsAddCyclic</span>.<span class=\"name\">of_exponent_eq_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Exponent.html#AddMonoid.exponent\">AddMonoid.exponent</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L664-L669","name":"IsCyclic.of_exponent_eq_card","line":664,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.of_exponent_eq_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.of_exponent_eq_card\"><span class=\"name\">IsCyclic</span>.<span class=\"name\">of_exponent_eq_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Exponent.html#Monoid.exponent\">Monoid.exponent</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L656-L656","name":"IsAddCyclic.exponent_eq_card","line":656,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.exponent_eq_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.exponent_eq_card\"><span class=\"name\">IsAddCyclic</span>.<span class=\"name\">exponent_eq_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Exponent.html#AddMonoid.exponent\">AddMonoid.exponent</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L656-L662","name":"IsCyclic.exponent_eq_card","line":656,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.exponent_eq_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.exponent_eq_card\"><span class=\"name\">IsCyclic</span>.<span class=\"name\">exponent_eq_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Exponent.html#Monoid.exponent\">Monoid.exponent</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L646-L648","name":"ZMod.instIsSimpleAddGroup","line":646,"kind":"instance","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#ZMod.instIsSimpleAddGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#ZMod.instIsSimpleAddGroup\"><span class=\"name\">ZMod</span>.<span class=\"name\">instIsSimpleAddGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Subgroup/Simple.html#IsSimpleAddGroup\">IsSimpleAddGroup</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">p</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L643-L644","name":"ZMod.instIsAddCyclic","line":643,"kind":"instance","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#ZMod.instIsAddCyclic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#ZMod.instIsAddCyclic\"><span class=\"name\">ZMod</span>.<span class=\"name\">instIsAddCyclic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L641-L641","name":"instIsAddCyclicInt","line":641,"kind":"instance","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#instIsAddCyclicInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#instIsAddCyclicInt\"><span class=\"name\">instIsAddCyclicInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L629-L629","name":"AddCommGroup.is_simple_iff_isAddCyclic_and_prime_card","line":629,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#AddCommGroup.is_simple_iff_isAddCyclic_and_prime_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#AddCommGroup.is_simple_iff_isAddCyclic_and_prime_card\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">is_simple_iff_isAddCyclic_and_prime_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Subgroup/Simple.html#IsSimpleAddGroup\">IsSimpleAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L629-L637","name":"CommGroup.is_simple_iff_isCyclic_and_prime_card","line":629,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#CommGroup.is_simple_iff_isCyclic_and_prime_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#CommGroup.is_simple_iff_isCyclic_and_prime_card\"><span class=\"name\">CommGroup</span>.<span class=\"name\">is_simple_iff_isCyclic_and_prime_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Subgroup/Simple.html#IsSimpleGroup\">IsSimpleGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L602-L602","name":"IsSimpleAddGroup.prime_card","line":602,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsSimpleAddGroup.prime_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsSimpleAddGroup.prime_card\"><span class=\"name\">IsSimpleAddGroup</span>.<span class=\"name\">prime_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Subgroup/Simple.html#IsSimpleAddGroup\">IsSimpleAddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L602-L623","name":"IsSimpleGroup.prime_card","line":602,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsSimpleGroup.prime_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsSimpleGroup.prime_card\"><span class=\"name\">IsSimpleGroup</span>.<span class=\"name\">prime_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Subgroup/Simple.html#IsSimpleGroup\">IsSimpleGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L594-L594","name":"IsSimpleAddGroup.isAddCyclic","line":594,"kind":"instance","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsSimpleAddGroup.isAddCyclic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsSimpleAddGroup.isAddCyclic\"><span class=\"name\">IsSimpleAddGroup</span>.<span class=\"name\">isAddCyclic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Subgroup/Simple.html#IsSimpleAddGroup\">IsSimpleAddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L594-L600","name":"IsSimpleGroup.isCyclic","line":594,"kind":"instance","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsSimpleGroup.isCyclic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsSimpleGroup.isCyclic\"><span class=\"name\">IsSimpleGroup</span>.<span class=\"name\">isCyclic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Subgroup/Simple.html#IsSimpleGroup\">IsSimpleGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L580-L581","name":"addCommGroupOfAddCyclicCenterQuotient","line":580,"kind":"def","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#addCommGroupOfAddCyclicCenterQuotient","doc":"A group is commutative if the quotient by the center is cyclic."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#addCommGroupOfAddCyclicCenterQuotient\"><span class=\"name\">addCommGroupOfAddCyclicCenterQuotient</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">G'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Group/Subgroup/Ker.html#AddMonoidHom.ker\">ker</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Subgroup/Center.html#AddSubgroup.center\">AddSubgroup.center</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L579-L584","name":"commGroupOfCyclicCenterQuotient","line":579,"kind":"def","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#commGroupOfCyclicCenterQuotient","doc":"A group is commutative if the quotient by the center is cyclic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#commGroupOfCyclicCenterQuotient\"><span class=\"name\">commGroupOfCyclicCenterQuotient</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">G'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Group/Subgroup/Ker.html#MonoidHom.ker\">ker</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Subgroup/Center.html#Subgroup.center\">Subgroup.center</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L557-L559","name":"commutative_of_addCyclic_center_quotient","line":557,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#commutative_of_addCyclic_center_quotient","doc":"A group is commutative if the quotient by the center is cyclic.\nAlso see `addCommGroupOfCyclicCenterQuotient` for the `AddCommGroup` instance."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#commutative_of_addCyclic_center_quotient\"><span class=\"name\">commutative_of_addCyclic_center_quotient</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">G'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Group/Subgroup/Ker.html#AddMonoidHom.ker\">ker</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Subgroup/Center.html#AddSubgroup.center\">AddSubgroup.center</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L555-L577","name":"commutative_of_cyclic_center_quotient","line":555,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#commutative_of_cyclic_center_quotient","doc":"A group is commutative if the quotient by the center is cyclic.\nAlso see `commGroupOfCyclicCenterQuotient` for the `CommGroup` instance. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#commutative_of_cyclic_center_quotient\"><span class=\"name\">commutative_of_cyclic_center_quotient</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">G'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Group/Subgroup/Ker.html#MonoidHom.ker\">ker</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Subgroup/Center.html#Subgroup.center\">Subgroup.center</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L539-L539","name":"isSimpleAddGroup_of_prime_card","line":539,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isSimpleAddGroup_of_prime_card","doc":"A finite group of prime order is simple."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isSimpleAddGroup_of_prime_card\"><span class=\"name\">isSimpleAddGroup_of_prime_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Subgroup/Simple.html#IsSimpleAddGroup\">IsSimpleAddGroup</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L538-L545","name":"isSimpleGroup_of_prime_card","line":538,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isSimpleGroup_of_prime_card","doc":"A finite group of prime order is simple. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isSimpleGroup_of_prime_card\"><span class=\"name\">isSimpleGroup_of_prime_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Subgroup/Simple.html#IsSimpleGroup\">IsSimpleGroup</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L533-L533","name":"IsAddCyclic.card_addOrderOf_eq_totient","line":533,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.card_addOrderOf_eq_totient","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.card_addOrderOf_eq_totient\"><span class=\"name\">IsAddCyclic</span>.<span class=\"name\">card_addOrderOf_eq_totient</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hd</span> : <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span> | <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span>}</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">d</span>.<a href=\"./Mathlib/Data/Nat/Totient.html#Nat.totient\">totient</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L533-L536","name":"IsCyclic.card_orderOf_eq_totient","line":533,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.card_orderOf_eq_totient","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.card_orderOf_eq_totient\"><span class=\"name\">IsCyclic</span>.<span class=\"name\">card_orderOf_eq_totient</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hd</span> : <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span> | <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#orderOf\">orderOf</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span>}</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">d</span>.<a href=\"./Mathlib/Data/Nat/Totient.html#Nat.totient\">totient</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L521-L521","name":"isAddCyclic_of_card_nsmul_eq_zero_le","line":521,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isAddCyclic_of_card_nsmul_eq_zero_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isAddCyclic_of_card_nsmul_eq_zero_le\"><span class=\"name\">isAddCyclic_of_card_nsmul_eq_zero_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> → <span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span> | <span class=\"fn\">n</span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>}</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L521-L529","name":"isCyclic_of_card_pow_eq_one_le","line":521,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isCyclic_of_card_pow_eq_one_le","doc":"[Stacks Tag 09HX](https://stacks.math.columbia.edu/tag/09HX) (This theorem is stronger than 09HX. It removes the abelian condition, and requires only `≤` instead of `=`.)"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isCyclic_of_card_pow_eq_one_le\"><span class=\"name\">isCyclic_of_card_pow_eq_one_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> → <span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span> | <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span>}</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L487-L487","name":"card_addOrderOf_eq_totient_aux₂","line":487,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#card_addOrderOf_eq_totient_aux₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#card_addOrderOf_eq_totient_aux₂\"><span class=\"name\">card_addOrderOf_eq_totient_aux₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> → <span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span> | <span class=\"fn\">n</span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>}</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hd</span> : <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span> | <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span>}</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">d</span>.<a href=\"./Mathlib/Data/Nat/Totient.html#Nat.totient\">totient</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L487-L519","name":"card_orderOf_eq_totient_aux₂","line":487,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#card_orderOf_eq_totient_aux₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#card_orderOf_eq_totient_aux₂\"><span class=\"name\">card_orderOf_eq_totient_aux₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> → <span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span> | <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span>}</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hd</span> : <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span> | <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#orderOf\">orderOf</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span>}</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">d</span>.<a href=\"./Mathlib/Data/Nat/Totient.html#Nat.totient\">totient</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L423-L423","name":"IsAddCyclic.ext","line":423,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.ext\"><span class=\"name\">IsAddCyclic</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">d</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hGcard</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">t</span> : <span class=\"fn\">G</span>), <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/Data/ZMod/Basic.html#ZMod.val\">val</a></span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/ZMod/Basic.html#ZMod.val\">val</a></span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L423-L432","name":"IsCyclic.ext","line":423,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.ext\"><span class=\"name\">IsCyclic</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">d</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hGcard</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">t</span> : <span class=\"fn\">G</span>), <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/Data/ZMod/Basic.html#ZMod.val\">val</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/ZMod/Basic.html#ZMod.val\">val</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L418-L418","name":"IsAddCyclic.image_range_card","line":418,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.image_range_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.image_range_card\"><span class=\"name\">IsAddCyclic</span>.<span class=\"name\">image_range_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#AddSubgroup.zmultiples\">AddSubgroup.zmultiples</a> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Image.html#Finset.image\">Finset.image</a> <span class=\"fn\">(fun (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">i</span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Range.html#Finset.range\">Finset.range</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Fintype/Defs.html#Finset.univ\">Finset.univ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L418-L421","name":"IsCyclic.image_range_card","line":418,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.image_range_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.image_range_card\"><span class=\"name\">IsCyclic</span>.<span class=\"name\">image_range_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#Subgroup.zpowers\">Subgroup.zpowers</a> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Image.html#Finset.image\">Finset.image</a> <span class=\"fn\">(fun (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Range.html#Finset.range\">Finset.range</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Fintype/Defs.html#Finset.univ\">Finset.univ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L412-L412","name":"IsAddCyclic.image_range_addOrderOf","line":412,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.image_range_addOrderOf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.image_range_addOrderOf\"><span class=\"name\">IsAddCyclic</span>.<span class=\"name\">image_range_addOrderOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#AddSubgroup.zmultiples\">AddSubgroup.zmultiples</a> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Image.html#Finset.image\">Finset.image</a> <span class=\"fn\">(fun (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">i</span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Range.html#Finset.range\">Finset.range</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">a</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Fintype/Defs.html#Finset.univ\">Finset.univ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L412-L416","name":"IsCyclic.image_range_orderOf","line":412,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.image_range_orderOf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.image_range_orderOf\"><span class=\"name\">IsCyclic</span>.<span class=\"name\">image_range_orderOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#Subgroup.zpowers\">Subgroup.zpowers</a> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Image.html#Finset.image\">Finset.image</a> <span class=\"fn\">(fun (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Range.html#Finset.range\">Finset.range</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/OrderOfElement.html#orderOf\">orderOf</a> <span class=\"fn\">a</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Fintype/Defs.html#Finset.univ\">Finset.univ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L399-L399","name":"IsAddCyclic.unique_zsmul_zmod","line":399,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.unique_zsmul_zmod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.unique_zsmul_zmod\"><span class=\"name\">IsAddCyclic</span>.<span class=\"name\">unique_zsmul_zmod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#AddSubgroup.zmultiples\">AddSubgroup.zmultiples</a> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">∃!</a> <span class=\"fn\">n</span> <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">α</span>)</span></span><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">,</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Data/ZMod/Basic.html#ZMod.val\">val</a></span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L399-L408","name":"IsCyclic.unique_zpow_zmod","line":399,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.unique_zpow_zmod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.unique_zpow_zmod\"><span class=\"name\">IsCyclic</span>.<span class=\"name\">unique_zpow_zmod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#Subgroup.zpowers\">Subgroup.zpowers</a> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">∃!</a> <span class=\"fn\">n</span> <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">α</span>)</span></span><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">,</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Data/ZMod/Basic.html#ZMod.val\">val</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L387-L393","name":"MulDistribMulAction.toMonoidHomZModOfIsCyclic_apply","line":387,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#MulDistribMulAction.toMonoidHomZModOfIsCyclic_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#MulDistribMulAction.toMonoidHomZModOfIsCyclic_apply\"><span class=\"name\">MulDistribMulAction</span>.<span class=\"name\">toMonoidHomZModOfIsCyclic_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#MulDistribMulAction\">MulDistribMulAction</a> <span class=\"fn\">M</span> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#MulDistribMulAction.toMonoidHomZModOfIsCyclic\">toMonoidHomZModOfIsCyclic</a> <span class=\"fn\">G</span> <span class=\"fn\">M</span> <span class=\"fn\">hn</span>)</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L368-L385","name":"MulDistribMulAction.toMonoidHomZModOfIsCyclic","line":368,"kind":"def","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#MulDistribMulAction.toMonoidHomZModOfIsCyclic","doc":"A distributive action of a monoid on a finite cyclic group of order `n` factors through an\naction on `ZMod n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#MulDistribMulAction.toMonoidHomZModOfIsCyclic\"><span class=\"name\">MulDistribMulAction</span>.<span class=\"name\">toMonoidHomZModOfIsCyclic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#MulDistribMulAction\">MulDistribMulAction</a> <span class=\"fn\">M</span> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L360-L360","name":"IsAddCyclic.exists_ofOrder_eq_natCard","line":360,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.exists_ofOrder_eq_natCard","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.exists_ofOrder_eq_natCard\"><span class=\"name\">IsAddCyclic</span>.<span class=\"name\">exists_ofOrder_eq_natCard</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">g</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L360-L365","name":"IsCyclic.exists_ofOrder_eq_natCard","line":360,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.exists_ofOrder_eq_natCard","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.exists_ofOrder_eq_natCard\"><span class=\"name\">IsCyclic</span>.<span class=\"name\">exists_ofOrder_eq_natCard</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">g</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#orderOf\">orderOf</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L354-L354","name":"IsAddCyclic.exists_addMonoid_generator","line":354,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.exists_addMonoid_generator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.exists_addMonoid_generator\"><span class=\"name\">IsAddCyclic</span>.<span class=\"name\">exists_addMonoid_generator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\">∀ (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Submonoid/Membership.html#AddSubmonoid.multiples\">AddSubmonoid.multiples</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L354-L358","name":"IsCyclic.exists_monoid_generator","line":354,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.exists_monoid_generator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.exists_monoid_generator\"><span class=\"name\">IsCyclic</span>.<span class=\"name\">exists_monoid_generator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\">∀ (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Submonoid/Membership.html#Submonoid.powers\">Submonoid.powers</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L317-L317","name":"IsAddCyclic.card_nsmul_eq_zero_le","line":317,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.card_nsmul_eq_zero_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.card_nsmul_eq_zero_le\"><span class=\"name\">IsAddCyclic</span>.<span class=\"name\">card_nsmul_eq_zero_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn0</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span> | <span class=\"fn\">n</span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>}</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L317-L350","name":"IsCyclic.card_pow_eq_one_le","line":317,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.card_pow_eq_one_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.card_pow_eq_one_le\"><span class=\"name\">IsCyclic</span>.<span class=\"name\">card_pow_eq_one_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn0</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span> | <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span>}</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L308-L308","name":"AddSubgroup.isAddCyclic_of_le","line":308,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#AddSubgroup.isAddCyclic_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#AddSubgroup.isAddCyclic_of_le\"><span class=\"name\">AddSubgroup</span>.<span class=\"name\">isAddCyclic_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H </span><span class=\"fn\">H'</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/Defs.html#AddSubgroup\">AddSubgroup</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">H'</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">↥<span class=\"fn\">H'</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">↥<span class=\"fn\">H</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L308-L310","name":"Subgroup.isCyclic_of_le","line":308,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#Subgroup.isCyclic_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#Subgroup.isCyclic_of_le\"><span class=\"name\">Subgroup</span>.<span class=\"name\">isCyclic_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H </span><span class=\"fn\">H'</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/Defs.html#Subgroup\">Subgroup</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">H'</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">↥<span class=\"fn\">H'</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">↥<span class=\"fn\">H</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L303-L303","name":"isAddCyclic_of_injective","line":303,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isAddCyclic_of_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isAddCyclic_of_injective\"><span class=\"name\">isAddCyclic_of_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">G'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L303-L306","name":"isCyclic_of_injective","line":303,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isCyclic_of_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isCyclic_of_injective\"><span class=\"name\">isCyclic_of_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">G'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L254-L254","name":"AddSubgroup.isAddCyclic","line":254,"kind":"instance","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#AddSubgroup.isAddCyclic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#AddSubgroup.isAddCyclic\"><span class=\"name\">AddSubgroup</span>.<span class=\"name\">isAddCyclic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/Defs.html#AddSubgroup\">AddSubgroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">↥<span class=\"fn\">H</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L254-L301","name":"Subgroup.isCyclic","line":254,"kind":"instance","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#Subgroup.isCyclic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#Subgroup.isCyclic\"><span class=\"name\">Subgroup</span>.<span class=\"name\">isCyclic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/Defs.html#Subgroup\">Subgroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">↥<span class=\"fn\">H</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L250-L250","name":"Bot.isAddCyclic","line":250,"kind":"instance","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#Bot.isAddCyclic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#Bot.isAddCyclic\"><span class=\"name\">Bot</span>.<span class=\"name\">isAddCyclic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">↥<a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L250-L252","name":"Bot.isCyclic","line":250,"kind":"instance","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#Bot.isCyclic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#Bot.isCyclic\"><span class=\"name\">Bot</span>.<span class=\"name\">isCyclic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">↥<a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L245-L245","name":"Infinite.addOrderOf_eq_zero_of_forall_mem_zmultiples","line":245,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#Infinite.addOrderOf_eq_zero_of_forall_mem_zmultiples","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#Infinite.addOrderOf_eq_zero_of_forall_mem_zmultiples\"><span class=\"name\">Infinite</span>.<span class=\"name\">addOrderOf_eq_zero_of_forall_mem_zmultiples</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Infinite\">Infinite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#AddSubgroup.zmultiples\">AddSubgroup.zmultiples</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L245-L248","name":"Infinite.orderOf_eq_zero_of_forall_mem_zpowers","line":245,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#Infinite.orderOf_eq_zero_of_forall_mem_zpowers","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#Infinite.orderOf_eq_zero_of_forall_mem_zpowers\"><span class=\"name\">Infinite</span>.<span class=\"name\">orderOf_eq_zero_of_forall_mem_zpowers</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Infinite\">Infinite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#Subgroup.zpowers\">Subgroup.zpowers</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#orderOf\">orderOf</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L234-L234","name":"exists_nsmul_ne_zero_of_isAddCyclic","line":234,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#exists_nsmul_ne_zero_of_isAddCyclic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#exists_nsmul_ne_zero_of_isAddCyclic\"><span class=\"name\">exists_nsmul_ne_zero_of_isAddCyclic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">G_cyclic</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_pos</span> : <span class=\"fn\">k</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_lt_card_G</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">G</span>), <span class=\"fn\">k</span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L234-L243","name":"exists_pow_ne_one_of_isCyclic","line":234,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#exists_pow_ne_one_of_isCyclic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#exists_pow_ne_one_of_isCyclic\"><span class=\"name\">exists_pow_ne_one_of_isCyclic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">G_cyclic</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_pos</span> : <span class=\"fn\">k</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_lt_card_G</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">G</span>), <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">k</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L229-L229","name":"addOrderOf_eq_card_of_zmultiples_eq_top","line":229,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#addOrderOf_eq_card_of_zmultiples_eq_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#addOrderOf_eq_card_of_zmultiples_eq_top\"><span class=\"name\">addOrderOf_eq_card_of_zmultiples_eq_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#AddSubgroup.zmultiples\">AddSubgroup.zmultiples</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L229-L232","name":"orderOf_eq_card_of_zpowers_eq_top","line":229,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#orderOf_eq_card_of_zpowers_eq_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#orderOf_eq_card_of_zpowers_eq_top\"><span class=\"name\">orderOf_eq_card_of_zpowers_eq_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#Subgroup.zpowers\">Subgroup.zpowers</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#orderOf\">orderOf</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L226-L227","name":"addOrderOf_generator_eq_natCard","line":226,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#addOrderOf_generator_eq_natCard","doc":"**Alias** of `addOrderOf_eq_card_of_forall_mem_zmultiples`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#addOrderOf_generator_eq_natCard\"><span class=\"name\">addOrderOf_generator_eq_natCard</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#AddSubgroup.zmultiples\">AddSubgroup.zmultiples</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L223-L224","name":"orderOf_generator_eq_natCard","line":223,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#orderOf_generator_eq_natCard","doc":"**Alias** of `orderOf_eq_card_of_forall_mem_zpowers`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#orderOf_generator_eq_natCard\"><span class=\"name\">orderOf_generator_eq_natCard</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#Subgroup.zpowers\">Subgroup.zpowers</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#orderOf\">orderOf</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L218-L218","name":"addOrderOf_eq_card_of_forall_mem_zmultiples","line":218,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#addOrderOf_eq_card_of_forall_mem_zmultiples","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#addOrderOf_eq_card_of_forall_mem_zmultiples\"><span class=\"name\">addOrderOf_eq_card_of_forall_mem_zmultiples</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#AddSubgroup.zmultiples\">AddSubgroup.zmultiples</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L218-L221","name":"orderOf_eq_card_of_forall_mem_zpowers","line":218,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#orderOf_eq_card_of_forall_mem_zpowers","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#orderOf_eq_card_of_forall_mem_zpowers\"><span class=\"name\">orderOf_eq_card_of_forall_mem_zpowers</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#Subgroup.zpowers\">Subgroup.zpowers</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#orderOf\">orderOf</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L208-L208","name":"isAddCyclic_of_surjective","line":208,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isAddCyclic_of_surjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isAddCyclic_of_surjective\"><span class=\"name\">isAddCyclic_of_surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hH</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <span class=\"fn\">G'</span> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHomClass\">AddMonoidHomClass</a> <span class=\"fn\">F</span> <span class=\"fn\">G'</span> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L208-L216","name":"isCyclic_of_surjective","line":208,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isCyclic_of_surjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isCyclic_of_surjective\"><span class=\"name\">isCyclic_of_surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hH</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">G'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <span class=\"fn\">G'</span> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHomClass\">MonoidHomClass</a> <span class=\"fn\">F</span> <span class=\"fn\">G'</span> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L201-L201","name":"isAddCyclic_of_card_dvd_prime","line":201,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isAddCyclic_of_card_dvd_prime","doc":"A finite group of order dividing a prime is cyclic."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isAddCyclic_of_card_dvd_prime\"><span class=\"name\">isAddCyclic_of_card_dvd_prime</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L200-L206","name":"isCyclic_of_card_dvd_prime","line":200,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isCyclic_of_card_dvd_prime","doc":"A finite group of order dividing a prime is cyclic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isCyclic_of_card_dvd_prime\"><span class=\"name\">isCyclic_of_card_dvd_prime</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L192-L192","name":"isAddCyclic_of_prime_card","line":192,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isAddCyclic_of_prime_card","doc":"A finite group of prime order is cyclic."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isAddCyclic_of_prime_card\"><span class=\"name\">isAddCyclic_of_prime_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L191-L198","name":"isCyclic_of_prime_card","line":191,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isCyclic_of_prime_card","doc":"A finite group of prime order is cyclic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isCyclic_of_prime_card\"><span class=\"name\">isCyclic_of_prime_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L185-L185","name":"multiples_eq_top_of_prime_card","line":185,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#multiples_eq_top_of_prime_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#multiples_eq_top_of_prime_card\"><span class=\"name\">multiples_eq_top_of_prime_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">g</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Submonoid/Membership.html#AddSubmonoid.multiples\">AddSubmonoid.multiples</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L185-L189","name":"powers_eq_top_of_prime_card","line":185,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#powers_eq_top_of_prime_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#powers_eq_top_of_prime_card\"><span class=\"name\">powers_eq_top_of_prime_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">g</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Submonoid/Membership.html#Submonoid.powers\">Submonoid.powers</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L178-L178","name":"mem_multiples_of_prime_card","line":178,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#mem_multiples_of_prime_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#mem_multiples_of_prime_card\"><span class=\"name\">mem_multiples_of_prime_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g </span><span class=\"fn\">g'</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">g</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">g'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Submonoid/Membership.html#AddSubmonoid.multiples\">AddSubmonoid.multiples</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L178-L183","name":"mem_powers_of_prime_card","line":178,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#mem_powers_of_prime_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#mem_powers_of_prime_card\"><span class=\"name\">mem_powers_of_prime_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g </span><span class=\"fn\">g'</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">g</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">g'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Submonoid/Membership.html#Submonoid.powers\">Submonoid.powers</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L173-L173","name":"mem_zmultiples_of_prime_card","line":173,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#mem_zmultiples_of_prime_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#mem_zmultiples_of_prime_card\"><span class=\"name\">mem_zmultiples_of_prime_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g </span><span class=\"fn\">g'</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">g</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">g'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#AddSubgroup.zmultiples\">AddSubgroup.zmultiples</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L173-L176","name":"mem_zpowers_of_prime_card","line":173,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#mem_zpowers_of_prime_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#mem_zpowers_of_prime_card\"><span class=\"name\">mem_zpowers_of_prime_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g </span><span class=\"fn\">g'</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">g</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">g'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#Subgroup.zpowers\">Subgroup.zpowers</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L166-L166","name":"zmultiples_eq_top_of_prime_card","line":166,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#zmultiples_eq_top_of_prime_card","doc":"Any non-identity element of a finite group of prime order generates the group."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#zmultiples_eq_top_of_prime_card\"><span class=\"name\">zmultiples_eq_top_of_prime_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">g</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#AddSubgroup.zmultiples\">AddSubgroup.zmultiples</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L165-L171","name":"zpowers_eq_top_of_prime_card","line":165,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#zpowers_eq_top_of_prime_card","doc":"Any non-identity element of a finite group of prime order generates the group. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#zpowers_eq_top_of_prime_card\"><span class=\"name\">zpowers_eq_top_of_prime_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">g</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#Subgroup.zpowers\">Subgroup.zpowers</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L158-L158","name":"AddSubgroup.eq_bot_or_eq_top_of_prime_card","line":158,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#AddSubgroup.eq_bot_or_eq_top_of_prime_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#AddSubgroup.eq_bot_or_eq_top_of_prime_card\"><span class=\"name\">AddSubgroup</span>.<span class=\"name\">eq_bot_or_eq_top_of_prime_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/Defs.html#AddSubgroup\">AddSubgroup</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span>)</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L158-L163","name":"Subgroup.eq_bot_or_eq_top_of_prime_card","line":158,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#Subgroup.eq_bot_or_eq_top_of_prime_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#Subgroup.eq_bot_or_eq_top_of_prime_card\"><span class=\"name\">Subgroup</span>.<span class=\"name\">eq_bot_or_eq_top_of_prime_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/Defs.html#Subgroup\">Subgroup</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">G</span>)</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L153-L153","name":"isAddCyclic_of_card_le_addOrderOf","line":153,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isAddCyclic_of_card_le_addOrderOf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isAddCyclic_of_card_le_addOrderOf\"><span class=\"name\">isAddCyclic_of_card_le_addOrderOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L153-L156","name":"isCyclic_of_card_le_orderOf","line":153,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isCyclic_of_card_le_orderOf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isCyclic_of_card_le_orderOf\"><span class=\"name\">isCyclic_of_card_le_orderOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#orderOf\">orderOf</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L148-L148","name":"isAddCyclic_of_addOrderOf_eq_card","line":148,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isAddCyclic_of_addOrderOf_eq_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isAddCyclic_of_addOrderOf_eq_card\"><span class=\"name\">isAddCyclic_of_addOrderOf_eq_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L148-L151","name":"isCyclic_of_orderOf_eq_card","line":148,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isCyclic_of_orderOf_eq_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isCyclic_of_orderOf_eq_card\"><span class=\"name\">isCyclic_of_orderOf_eq_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#orderOf\">orderOf</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L144-L146","name":"IsAddCyclic.iff_exists_ofOrder_eq_natCard_of_Fintype","line":144,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.iff_exists_ofOrder_eq_natCard_of_Fintype","doc":"**Alias** of `isAddCyclic_iff_exists_addOrderOf_eq_natCard`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.iff_exists_ofOrder_eq_natCard_of_Fintype\"><span class=\"name\">IsAddCyclic</span>.<span class=\"name\">iff_exists_ofOrder_eq_natCard_of_Fintype</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">g</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L140-L142","name":"IsCyclic.iff_exists_ofOrder_eq_natCard_of_Fintype","line":140,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.iff_exists_ofOrder_eq_natCard_of_Fintype","doc":"**Alias** of `isCyclic_iff_exists_orderOf_eq_natCard`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.iff_exists_ofOrder_eq_natCard_of_Fintype\"><span class=\"name\">IsCyclic</span>.<span class=\"name\">iff_exists_ofOrder_eq_natCard_of_Fintype</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">g</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#orderOf\">orderOf</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L137-L138","name":"isAddCyclic_iff_exists_ofOrder_eq_natCard","line":137,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isAddCyclic_iff_exists_ofOrder_eq_natCard","doc":"**Alias** of `isAddCyclic_iff_exists_addOrderOf_eq_natCard`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isAddCyclic_iff_exists_ofOrder_eq_natCard\"><span class=\"name\">isAddCyclic_iff_exists_ofOrder_eq_natCard</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">g</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L134-L135","name":"isCyclic_iff_exists_ofOrder_eq_natCard","line":134,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isCyclic_iff_exists_ofOrder_eq_natCard","doc":"**Alias** of `isCyclic_iff_exists_orderOf_eq_natCard`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isCyclic_iff_exists_ofOrder_eq_natCard\"><span class=\"name\">isCyclic_iff_exists_ofOrder_eq_natCard</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">g</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#orderOf\">orderOf</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L126-L126","name":"isAddCyclic_iff_exists_natCard_le_addOrderOf","line":126,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isAddCyclic_iff_exists_natCard_le_addOrderOf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isAddCyclic_iff_exists_natCard_le_addOrderOf\"><span class=\"name\">isAddCyclic_iff_exists_natCard_le_addOrderOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">g</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">g</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L126-L132","name":"isCyclic_iff_exists_natCard_le_orderOf","line":126,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isCyclic_iff_exists_natCard_le_orderOf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isCyclic_iff_exists_natCard_le_orderOf\"><span class=\"name\">isCyclic_iff_exists_natCard_le_orderOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">g</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#orderOf\">orderOf</a> <span class=\"fn\">g</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L121-L121","name":"isAddCyclic_iff_exists_addOrderOf_eq_natCard","line":121,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isAddCyclic_iff_exists_addOrderOf_eq_natCard","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isAddCyclic_iff_exists_addOrderOf_eq_natCard\"><span class=\"name\">isAddCyclic_iff_exists_addOrderOf_eq_natCard</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">g</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L121-L124","name":"isCyclic_iff_exists_orderOf_eq_natCard","line":121,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isCyclic_iff_exists_orderOf_eq_natCard","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isCyclic_iff_exists_orderOf_eq_natCard\"><span class=\"name\">isCyclic_iff_exists_orderOf_eq_natCard</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">g</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#orderOf\">orderOf</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L112-L112","name":"AddMonoidHom.map_addCyclic","line":112,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#AddMonoidHom.map_addCyclic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#AddMonoidHom.map_addCyclic\"><span class=\"name\">AddMonoidHom</span>.<span class=\"name\">map_addCyclic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>), <span class=\"fn\">∀ (<span class=\"fn\">g</span> : <span class=\"fn\">G</span>), <span class=\"fn\"><span class=\"fn\">σ</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">g</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L112-L119","name":"MonoidHom.map_cyclic","line":112,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#MonoidHom.map_cyclic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#MonoidHom.map_cyclic\"><span class=\"name\">MonoidHom</span>.<span class=\"name\">map_cyclic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>), <span class=\"fn\">∀ (<span class=\"fn\">g</span> : <span class=\"fn\">G</span>), <span class=\"fn\"><span class=\"fn\">σ</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L107-L107","name":"Nontrivial.of_not_isAddCyclic","line":107,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#Nontrivial.of_not_isAddCyclic","doc":"A non-cyclic additive group is non-trivial."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#Nontrivial.of_not_isAddCyclic\"><span class=\"name\">Nontrivial</span>.<span class=\"name\">of_not_isAddCyclic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nc</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Nontrivial/Defs.html#Nontrivial\">Nontrivial</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L106-L110","name":"Nontrivial.of_not_isCyclic","line":106,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#Nontrivial.of_not_isCyclic","doc":"A non-cyclic multiplicative group is non-trivial. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#Nontrivial.of_not_isCyclic\"><span class=\"name\">Nontrivial</span>.<span class=\"name\">of_not_isCyclic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nc</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Nontrivial/Defs.html#Nontrivial\">Nontrivial</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L101-L102","name":"instIsMulCommutativeSubtypeMemSubgroupOfIsCyclic","line":101,"kind":"instance","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#instIsMulCommutativeSubtypeMemSubgroupOfIsCyclic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#instIsMulCommutativeSubtypeMemSubgroupOfIsCyclic\"><span class=\"name\">instIsMulCommutativeSubtypeMemSubgroupOfIsCyclic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/Defs.html#Subgroup\">Subgroup</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">↥<span class=\"fn\">H</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsMulCommutative\">IsMulCommutative</a> <span class=\"fn\">↥<span class=\"fn\">H</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L95-L97","name":"IsAddCyclic.addCommGroup","line":95,"kind":"def","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.addCommGroup","doc":"A cyclic group is always commutative. This is not an `instance` because often we have\na better proof of `AddCommGroup`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.addCommGroup\"><span class=\"name\">IsAddCyclic</span>.<span class=\"name\">addCommGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L93-L99","name":"IsCyclic.commGroup","line":93,"kind":"def","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.commGroup","doc":"A cyclic group is always commutative. This is not an `instance` because often we have a better\nproof of `CommGroup`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.commGroup\"><span class=\"name\">IsCyclic</span>.<span class=\"name\">commGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L84-L84","name":"IsAddCyclic.commutative","line":84,"kind":"instance","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.commutative","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.commutative\"><span class=\"name\">IsAddCyclic</span>.<span class=\"name\">commutative</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L84-L91","name":"IsCyclic.commutative","line":84,"kind":"instance","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.commutative","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.commutative\"><span class=\"name\">IsCyclic</span>.<span class=\"name\">commutative</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L81-L82","name":"isAddCyclic_additive","line":81,"kind":"instance","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isAddCyclic_additive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isAddCyclic_additive\"><span class=\"name\">isAddCyclic_additive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/TypeTags/Basic.html#Additive\">Additive</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L77-L79","name":"isAddCyclic_additive_iff","line":77,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isAddCyclic_additive_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isAddCyclic_additive_iff\"><span class=\"name\">isAddCyclic_additive_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#DivInvMonoid\">DivInvMonoid</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/TypeTags/Basic.html#Additive\">Additive</a> <span class=\"fn\">α</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L74-L75","name":"isCyclic_multiplicative","line":74,"kind":"instance","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isCyclic_multiplicative","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isCyclic_multiplicative\"><span class=\"name\">isCyclic_multiplicative</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/TypeTags/Basic.html#Multiplicative\">Multiplicative</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L69-L72","name":"isCyclic_multiplicative_iff","line":69,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isCyclic_multiplicative_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isCyclic_multiplicative_iff\"><span class=\"name\">isCyclic_multiplicative_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#SubNegMonoid\">SubNegMonoid</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/TypeTags/Basic.html#Multiplicative\">Multiplicative</a> <span class=\"fn\">α</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L65-L65","name":"isAddCyclic_of_subsingleton","line":65,"kind":"instance","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isAddCyclic_of_subsingleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isAddCyclic_of_subsingleton\"><span class=\"name\">isAddCyclic_of_subsingleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L65-L67","name":"isCyclic_of_subsingleton","line":65,"kind":"instance","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isCyclic_of_subsingleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isCyclic_of_subsingleton\"><span class=\"name\">isCyclic_of_subsingleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L57-L57","name":"AddSubgroup.isAddCyclic_iff_exists_zmultiples_eq_top","line":57,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#AddSubgroup.isAddCyclic_iff_exists_zmultiples_eq_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#AddSubgroup.isAddCyclic_iff_exists_zmultiples_eq_top\"><span class=\"name\">AddSubgroup</span>.<span class=\"name\">isAddCyclic_iff_exists_zmultiples_eq_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/Defs.html#AddSubgroup\">AddSubgroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">↥<span class=\"fn\">H</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">g</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#AddSubgroup.zmultiples\">zmultiples</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">H</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L57-L63","name":"Subgroup.isCyclic_iff_exists_zpowers_eq_top","line":57,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#Subgroup.isCyclic_iff_exists_zpowers_eq_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#Subgroup.isCyclic_iff_exists_zpowers_eq_top\"><span class=\"name\">Subgroup</span>.<span class=\"name\">isCyclic_iff_exists_zpowers_eq_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/Defs.html#Subgroup\">Subgroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">↥<span class=\"fn\">H</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">g</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#Subgroup.zpowers\">zpowers</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">H</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L52-L52","name":"isAddCyclic_iff_exists_zmultiples_eq_top","line":52,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isAddCyclic_iff_exists_zmultiples_eq_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isAddCyclic_iff_exists_zmultiples_eq_top\"><span class=\"name\">isAddCyclic_iff_exists_zmultiples_eq_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">g</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#AddSubgroup.zmultiples\">AddSubgroup.zmultiples</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L52-L55","name":"isCyclic_iff_exists_zpowers_eq_top","line":52,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isCyclic_iff_exists_zpowers_eq_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#isCyclic_iff_exists_zpowers_eq_top\"><span class=\"name\">isCyclic_iff_exists_zpowers_eq_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">g</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#Subgroup.zpowers\">Subgroup.zpowers</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L48-L48","name":"IsAddCyclic.exists_generator","line":48,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.exists_generator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsAddCyclic.exists_generator\"><span class=\"name\">IsAddCyclic</span>.<span class=\"name\">exists_generator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsAddCyclic\">IsAddCyclic</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">g</span> : <span class=\"fn\">α</span>), <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#AddSubgroup.zmultiples\">AddSubgroup.zmultiples</a> <span class=\"fn\">g</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/GroupTheory/SpecificGroups/Cyclic.lean#L48-L50","name":"IsCyclic.exists_generator","line":48,"kind":"theorem","docLink":"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.exists_generator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/SpecificGroups/Cyclic.html#IsCyclic.exists_generator\"><span class=\"name\">IsCyclic</span>.<span class=\"name\">exists_generator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCyclic\">IsCyclic</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">g</span> : <span class=\"fn\">α</span>), <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#Subgroup.zpowers\">Subgroup.zpowers</a> <span class=\"fn\">g</span></span></span></span></div></div>"}]}