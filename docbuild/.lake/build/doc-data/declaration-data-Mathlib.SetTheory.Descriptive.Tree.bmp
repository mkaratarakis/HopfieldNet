{"name":"Mathlib.SetTheory.Descriptive.Tree","instances":[{"typeNames":["Subtype","List"],"name":"Descriptive.instSetLikeSubtypeSetListMemCompleteSublatticeTree","className":"SetLike"},{"typeNames":["List.IsPrefix"],"name":"Descriptive.Tree.instTransListSubtypeSetMemCompleteSublatticeTreeIsPrefix","className":"Trans"}],"imports":["Init","Mathlib.Order.CompleteLattice.SetLike"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Descriptive/Tree.lean#L133-L142","name":"Descriptive.Tree.pullSub_append","line":133,"kind":"theorem","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.pullSub_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.pullSub_append\"><span class=\"name\">Descriptive</span>.<span class=\"name\">Tree</span>.<span class=\"name\">pullSub_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">A</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.pullSub\">pullSub</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.pullSub\">pullSub</a> <span class=\"fn\">T</span> <span class=\"fn\">y</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.pullSub\">pullSub</a> <span class=\"fn\">T</span> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">y</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Descriptive/Tree.lean#L131-L131","name":"Descriptive.Tree.pullSub_nil","line":131,"kind":"theorem","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.pullSub_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.pullSub_nil\"><span class=\"name\">Descriptive</span>.<span class=\"name\">Tree</span>.<span class=\"name\">pullSub_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.pullSub\">pullSub</a> <span class=\"fn\">T</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">T</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Descriptive/Tree.lean#L127-L129","name":"Descriptive.Tree.pullSub_adjunction","line":127,"kind":"theorem","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.pullSub_adjunction","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.pullSub_adjunction\"><span class=\"name\">Descriptive</span>.<span class=\"name\">Tree</span>.<span class=\"name\">pullSub_adjunction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">S </span><span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">A</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.pullSub\">pullSub</a> <span class=\"fn\">S</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">T</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">S</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.subAt\">subAt</a> <span class=\"fn\">T</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Descriptive/Tree.lean#L124-L125","name":"Descriptive.Tree.pullSub_mono","line":124,"kind":"theorem","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.pullSub_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.pullSub_mono\"><span class=\"name\">Descriptive</span>.<span class=\"name\">Tree</span>.<span class=\"name\">pullSub_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">S</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">T</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">A</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.pullSub\">pullSub</a> <span class=\"fn\">S</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.pullSub\">pullSub</a> <span class=\"fn\">T</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Descriptive/Tree.lean#L121-L122","name":"Descriptive.Tree.subAt_pullSub","line":121,"kind":"theorem","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.subAt_pullSub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.subAt_pullSub\"><span class=\"name\">Descriptive</span>.<span class=\"name\">Tree</span>.<span class=\"name\">subAt_pullSub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">A</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.subAt\">subAt</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.pullSub\">pullSub</a> <span class=\"fn\">T</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">T</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Descriptive/Tree.lean#L116-L119","name":"Descriptive.Tree.pullSub_subAt","line":116,"kind":"theorem","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.pullSub_subAt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.pullSub_subAt\"><span class=\"name\">Descriptive</span>.<span class=\"name\">Tree</span>.<span class=\"name\">pullSub_subAt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">A</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.pullSub\">pullSub</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.subAt\">subAt</a> <span class=\"fn\">T</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">T</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Descriptive/Tree.lean#L110-L111","name":"Descriptive.Tree.mem_pullSub_self","line":110,"kind":"theorem","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.mem_pullSub_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.mem_pullSub_self\"><span class=\"name\">Descriptive</span>.<span class=\"name\">Tree</span>.<span class=\"name\">mem_pullSub_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">A</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.pullSub\">pullSub</a> <span class=\"fn\">T</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">T</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Descriptive/Tree.lean#L108-L108","name":"Descriptive.Tree.mem_pullSub_append","line":108,"kind":"theorem","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.mem_pullSub_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.mem_pullSub_append\"><span class=\"name\">Descriptive</span>.<span class=\"name\">Tree</span>.<span class=\"name\">mem_pullSub_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">A</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.pullSub\">pullSub</a> <span class=\"fn\">T</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">T</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Descriptive/Tree.lean#L100-L106","name":"Descriptive.Tree.mem_pullSub_long","line":100,"kind":"theorem","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.mem_pullSub_long","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.mem_pullSub_long\"><span class=\"name\">Descriptive</span>.<span class=\"name\">Tree</span>.<span class=\"name\">mem_pullSub_long</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">A</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.pullSub\">pullSub</a> <span class=\"fn\">T</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ <span class=\"fn\">z</span> ∈ <span class=\"fn\">T</span>, <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Descriptive/Tree.lean#L96-L98","name":"Descriptive.Tree.mem_pullSub_short","line":96,"kind":"theorem","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.mem_pullSub_short","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.mem_pullSub_short\"><span class=\"name\">Descriptive</span>.<span class=\"name\">Tree</span>.<span class=\"name\">mem_pullSub_short</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">A</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.pullSub\">pullSub</a> <span class=\"fn\">T</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">T</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Descriptive/Tree.lean#L86-L92","name":"Descriptive.Tree.pullSub","line":86,"kind":"def","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.pullSub","doc":"Adjoint of `subAt`, given by pasting x before the root of T. Explicitly,\nelements are prefixes of x or x with an element of T appended "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.pullSub\"><span class=\"name\">Descriptive</span>.<span class=\"name\">Tree</span>.<span class=\"name\">pullSub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">A</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Descriptive/Tree.lean#L81-L81","name":"Descriptive.Tree.drop_coe","line":81,"kind":"theorem","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.drop_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.drop_coe\"><span class=\"name\">Descriptive</span>.<span class=\"name\">Tree</span>.<span class=\"name\">drop_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">↥<span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.drop\">drop</a> <span class=\"fn\">T</span> <span class=\"fn\">n</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Descriptive/Tree.lean#L80-L82","name":"Descriptive.Tree.drop","line":80,"kind":"def","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.drop","doc":"A variant of `List.drop` that takes values in `subAt` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.drop\"><span class=\"name\">Descriptive</span>.<span class=\"name\">Tree</span>.<span class=\"name\">drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">↥<span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.subAt\">subAt</a> <span class=\"fn\">T</span> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.take\">take</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Descriptive/Tree.lean#L77-L78","name":"Descriptive.Tree.subAt_mono","line":77,"kind":"theorem","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.subAt_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.subAt_mono\"><span class=\"name\">Descriptive</span>.<span class=\"name\">Tree</span>.<span class=\"name\">subAt_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">A</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">S</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">T</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.subAt\">subAt</a> <span class=\"fn\">S</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.subAt\">subAt</a> <span class=\"fn\">T</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Descriptive/Tree.lean#L75-L75","name":"Descriptive.Tree.subAt_append","line":75,"kind":"theorem","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.subAt_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.subAt_append\"><span class=\"name\">Descriptive</span>.<span class=\"name\">Tree</span>.<span class=\"name\">subAt_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">A</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.subAt\">subAt</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.subAt\">subAt</a> <span class=\"fn\">T</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.subAt\">subAt</a> <span class=\"fn\">T</span> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">y</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Descriptive/Tree.lean#L73-L73","name":"Descriptive.Tree.subAt_nil","line":73,"kind":"theorem","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.subAt_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.subAt_nil\"><span class=\"name\">Descriptive</span>.<span class=\"name\">Tree</span>.<span class=\"name\">subAt_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.subAt\">subAt</a> <span class=\"fn\">T</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">T</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Descriptive/Tree.lean#L71-L71","name":"Descriptive.Tree.mem_subAt","line":71,"kind":"theorem","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.mem_subAt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.mem_subAt\"><span class=\"name\">Descriptive</span>.<span class=\"name\">Tree</span>.<span class=\"name\">mem_subAt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">A</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.subAt\">subAt</a> <span class=\"fn\">T</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">T</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Descriptive/Tree.lean#L68-L69","name":"Descriptive.Tree.subAt","line":68,"kind":"def","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.subAt","doc":"The residual tree obtained by regarding the node x as new root "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.subAt\"><span class=\"name\">Descriptive</span>.<span class=\"name\">Tree</span>.<span class=\"name\">subAt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">A</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Descriptive/Tree.lean#L62-L63","name":"Descriptive.Tree.take_eq_take","line":62,"kind":"theorem","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.take_eq_take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.take_eq_take\"><span class=\"name\">Descriptive</span>.<span class=\"name\">Tree</span>.<span class=\"name\">take_eq_take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">↥<span class=\"fn\">T</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.take\">take</a> <span class=\"fn\">m</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.take\">take</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">m</span> <span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">x</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">x</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Descriptive/Tree.lean#L59-L60","name":"Descriptive.Tree.take_take","line":59,"kind":"theorem","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.take_take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.take_take\"><span class=\"name\">Descriptive</span>.<span class=\"name\">Tree</span>.<span class=\"name\">take_take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">↥<span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.take\">take</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.take\">take</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.take\">take</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span>)</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Descriptive/Tree.lean#L57-L57","name":"Descriptive.Tree.take_coe","line":57,"kind":"theorem","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.take_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.take_coe\"><span class=\"name\">Descriptive</span>.<span class=\"name\">Tree</span>.<span class=\"name\">take_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">↥<span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.take\">take</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Descriptive/Tree.lean#L56-L57","name":"Descriptive.Tree.take","line":56,"kind":"def","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.take","doc":"A variant of `List.take` internally to a tree "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.take\"><span class=\"name\">Descriptive</span>.<span class=\"name\">Tree</span>.<span class=\"name\">take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">↥<span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↥<span class=\"fn\">T</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Descriptive/Tree.lean#L53-L54","name":"Descriptive.Tree.take_mem","line":53,"kind":"theorem","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.take_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.take_mem\"><span class=\"name\">Descriptive</span>.<span class=\"name\">Tree</span>.<span class=\"name\">take_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">↥<span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">T</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Descriptive/Tree.lean#L49-L51","name":"Descriptive.Tree.tree_eq_bot","line":49,"kind":"theorem","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.tree_eq_bot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.tree_eq_bot\"><span class=\"name\">Descriptive</span>.<span class=\"name\">Tree</span>.<span class=\"name\">tree_eq_bot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">T</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> ∉ <span class=\"fn\">T</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Descriptive/Tree.lean#L46-L47","name":"Descriptive.Tree.singleton_mem","line":46,"kind":"theorem","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.singleton_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.singleton_mem\"><span class=\"name\">Descriptive</span>.<span class=\"name\">Tree</span>.<span class=\"name\">singleton_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">A</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">A</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">T</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#List.cons\">]</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">T</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Descriptive/Tree.lean#L43-L44","name":"Descriptive.Tree.instTransListSubtypeSetMemCompleteSublatticeTreeIsPrefix","line":43,"kind":"instance","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.instTransListSubtypeSetMemCompleteSublatticeTreeIsPrefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.instTransListSubtypeSetMemCompleteSublatticeTreeIsPrefix\"><span class=\"name\">Descriptive</span>.<span class=\"name\">Tree</span>.<span class=\"name\">instTransListSubtypeSetMemCompleteSublatticeTreeIsPrefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Trans\">Trans</a> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">List.IsPrefix</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">A</span></span>) (<span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">T</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">A</span></span>) (<span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">T</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Descriptive/Tree.lean#L40-L41","name":"Descriptive.Tree.mem_of_prefix","line":40,"kind":"theorem","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.mem_of_prefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.mem_of_prefix\"><span class=\"name\">Descriptive</span>.<span class=\"name\">Tree</span>.<span class=\"name\">mem_of_prefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">A</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\">x</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">T</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">T</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Descriptive/Tree.lean#L35-L38","name":"Descriptive.Tree.mem_of_append","line":35,"kind":"theorem","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.mem_of_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.Tree.mem_of_append\"><span class=\"name\">Descriptive</span>.<span class=\"name\">Tree</span>.<span class=\"name\">mem_of_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">A</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">T</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">T</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Descriptive/Tree.lean#L30-L30","name":"Descriptive.instSetLikeSubtypeSetListMemCompleteSublatticeTree_coe","line":30,"kind":"theorem","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.instSetLikeSubtypeSetListMemCompleteSublatticeTree_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.instSetLikeSubtypeSetListMemCompleteSublatticeTree_coe\"><span class=\"name\">Descriptive</span>.<span class=\"name\">instSetLikeSubtypeSetListMemCompleteSublatticeTree_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">self</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">self</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Descriptive/Tree.lean#L30-L30","name":"Descriptive.instSetLikeSubtypeSetListMemCompleteSublatticeTree","line":30,"kind":"instance","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.instSetLikeSubtypeSetListMemCompleteSublatticeTree","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.instSetLikeSubtypeSetListMemCompleteSublatticeTree\"><span class=\"name\">Descriptive</span>.<span class=\"name\">instSetLikeSubtypeSetListMemCompleteSublatticeTree</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/SetLike/Basic.html#SetLike\">SetLike</a> <span class=\"fn\">(↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">A</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/SetTheory/Descriptive/Tree.lean#L21-L28","name":"Descriptive.tree","line":21,"kind":"def","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree","doc":"A tree is a set of finite sequences, implemented as `List A`, that is stable under\ntaking prefixes. For the definition we use the equivalent property `x ++ [a] ∈ T → x ∈ T`,\nwhich is more convenient to check. We define `tree A` as a complete sublattice of\n`Set (List A)`, which coerces to the type of trees on `A`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\"><span class=\"name\">Descriptive</span>.<span class=\"name\">tree</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/CompleteSublattice.html#CompleteSublattice\">CompleteSublattice</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">A</span>)</span>)</span></span></div></div>"}]}