{"name":"Mathlib.Computability.Encoding","instances":[{"typeNames":["Computability.Encoding.Γ"],"name":"Computability.Γ.fintype","className":"Fintype"},{"typeNames":["Eq"],"name":"Computability.instDecidableEqΓ'","className":"Decidable"},{"typeNames":["Computability.Γ'"],"name":"Computability.instFintypeΓ'","className":"Fintype"},{"typeNames":["Computability.Γ'"],"name":"Computability.inhabitedΓ'","className":"Inhabited"},{"typeNames":["Computability.FinEncoding"],"name":"Computability.inhabitedFinEncoding","className":"Inhabited"},{"typeNames":["Computability.Encoding"],"name":"Computability.inhabitedEncoding","className":"Inhabited"}],"imports":["Init","Mathlib.Data.Fintype.Basic","Mathlib.Data.Num.Lemmas","Mathlib.Data.Option.Basic","Mathlib.SetTheory.Cardinal.Basic","Mathlib.Tactic.DeriveFintype"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L216-L217","name":"Computability.FinEncoding.card_le_aleph0","line":216,"kind":"theorem","docLink":"./Mathlib/Computability/Encoding.html#Computability.FinEncoding.card_le_aleph0","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.FinEncoding.card_le_aleph0\"><span class=\"name\">Computability</span>.<span class=\"name\">FinEncoding</span>.<span class=\"name\">card_le_aleph0</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.FinEncoding\">FinEncoding</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.aleph0\">Cardinal.aleph0</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L211-L214","name":"Computability.Encoding.card_le_aleph0","line":211,"kind":"theorem","docLink":"./Mathlib/Computability/Encoding.html#Computability.Encoding.card_le_aleph0","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.card_le_aleph0\"><span class=\"name\">Computability</span>.<span class=\"name\">Encoding</span>.<span class=\"name\">card_le_aleph0</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Encoding</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Countable/Defs.html#Countable\">Countable</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.Γ\">Γ</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.aleph0\">Cardinal.aleph0</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L207-L209","name":"Computability.Encoding.card_le_card_list","line":207,"kind":"theorem","docLink":"./Mathlib/Computability/Encoding.html#Computability.Encoding.card_le_card_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.card_le_card_list\"><span class=\"name\">Computability</span>.<span class=\"name\">Encoding</span>.<span class=\"name\">card_le_card_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Encoding</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.lift\">Cardinal.lift.{v, u}</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">α</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.lift\">Cardinal.lift.{u, v}</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.Γ\">Γ</a></span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L204-L205","name":"Computability.inhabitedEncoding","line":204,"kind":"instance","docLink":"./Mathlib/Computability/Encoding.html#Computability.inhabitedEncoding","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.inhabitedEncoding\"><span class=\"name\">Computability</span>.<span class=\"name\">inhabitedEncoding</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Encoding</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L201-L202","name":"Computability.inhabitedFinEncoding","line":201,"kind":"instance","docLink":"./Mathlib/Computability/Encoding.html#Computability.inhabitedFinEncoding","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.inhabitedFinEncoding\"><span class=\"name\">Computability</span>.<span class=\"name\">inhabitedFinEncoding</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/Computability/Encoding.html#Computability.FinEncoding\">FinEncoding</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L193-L199","name":"Computability.finEncodingBoolBool","line":193,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.finEncodingBoolBool","doc":"A fin_encoding of bool in bool. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.finEncodingBoolBool\"><span class=\"name\">Computability</span>.<span class=\"name\">finEncodingBoolBool</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.FinEncoding\">FinEncoding</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L191-L191","name":"Computability.decode_encodeBool","line":191,"kind":"theorem","docLink":"./Mathlib/Computability/Encoding.html#Computability.decode_encodeBool","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.decode_encodeBool\"><span class=\"name\">Computability</span>.<span class=\"name\">decode_encodeBool</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.decodeBool\">decodeBool</a> <span class=\"fn\">(<a href=\"./Mathlib/Computability/Encoding.html#Computability.encodeBool\">encodeBool</a> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L186-L189","name":"Computability.decodeBool","line":186,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.decodeBool","doc":"A decoding function from `List Bool` to bool. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.decodeBool\"><span class=\"name\">Computability</span>.<span class=\"name\">decodeBool</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L183-L184","name":"Computability.encodeBool","line":183,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.encodeBool","doc":"An encoding function of bool in bool. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.encodeBool\"><span class=\"name\">Computability</span>.<span class=\"name\">encodeBool</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L175-L181","name":"Computability.unaryFinEncodingNat","line":175,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.unaryFinEncodingNat","doc":"A unary fin_encoding of ℕ. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.unaryFinEncodingNat\"><span class=\"name\">Computability</span>.<span class=\"name\">unaryFinEncodingNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.FinEncoding\">FinEncoding</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L172-L173","name":"Computability.unary_decode_encode_nat","line":172,"kind":"theorem","docLink":"./Mathlib/Computability/Encoding.html#Computability.unary_decode_encode_nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.unary_decode_encode_nat\"><span class=\"name\">Computability</span>.<span class=\"name\">unary_decode_encode_nat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.unaryDecodeNat\">unaryDecodeNat</a> <span class=\"fn\">(<a href=\"./Mathlib/Computability/Encoding.html#Computability.unaryEncodeNat\">unaryEncodeNat</a> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L168-L170","name":"Computability.unaryDecodeNat","line":168,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.unaryDecodeNat","doc":"A unary decoding function from `List Bool` to ℕ. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.unaryDecodeNat\"><span class=\"name\">Computability</span>.<span class=\"name\">unaryDecodeNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L163-L166","name":"Computability.unaryEncodeNat","line":163,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.unaryEncodeNat","doc":"A unary encoding function of ℕ in bool. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.unaryEncodeNat\"><span class=\"name\">Computability</span>.<span class=\"name\">unaryEncodeNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L159-L161","name":"Computability.finEncodingNatΓ'","line":159,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.finEncodingNatΓ'","doc":"A binary FinEncoding of ℕ in Γ'. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.finEncodingNatΓ'\"><span class=\"name\">Computability</span>.<span class=\"name\">finEncodingNatΓ'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.FinEncoding\">FinEncoding</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L152-L157","name":"Computability.encodingNatΓ'","line":152,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.encodingNatΓ'","doc":"A binary encoding of ℕ in Γ'. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.encodingNatΓ'\"><span class=\"name\">Computability</span>.<span class=\"name\">encodingNatΓ'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Encoding</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L148-L150","name":"Computability.finEncodingNatBool","line":148,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.finEncodingNatBool","doc":"A binary fin_encoding of ℕ in bool. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.finEncodingNatBool\"><span class=\"name\">Computability</span>.<span class=\"name\">finEncodingNatBool</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.FinEncoding\">FinEncoding</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L141-L146","name":"Computability.encodingNatBool","line":141,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.encodingNatBool","doc":"A binary encoding of ℕ in bool. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.encodingNatBool\"><span class=\"name\">Computability</span>.<span class=\"name\">encodingNatBool</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Encoding</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L136-L139","name":"Computability.decode_encodeNat","line":136,"kind":"theorem","docLink":"./Mathlib/Computability/Encoding.html#Computability.decode_encodeNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.decode_encodeNat\"><span class=\"name\">Computability</span>.<span class=\"name\">decode_encodeNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.decodeNat\">decodeNat</a> <span class=\"fn\">(<a href=\"./Mathlib/Computability/Encoding.html#Computability.encodeNat\">encodeNat</a> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L128-L134","name":"Computability.decode_encodeNum","line":128,"kind":"theorem","docLink":"./Mathlib/Computability/Encoding.html#Computability.decode_encodeNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.decode_encodeNum\"><span class=\"name\">Computability</span>.<span class=\"name\">decode_encodeNum</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.decodeNum\">decodeNum</a> <span class=\"fn\">(<a href=\"./Mathlib/Computability/Encoding.html#Computability.encodeNum\">encodeNum</a> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L120-L126","name":"Computability.decode_encodePosNum","line":120,"kind":"theorem","docLink":"./Mathlib/Computability/Encoding.html#Computability.decode_encodePosNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.decode_encodePosNum\"><span class=\"name\">Computability</span>.<span class=\"name\">decode_encodePosNum</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.decodePosNum\">decodePosNum</a> <span class=\"fn\">(<a href=\"./Mathlib/Computability/Encoding.html#Computability.encodePosNum\">encodePosNum</a> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L116-L118","name":"Computability.encodePosNum_nonempty","line":116,"kind":"theorem","docLink":"./Mathlib/Computability/Encoding.html#Computability.encodePosNum_nonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.encodePosNum_nonempty\"><span class=\"name\">Computability</span>.<span class=\"name\">encodePosNum_nonempty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.encodePosNum\">encodePosNum</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L113-L114","name":"Computability.decodeNat","line":113,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.decodeNat","doc":"A decoding function from `List Bool` to ℕ. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.decodeNat\"><span class=\"name\">Computability</span>.<span class=\"name\">decodeNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L110-L111","name":"Computability.decodeNum","line":110,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.decodeNum","doc":"A decoding function from `List Bool` to the binary numbers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.decodeNum\"><span class=\"name\">Computability</span>.<span class=\"name\">decodeNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L104-L108","name":"Computability.decodePosNum","line":104,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.decodePosNum","doc":"A decoding function from `List Bool` to the positive binary numbers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.decodePosNum\"><span class=\"name\">Computability</span>.<span class=\"name\">decodePosNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L100-L102","name":"Computability.encodeNat","line":100,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.encodeNat","doc":"An encoding function of ℕ in bool. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.encodeNat\"><span class=\"name\">Computability</span>.<span class=\"name\">encodeNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L95-L98","name":"Computability.encodeNum","line":95,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.encodeNum","doc":"An encoding function of the binary numbers in bool. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.encodeNum\"><span class=\"name\">Computability</span>.<span class=\"name\">encodeNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L89-L93","name":"Computability.encodePosNum","line":89,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.encodePosNum","doc":"An encoding function of the positive binary numbers in bool. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.encodePosNum\"><span class=\"name\">Computability</span>.<span class=\"name\">encodePosNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L86-L87","name":"Computability.inclusionBoolΓ'_injective","line":86,"kind":"theorem","docLink":"./Mathlib/Computability/Encoding.html#Computability.inclusionBoolΓ'_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.inclusionBoolΓ'_injective\"><span class=\"name\">Computability</span>.<span class=\"name\">inclusionBoolΓ'_injective</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <a href=\"./Mathlib/Computability/Encoding.html#Computability.inclusionBoolΓ'\">inclusionBoolΓ'</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L82-L84","name":"Computability.leftInverse_section_inclusion","line":82,"kind":"theorem","docLink":"./Mathlib/Computability/Encoding.html#Computability.leftInverse_section_inclusion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.leftInverse_section_inclusion\"><span class=\"name\">Computability</span>.<span class=\"name\">leftInverse_section_inclusion</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.LeftInverse\">Function.LeftInverse</a> <a href=\"./Mathlib/Computability/Encoding.html#Computability.sectionΓ'Bool\">sectionΓ'Bool</a> <a href=\"./Mathlib/Computability/Encoding.html#Computability.inclusionBoolΓ'\">inclusionBoolΓ'</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L78-L80","name":"Computability.sectionΓ'Bool_inclusionBoolΓ'","line":78,"kind":"theorem","docLink":"./Mathlib/Computability/Encoding.html#Computability.sectionΓ'Bool_inclusionBoolΓ'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.sectionΓ'Bool_inclusionBoolΓ'\"><span class=\"name\">Computability</span>.<span class=\"name\">sectionΓ'Bool_inclusionBoolΓ'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.sectionΓ'Bool\">sectionΓ'Bool</a> <span class=\"fn\">(<a href=\"./Mathlib/Computability/Encoding.html#Computability.inclusionBoolΓ'\">inclusionBoolΓ'</a> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L73-L76","name":"Computability.sectionΓ'Bool","line":73,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.sectionΓ'Bool","doc":"An arbitrary section of the natural inclusion of bool in Γ'. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.sectionΓ'Bool\"><span class=\"name\">Computability</span>.<span class=\"name\">sectionΓ'Bool</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'\">Γ'</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L69-L71","name":"Computability.inclusionBoolΓ'","line":69,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.inclusionBoolΓ'","doc":"The natural inclusion of bool in Γ'. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.inclusionBoolΓ'\"><span class=\"name\">Computability</span>.<span class=\"name\">inclusionBoolΓ'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'\">Γ'</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L66-L67","name":"Computability.inhabitedΓ'","line":66,"kind":"instance","docLink":"./Mathlib/Computability/Encoding.html#Computability.inhabitedΓ'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.inhabitedΓ'\"><span class=\"name\">Computability</span>.<span class=\"name\">inhabitedΓ'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'\">Γ'</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L64-L64","name":"Computability.instFintypeΓ'","line":64,"kind":"instance","docLink":"./Mathlib/Computability/Encoding.html#Computability.instFintypeΓ'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.instFintypeΓ'\"><span class=\"name\">Computability</span>.<span class=\"name\">instFintypeΓ'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <a href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'\">Γ'</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L64-L64","name":"Computability.instDecidableEqΓ'","line":64,"kind":"instance","docLink":"./Mathlib/Computability/Encoding.html#Computability.instDecidableEqΓ'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.instDecidableEqΓ'\"><span class=\"name\">Computability</span>.<span class=\"name\">instDecidableEqΓ'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'\">Γ'</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L63-L63","name":"Computability.Γ'.comma","line":63,"kind":"ctor","docLink":"./Mathlib/Computability/Encoding.html#Computability.Γ'.comma","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'.comma\"><span class=\"name\">Computability</span>.<span class=\"name\">Γ'</span>.<span class=\"name\">comma</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'\">Γ'</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L62-L62","name":"Computability.Γ'.ket","line":62,"kind":"ctor","docLink":"./Mathlib/Computability/Encoding.html#Computability.Γ'.ket","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'.ket\"><span class=\"name\">Computability</span>.<span class=\"name\">Γ'</span>.<span class=\"name\">ket</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'\">Γ'</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L61-L61","name":"Computability.Γ'.bra","line":61,"kind":"ctor","docLink":"./Mathlib/Computability/Encoding.html#Computability.Γ'.bra","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'.bra\"><span class=\"name\">Computability</span>.<span class=\"name\">Γ'</span>.<span class=\"name\">bra</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'\">Γ'</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L60-L60","name":"Computability.Γ'.bit","line":60,"kind":"ctor","docLink":"./Mathlib/Computability/Encoding.html#Computability.Γ'.bit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'.bit\"><span class=\"name\">Computability</span>.<span class=\"name\">Γ'</span>.<span class=\"name\">bit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'\">Γ'</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L59-L59","name":"Computability.Γ'.blank","line":59,"kind":"ctor","docLink":"./Mathlib/Computability/Encoding.html#Computability.Γ'.blank","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'.blank\"><span class=\"name\">Computability</span>.<span class=\"name\">Γ'</span>.<span class=\"name\">blank</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'\">Γ'</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L57-L64","name":"Computability.Γ'","line":57,"kind":"inductive","docLink":"./Mathlib/Computability/Encoding.html#Computability.Γ'","doc":"A standard Turing machine alphabet, consisting of blank,bit0,bit1,bra,ket,comma. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'\"><span class=\"name\">Computability</span>.<span class=\"name\">Γ'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L54-L55","name":"Computability.Γ.fintype","line":54,"kind":"instance","docLink":"./Mathlib/Computability/Encoding.html#Computability.Γ.fintype","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Γ.fintype\"><span class=\"name\">Computability</span>.<span class=\"name\">Γ</span>.<span class=\"name\">fintype</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.FinEncoding\">FinEncoding</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.Γ\">Γ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L52-L52","name":"Computability.FinEncoding.ΓFin","line":52,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.FinEncoding.ΓFin","doc":"The alphabet of the encoding is finite "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.FinEncoding.ΓFin\"><span class=\"name\">Computability</span>.<span class=\"name\">FinEncoding</span>.<span class=\"name\">ΓFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.FinEncoding\">FinEncoding</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.Γ\">Γ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L50-L50","name":"Computability.FinEncoding.mk","line":50,"kind":"ctor","docLink":"./Mathlib/Computability/Encoding.html#Computability.FinEncoding.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.FinEncoding.mk\"><span class=\"name\">Computability</span>.<span class=\"name\">FinEncoding</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toEncoding</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Encoding</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ΓFin</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\"><span class=\"fn\">toEncoding</span>.<a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.Γ\">Γ</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.FinEncoding\">FinEncoding</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L50-L52","name":"Computability.FinEncoding.toEncoding","line":50,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.FinEncoding.toEncoding","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.FinEncoding.toEncoding\"><span class=\"name\">Computability</span>.<span class=\"name\">FinEncoding</span>.<span class=\"name\">toEncoding</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.FinEncoding\">FinEncoding</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Encoding</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L49-L52","name":"Computability.FinEncoding","line":49,"kind":"structure","docLink":"./Mathlib/Computability/Encoding.html#Computability.FinEncoding","doc":"An encoding plus a guarantee of finiteness of the alphabet. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.FinEncoding\"><span class=\"name\">Computability</span>.<span class=\"name\">FinEncoding</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Computability.Encoding</a> <span class=\"fn\">α</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max 1 u)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L45-L47","name":"Computability.Encoding.encode_injective","line":45,"kind":"theorem","docLink":"./Mathlib/Computability/Encoding.html#Computability.Encoding.encode_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.encode_injective\"><span class=\"name\">Computability</span>.<span class=\"name\">Encoding</span>.<span class=\"name\">encode_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Encoding</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.encode\">encode</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L43-L43","name":"Computability.Encoding.decode_encode","line":43,"kind":"theorem","docLink":"./Mathlib/Computability/Encoding.html#Computability.Encoding.decode_encode","doc":"Decoding and encoding are inverses of each other. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.decode_encode\"><span class=\"name\">Computability</span>.<span class=\"name\">Encoding</span>.<span class=\"name\">decode_encode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Encoding</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.decode\">decode</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.encode\">encode</a></span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L41-L41","name":"Computability.Encoding.decode","line":41,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.Encoding.decode","doc":"The decoding function "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.decode\"><span class=\"name\">Computability</span>.<span class=\"name\">Encoding</span>.<span class=\"name\">decode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Encoding</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.Γ\">Γ</a></span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L39-L39","name":"Computability.Encoding.encode","line":39,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.Encoding.encode","doc":"The encoding function "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.encode\"><span class=\"name\">Computability</span>.<span class=\"name\">Encoding</span>.<span class=\"name\">encode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Encoding</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.Γ\">Γ</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L37-L37","name":"Computability.Encoding.Γ","line":37,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.Encoding.Γ","doc":"The alphabet of the encoding "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.Γ\"><span class=\"name\">Computability</span>.<span class=\"name\">Encoding</span>.<span class=\"name\">Γ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Encoding</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> v</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L35-L35","name":"Computability.Encoding.mk","line":35,"kind":"ctor","docLink":"./Mathlib/Computability/Encoding.html#Computability.Encoding.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.mk\"><span class=\"name\">Computability</span>.<span class=\"name\">Encoding</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Γ</span> : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">encode</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">Γ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decode</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">Γ</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decode_encode</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">decode</span> <span class=\"fn\">(<span class=\"fn\">encode</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Encoding</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Computability/Encoding.lean#L34-L43","name":"Computability.Encoding","line":34,"kind":"structure","docLink":"./Mathlib/Computability/Encoding.html#Computability.Encoding","doc":"An encoding of a type in a certain alphabet, together with a decoding. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\"><span class=\"name\">Computability</span>.<span class=\"name\">Encoding</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u (v + 1))</div></div>"}]}