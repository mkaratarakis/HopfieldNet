{"name":"Mathlib.Topology.Category.Profinite.Nobeling.ZeroLimit","instances":[{"typeNames":["LocallyConstant"],"name":"Profinite.NobelingProof.instSubsingletonLocallyConstantElemForallBoolEmptyCollectionSetInt","className":"Subsingleton"},{"typeNames":["Subtype"],"name":"Profinite.NobelingProof.instIsEmptySubtypeProductsIsGoodEmptyCollectionSetForallBool","className":"IsEmpty"},{"typeNames":["LocallyConstant"],"name":"Profinite.NobelingProof.instNontrivialLocallyConstantIntOfNonempty","className":"Nontrivial"},{"typeNames":["Subtype"],"name":"Profinite.NobelingProof.instUniqueSubtypeProductsIsGoodSingletonForallBoolSetFalse","className":"Unique"},{"typeNames":["Int","LocallyConstant"],"name":"Profinite.NobelingProof.instNoZeroSMulDivisorsIntLocallyConstant","className":"NoZeroSMulDivisors"}],"imports":["Init","Mathlib.LinearAlgebra.LinearIndependent.Basic","Mathlib.SetTheory.Ordinal.Arithmetic","Mathlib.Topology.Category.Profinite.Nobeling.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.lean#L248-L252","name":"Profinite.NobelingProof.GoodProducts.linearIndependent_iff_union_smaller","line":248,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.linearIndependent_iff_union_smaller","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.linearIndependent_iff_union_smaller\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">linearIndependent_iff_union_smaller</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Mathlib/SetTheory/Ordinal/Arithmetic.html#Ordinal.IsLimit\">IsLimit</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent/Defs.html#LinearIndependent\">LinearIndependent</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.GoodProducts.eval\">eval</a> <span class=\"fn\">C</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent/Defs.html#LinearIndependent\">LinearIndependent</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">fun (<span class=\"fn\">p</span> : <span class=\"fn\">↑<span class=\"fn\">(⋃ (<span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">o'</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">o'</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Subtype\">}</a>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.smaller\">smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">↑<span class=\"fn\">e</span></span></span>)</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.lean#L244-L246","name":"Profinite.NobelingProof.GoodProducts.range_equiv_factorization","line":244,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.range_equiv_factorization","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.range_equiv_factorization\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">range_equiv_factorization</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Mathlib/SetTheory/Ordinal/Arithmetic.html#Ordinal.IsLimit\">IsLimit</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(fun (<span class=\"fn\">p</span> : <span class=\"fn\">↑<span class=\"fn\">(⋃ (<span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">o'</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">o'</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Subtype\">}</a>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.smaller\">smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">↑<span class=\"fn\">e</span></span></span>)</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">p</span></span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.range_equiv\">range_equiv</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span> <span class=\"fn\">hsC</span>)</span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.toFun\">toFun</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">fun (<span class=\"fn\">p</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.GoodProducts.range\">range</a> <span class=\"fn\">C</span>)</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.lean#L237-L242","name":"Profinite.NobelingProof.GoodProducts.range_equiv","line":237,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.range_equiv","doc":"The image of the `GoodProducts` in `C` is equivalent to the union of `smaller C o'` over all\nordinals `o' < o`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.range_equiv\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">range_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Mathlib/SetTheory/Ordinal/Arithmetic.html#Ordinal.IsLimit\">IsLimit</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.GoodProducts.range\">range</a> <span class=\"fn\">C</span>)</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">↑<span class=\"fn\">(⋃ (<span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">o'</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">o'</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Subtype\">}</a>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.smaller\">smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">↑<span class=\"fn\">e</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.lean#L223-L235","name":"Profinite.NobelingProof.GoodProducts.union","line":223,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.union","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.union\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">union</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Mathlib/SetTheory/Ordinal/Arithmetic.html#Ordinal.IsLimit\">IsLimit</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.GoodProducts.range\">range</a> <span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⋃ (<span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">o'</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">o'</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Subtype\">}</a>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.smaller\">smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">↑<span class=\"fn\">e</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.lean#L205-L218","name":"Profinite.NobelingProof.Products.limitOrdinal","line":205,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.Products.limitOrdinal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.Products.limitOrdinal\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">limitOrdinal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Mathlib/SetTheory/Ordinal/Arithmetic.html#Ordinal.IsLimit\">IsLimit</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.Products.isGood\">isGood</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ <span class=\"fn\">o'</span> &lt; <span class=\"fn\">o</span>, <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.Products.isGood\">isGood</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o'</span></span>)</span> <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.lean#L187-L198","name":"Profinite.NobelingProof.GoodProducts.smaller_mono","line":187,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.smaller_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.smaller_mono\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">smaller_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁ </span><span class=\"fn\">o₂</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">o₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.smaller\">smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">o₁</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.smaller\">smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">o₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.lean#L179-L185","name":"Profinite.NobelingProof.GoodProducts.linearIndependent_iff_smaller","line":179,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.linearIndependent_iff_smaller","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.linearIndependent_iff_smaller\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">linearIndependent_iff_smaller</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent/Defs.html#LinearIndependent\">LinearIndependent</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.GoodProducts.eval\">eval</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent/Defs.html#LinearIndependent\">LinearIndependent</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">fun (<span class=\"fn\">p</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.smaller\">smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span>)</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.lean#L175-L177","name":"Profinite.NobelingProof.GoodProducts.smaller_factorization","line":175,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.smaller_factorization","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.smaller_factorization\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">smaller_factorization</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(fun (<span class=\"fn\">p</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.smaller\">smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span>)</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">p</span></span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.range_equiv_smaller\">range_equiv_smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span>)</span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.toFun\">toFun</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.πs\">πs</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span>)</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">fun (<span class=\"fn\">p</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.GoodProducts.range\">range</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span>)</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.lean#L167-L173","name":"Profinite.NobelingProof.GoodProducts.range_equiv_smaller","line":167,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.range_equiv_smaller","doc":"The equivalence from the image of the `GoodProducts` in `LocallyConstant (π C (ord I · < o)) ℤ` to\n`smaller C o`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.range_equiv_smaller\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">range_equiv_smaller</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.GoodProducts.range\">range</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span>)</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.smaller\">smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.lean#L157-L165","name":"Profinite.NobelingProof.GoodProducts.range_equiv_smaller_toFun_bijective","line":157,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.range_equiv_smaller_toFun_bijective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.range_equiv_smaller_toFun_bijective\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">range_equiv_smaller_toFun_bijective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Bijective\">Function.Bijective</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.range_equiv_smaller_toFun\">range_equiv_smaller_toFun</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.lean#L149-L155","name":"Profinite.NobelingProof.GoodProducts.range_equiv_smaller_toFun","line":149,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.range_equiv_smaller_toFun","doc":"The map from the image of the `GoodProducts` in `LocallyConstant (π C (ord I · < o)) ℤ` to\n`smaller C o`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.range_equiv_smaller_toFun\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">range_equiv_smaller_toFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.GoodProducts.range\">range</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.smaller\">smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.lean#L141-L147","name":"Profinite.NobelingProof.GoodProducts.smaller","line":141,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.smaller","doc":"The image of the `GoodProducts` for `π C (ord I · < o)` in `LocallyConstant C ℤ`. The name `smaller`\nrefers to the setting in which we will use this, when we are mapping in `GoodProducts` from a\nsmaller set, i.e. when `o` is a smaller ordinal than the one `C` is \"contained\" in.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.smaller\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">smaller</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.lean#L101-L104","name":"Profinite.NobelingProof.GoodProducts.linearIndependentSingleton","line":101,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.linearIndependentSingleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.linearIndependentSingleton\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">linearIndependentSingleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent/Defs.html#LinearIndependent\">LinearIndependent</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.GoodProducts.eval\">eval</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span><a href=\"./Init/Core.html#Singleton.singleton\">}</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.lean#L91-L99","name":"Profinite.NobelingProof.instNoZeroSMulDivisorsIntLocallyConstant","line":91,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.instNoZeroSMulDivisorsIntLocallyConstant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.instNoZeroSMulDivisorsIntLocallyConstant\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">instNoZeroSMulDivisorsIntLocallyConstant</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/NoZeroSMulDivisors/Defs.html#NoZeroSMulDivisors\">NoZeroSMulDivisors</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">α</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.lean#L74-L89","name":"Profinite.NobelingProof.instUniqueSubtypeProductsIsGoodSingletonForallBoolSetFalse","line":74,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.instUniqueSubtypeProductsIsGoodSingletonForallBoolSetFalse","doc":"There is a unique `GoodProducts` for the singleton `{fun _ ↦ false}`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.instUniqueSubtypeProductsIsGoodSingletonForallBoolSetFalse\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">instUniqueSubtypeProductsIsGoodSingletonForallBoolSetFalse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.Products.isGood\">Products.isGood</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span><a href=\"./Init/Core.html#Singleton.singleton\">}</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.lean#L63-L72","name":"Profinite.NobelingProof.Products.span_nil_eq_top","line":63,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.Products.span_nil_eq_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.Products.span_nil_eq_top\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">span_nil_eq_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span/Defs.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> (<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.Products.eval\">eval</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.Products.nil\">nil</a><a href=\"./Init/Core.html#Singleton.singleton\">}</a>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.lean#L58-L61","name":"Profinite.NobelingProof.Products.isGood_nil","line":58,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.Products.isGood_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.Products.isGood_nil\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">isGood_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.Products.isGood\">isGood</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span><a href=\"./Init/Core.html#Singleton.singleton\">}</a> <a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.Products.nil\">nil</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.lean#L55-L56","name":"Profinite.NobelingProof.instNontrivialLocallyConstantIntOfNonempty","line":55,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.instNontrivialLocallyConstantIntOfNonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.instNontrivialLocallyConstantIntOfNonempty\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">instNontrivialLocallyConstantIntOfNonempty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Nontrivial/Defs.html#Nontrivial\">Nontrivial</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">α</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.lean#L50-L53","name":"Profinite.NobelingProof.Products.lt_nil_empty","line":50,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.Products.lt_nil_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.Products.lt_nil_empty\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">lt_nil_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">m</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.Products.nil\">nil</a><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.lean#L47-L48","name":"Profinite.NobelingProof.Products.nil","line":47,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.Products.nil","doc":"The empty list as a `Products` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.Products.nil\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.lean#L44-L45","name":"Profinite.NobelingProof.GoodProducts.linearIndependentEmpty","line":44,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.linearIndependentEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.GoodProducts.linearIndependentEmpty\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">linearIndependentEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent/Defs.html#LinearIndependent\">LinearIndependent</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.GoodProducts.eval\">eval</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.lean#L39-L42","name":"Profinite.NobelingProof.instIsEmptySubtypeProductsIsGoodEmptyCollectionSetForallBool","line":39,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.instIsEmptySubtypeProductsIsGoodEmptyCollectionSetForallBool","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.instIsEmptySubtypeProductsIsGoodEmptyCollectionSetForallBool\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">instIsEmptySubtypeProductsIsGoodEmptyCollectionSetForallBool</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling/Basic.html#Profinite.NobelingProof.Products.isGood\">Products.isGood</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.lean#L36-L37","name":"Profinite.NobelingProof.instSubsingletonLocallyConstantElemForallBoolEmptyCollectionSetInt","line":36,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.instSubsingletonLocallyConstantElemForallBoolEmptyCollectionSetInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling/ZeroLimit.html#Profinite.NobelingProof.instSubsingletonLocallyConstantElemForallBoolEmptyCollectionSetInt\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">instSubsingletonLocallyConstantElemForallBoolEmptyCollectionSetInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span></div></div>"}]}