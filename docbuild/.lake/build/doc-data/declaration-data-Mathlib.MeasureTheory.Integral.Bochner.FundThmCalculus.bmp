{"name":"Mathlib.MeasureTheory.Integral.Bochner.FundThmCalculus","instances":[],"imports":["Init","Mathlib.MeasureTheory.Integral.Bochner.Set"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Integral/Bochner/FundThmCalculus.lean#L96-L112","name":"ContinuousOn.integral_sub_linear_isLittleO_ae","line":96,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Integral/Bochner/FundThmCalculus.html#ContinuousOn.integral_sub_linear_isLittleO_ae","doc":"Fundamental theorem of calculus for set integrals, `nhdsWithin` version: if `Œº` is a locally\nfinite measure, `f` is continuous on a measurable set `t`, and `a ‚àà t`, then `‚à´ x in (s i), f x ‚àÇŒº =\nŒº (s i) ‚Ä¢ f a + o(Œº (s i))` at `li` provided that `s i` tends to `(ùìù[t] a).smallSets` along `li`.\nSince `Œº (s i)` is an `‚Ñù‚â•0‚àû` number, we use `Œº.real (s i)` in the actual statement.\n\nOften there is a good formula for `Œº.real (s i)`, so the formalization can take an optional\nargument `m` with this formula and a proof of `(fun i => Œº.real (s i)) =·∂†[li] m`. Without these\narguments, `m i = Œº.real (s i)` is used in the output. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Integral/Bochner/FundThmCalculus.html#ContinuousOn.integral_sub_linear_isLittleO_ae\"><span class=\"name\">ContinuousOn</span>.<span class=\"name\">integral_sub_linear_isLittleO_ae</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œπ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#OpensMeasurableSpace\">OpensMeasurableSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#SecondCountableTopologyEither\">SecondCountableTopologyEither</a> <span class=\"fn\">X</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œº</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsLocallyFiniteMeasure\">MeasureTheory.IsLocallyFiniteMeasure</a> <span class=\"fn\">Œº</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hft</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#ContinuousOn\">ContinuousOn</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">X</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">li</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">Œπ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">s</span> <span class=\"fn\">li</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#nhdsWithin\">nhdsWithin</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Order/Filter/SmallSets.html#Filter.smallSets\">smallSets</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> := <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Œº</span>.<a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.real\">real</a></span> <span class=\"fn\">(<span class=\"fn\">s</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsŒº</span> : <span class=\"fn\">(fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Œº</span>.<a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.real\">real</a></span> <span class=\"fn\">(<span class=\"fn\">s</span> <span class=\"fn\">i</span>)</span></span>)</span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">=·∂†[</a><span class=\"fn\">li</span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">m</span> := by rfl)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Integral/Bochner/Basic.html#MeasureTheory.integral\">‚à´</a> (<span class=\"fn\">x</span> : <span class=\"fn\">X</span>) <a href=\"./Mathlib/MeasureTheory/Integral/Bochner/Basic.html#MeasureTheory.integral\">in</a> <span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">i</span></span><a href=\"./Mathlib/MeasureTheory/Integral/Bochner/Basic.html#MeasureTheory.integral\">,</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Mathlib/MeasureTheory/Integral/Bochner/Basic.html#MeasureTheory.integral\">‚àÇ</a><span class=\"fn\">Œº</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span> <a href=\"./Mathlib/Analysis/Asymptotics/Defs.html#Asymptotics.IsLittleO\">=o[</a><span class=\"fn\">li</span><a href=\"./Mathlib/Analysis/Asymptotics/Defs.html#Asymptotics.IsLittleO\">]</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Integral/Bochner/FundThmCalculus.lean#L79-L94","name":"ContinuousAt.integral_sub_linear_isLittleO_ae","line":79,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Integral/Bochner/FundThmCalculus.html#ContinuousAt.integral_sub_linear_isLittleO_ae","doc":"Fundamental theorem of calculus for set integrals, `nhds` version: if `Œº` is a locally finite\nmeasure and `f` is an almost everywhere measurable function that is continuous at a point `a`, then\n`‚à´ x in s i, f x ‚àÇŒº = Œº (s i) ‚Ä¢ f a + o(Œº (s i))` at `li` provided that `s` tends to\n`(ùìù a).smallSets` along `li`. Since `Œº (s i)` is an `‚Ñù‚â•0‚àû` number, we use `Œº.real (s i)` in\nthe actual statement.\n\nOften there is a good formula for `Œº.real (s i)`, so the formalization can take an optional\nargument `m` with this formula and a proof of `(fun i => Œº.real (s i)) =·∂†[li] m`. Without these\narguments, `m i = Œº.real (s i)` is used in the output. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Integral/Bochner/FundThmCalculus.html#ContinuousAt.integral_sub_linear_isLittleO_ae\"><span class=\"name\">ContinuousAt</span>.<span class=\"name\">integral_sub_linear_isLittleO_ae</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œπ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#OpensMeasurableSpace\">OpensMeasurableSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œº</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsLocallyFiniteMeasure\">MeasureTheory.IsLocallyFiniteMeasure</a> <span class=\"fn\">Œº</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#ContinuousAt\">ContinuousAt</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hfm</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Integral/IntegrableOn.html#StronglyMeasurableAtFilter\">StronglyMeasurableAtFilter</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">Œº</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">X</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">li</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">Œπ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">s</span> <span class=\"fn\">li</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/Order/Filter/SmallSets.html#Filter.smallSets\">smallSets</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> := <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Œº</span>.<a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.real\">real</a></span> <span class=\"fn\">(<span class=\"fn\">s</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsŒº</span> : <span class=\"fn\">(fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Œº</span>.<a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.real\">real</a></span> <span class=\"fn\">(<span class=\"fn\">s</span> <span class=\"fn\">i</span>)</span></span>)</span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">=·∂†[</a><span class=\"fn\">li</span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">m</span> := by rfl)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Integral/Bochner/Basic.html#MeasureTheory.integral\">‚à´</a> (<span class=\"fn\">x</span> : <span class=\"fn\">X</span>) <a href=\"./Mathlib/MeasureTheory/Integral/Bochner/Basic.html#MeasureTheory.integral\">in</a> <span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">i</span></span><a href=\"./Mathlib/MeasureTheory/Integral/Bochner/Basic.html#MeasureTheory.integral\">,</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Mathlib/MeasureTheory/Integral/Bochner/Basic.html#MeasureTheory.integral\">‚àÇ</a><span class=\"fn\">Œº</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span> <a href=\"./Mathlib/Analysis/Asymptotics/Defs.html#Asymptotics.IsLittleO\">=o[</a><span class=\"fn\">li</span><a href=\"./Mathlib/Analysis/Asymptotics/Defs.html#Asymptotics.IsLittleO\">]</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Integral/Bochner/FundThmCalculus.lean#L59-L77","name":"ContinuousWithinAt.integral_sub_linear_isLittleO_ae","line":59,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Integral/Bochner/FundThmCalculus.html#ContinuousWithinAt.integral_sub_linear_isLittleO_ae","doc":"Fundamental theorem of calculus for set integrals, `nhdsWithin` version: if `Œº` is a locally\nfinite measure and `f` is an almost everywhere measurable function that is continuous at a point `a`\nwithin a measurable set `t`, then `‚à´ x in s i, f x ‚àÇŒº = Œº (s i) ‚Ä¢ f a + o(Œº (s i))` at a filter `li`\nprovided that `s i` tends to `(ùìù[t] a).smallSets` along `li`.  Since `Œº (s i)` is an `‚Ñù‚â•0‚àû`\nnumber, we use `Œº.real (s i)` in the actual statement.\n\nOften there is a good formula for `Œº.real (s i)`, so the formalization can take an optional\nargument `m` with this formula and a proof of `(fun i => Œº.real (s i)) =·∂†[li] m`. Without these\narguments, `m i = Œº.real (s i)` is used in the output. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Integral/Bochner/FundThmCalculus.html#ContinuousWithinAt.integral_sub_linear_isLittleO_ae\"><span class=\"name\">ContinuousWithinAt</span>.<span class=\"name\">integral_sub_linear_isLittleO_ae</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œπ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#OpensMeasurableSpace\">OpensMeasurableSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œº</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsLocallyFiniteMeasure\">MeasureTheory.IsLocallyFiniteMeasure</a> <span class=\"fn\">Œº</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#ContinuousWithinAt\">ContinuousWithinAt</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hfm</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Integral/IntegrableOn.html#StronglyMeasurableAtFilter\">StronglyMeasurableAtFilter</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#nhdsWithin\">nhdsWithin</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span>)</span> <span class=\"fn\">Œº</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">X</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">li</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">Œπ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">s</span> <span class=\"fn\">li</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#nhdsWithin\">nhdsWithin</a> <span class=\"fn\">x</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Order/Filter/SmallSets.html#Filter.smallSets\">smallSets</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> := <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Œº</span>.<a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.real\">real</a></span> <span class=\"fn\">(<span class=\"fn\">s</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsŒº</span> : <span class=\"fn\">(fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Œº</span>.<a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.real\">real</a></span> <span class=\"fn\">(<span class=\"fn\">s</span> <span class=\"fn\">i</span>)</span></span>)</span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">=·∂†[</a><span class=\"fn\">li</span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">m</span> := by rfl)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Integral/Bochner/Basic.html#MeasureTheory.integral\">‚à´</a> (<span class=\"fn\">x</span> : <span class=\"fn\">X</span>) <a href=\"./Mathlib/MeasureTheory/Integral/Bochner/Basic.html#MeasureTheory.integral\">in</a> <span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">i</span></span><a href=\"./Mathlib/MeasureTheory/Integral/Bochner/Basic.html#MeasureTheory.integral\">,</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Mathlib/MeasureTheory/Integral/Bochner/Basic.html#MeasureTheory.integral\">‚àÇ</a><span class=\"fn\">Œº</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span> <a href=\"./Mathlib/Analysis/Asymptotics/Defs.html#Asymptotics.IsLittleO\">=o[</a><span class=\"fn\">li</span><a href=\"./Mathlib/Analysis/Asymptotics/Defs.html#Asymptotics.IsLittleO\">]</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/MeasureTheory/Integral/Bochner/FundThmCalculus.lean#L27-L57","name":"Filter.Tendsto.integral_sub_linear_isLittleO_ae","line":27,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Integral/Bochner/FundThmCalculus.html#Filter.Tendsto.integral_sub_linear_isLittleO_ae","doc":"Fundamental theorem of calculus for set integrals:\nif `Œº` is a measure that is finite at a filter `l` and\n`f` is a measurable function that has a finite limit `b` at `l ‚äì ae Œº`, then\n`‚à´ x in s i, f x ‚àÇŒº = Œº (s i) ‚Ä¢ b + o(Œº (s i))` at a filter `li` provided that\n`s i` tends to `l.smallSets` along `li`.\nSince `Œº (s i)` is an `‚Ñù‚â•0‚àû` number, we use `Œº.real (s i)` in the actual statement.\n\nOften there is a good formula for `Œº.real (s i)`, so the formalization can take an optional\nargument `m` with this formula and a proof of `(fun i => Œº.real (s i)) =·∂†[li] m`. Without these\narguments, `m i = Œº.real (s i)` is used in the output. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Integral/Bochner/FundThmCalculus.html#Filter.Tendsto.integral_sub_linear_isLittleO_ae\"><span class=\"name\">Filter</span>.<span class=\"name\">Tendsto</span>.<span class=\"name\">integral_sub_linear_isLittleO_ae</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œπ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œº</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/MeasurablyGenerated.html#Filter.IsMeasurablyGenerated\">IsMeasurablyGenerated</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> ‚Üí <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Tendsto\">Tendsto</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">l</span> ‚äì <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/AE.html#MeasureTheory.ae\">MeasureTheory.ae</a> <span class=\"fn\">Œº</span></span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">b</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hfm</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Integral/IntegrableOn.html#StronglyMeasurableAtFilter\">StronglyMeasurableAtFilter</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span> <span class=\"fn\">Œº</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hŒº</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Œº</span>.<a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.Measure.FiniteAtFilter\">FiniteAtFilter</a></span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">X</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">li</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">Œπ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Tendsto\">Tendsto</a> <span class=\"fn\">s</span> <span class=\"fn\">li</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Order/Filter/SmallSets.html#Filter.smallSets\">smallSets</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span> := <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Œº</span>.<a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.real\">real</a></span> <span class=\"fn\">(<span class=\"fn\">s</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsŒº</span> : <span class=\"fn\">(fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Œº</span>.<a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.real\">real</a></span> <span class=\"fn\">(<span class=\"fn\">s</span> <span class=\"fn\">i</span>)</span></span>)</span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">=·∂†[</a><span class=\"fn\">li</span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">m</span> := by rfl)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Integral/Bochner/Basic.html#MeasureTheory.integral\">‚à´</a> (<span class=\"fn\">x</span> : <span class=\"fn\">X</span>) <a href=\"./Mathlib/MeasureTheory/Integral/Bochner/Basic.html#MeasureTheory.integral\">in</a> <span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">i</span></span><a href=\"./Mathlib/MeasureTheory/Integral/Bochner/Basic.html#MeasureTheory.integral\">,</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Mathlib/MeasureTheory/Integral/Bochner/Basic.html#MeasureTheory.integral\">‚àÇ</a><span class=\"fn\">Œº</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">‚Ä¢</a> <span class=\"fn\">b</span>)</span> <a href=\"./Mathlib/Analysis/Asymptotics/Defs.html#Asymptotics.IsLittleO\">=o[</a><span class=\"fn\">li</span><a href=\"./Mathlib/Analysis/Asymptotics/Defs.html#Asymptotics.IsLittleO\">]</a> <span class=\"fn\">m</span></div></div>"}]}