{"name":"Mathlib.Combinatorics.SimpleGraph.Tutte","instances":[],"imports":["Init","Mathlib.Combinatorics.SimpleGraph.Matching","Mathlib.Combinatorics.SimpleGraph.Operations","Mathlib.Combinatorics.SimpleGraph.UniversalVerts","Mathlib.Data.Fintype.Card"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Combinatorics/SimpleGraph/Tutte.lean#L109-L118","name":"SimpleGraph.not_isTutteViolator_of_isPerfectMatching","line":109,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Tutte.html#SimpleGraph.not_isTutteViolator_of_isPerfectMatching","doc":"Proves the necessity part of Tutte's theorem "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Tutte.html#SimpleGraph.not_isTutteViolator_of_isPerfectMatching\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">not_isTutteViolator_of_isPerfectMatching</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hM</span> : <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching\">IsPerfectMatching</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Tutte.html#SimpleGraph.IsTutteViolator\">IsTutteViolator</a></span> <span class=\"fn\">u</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Combinatorics/SimpleGraph/Tutte.lean#L101-L107","name":"SimpleGraph.IsTutteViolator.empty","line":101,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Tutte.html#SimpleGraph.IsTutteViolator.empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Tutte.html#SimpleGraph.IsTutteViolator.empty\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsTutteViolator</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hodd</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Parity.html#Odd\">Odd</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">V</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Tutte.html#SimpleGraph.IsTutteViolator\">IsTutteViolator</a></span> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Combinatorics/SimpleGraph/Tutte.lean#L81-L99","name":"SimpleGraph.Subgraph.IsPerfectMatching.exists_of_isClique_supp","line":81,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Tutte.html#SimpleGraph.Subgraph.IsPerfectMatching.exists_of_isClique_supp","doc":"Given a graph in which the universal vertices do not violate Tutte's condition,\nif the graph decomposes into cliques, it has a perfect matching. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Tutte.html#SimpleGraph.Subgraph.IsPerfectMatching.exists_of_isClique_supp\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsPerfectMatching</span>.<span class=\"name\">exists_of_isClique_supp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hveven</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Even.html#Even\">Even</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Finite.html#Nat.card\">Nat.card</a> <span class=\"fn\">V</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Tutte.html#SimpleGraph.IsTutteViolator\">IsTutteViolator</a></span> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/UniversalVerts.html#SimpleGraph.universalVerts\">universalVerts</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\">∀ (<span class=\"fn\">K</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/UniversalVerts.html#SimpleGraph.deleteUniversalVerts\">deleteUniversalVerts</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.ConnectedComponent\">ConnectedComponent</a></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/UniversalVerts.html#SimpleGraph.deleteUniversalVerts\">deleteUniversalVerts</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Clique.html#SimpleGraph.IsClique\">IsClique</a></span> <span class=\"fn\"><span class=\"fn\">K</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.ConnectedComponent.supp\">supp</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">M</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>), <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching\">IsPerfectMatching</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Combinatorics/SimpleGraph/Tutte.lean#L25-L27","name":"SimpleGraph.IsTutteViolator","line":25,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Tutte.html#SimpleGraph.IsTutteViolator","doc":"A set certifying non-existence of a perfect matching. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Tutte.html#SimpleGraph.IsTutteViolator\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsTutteViolator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}