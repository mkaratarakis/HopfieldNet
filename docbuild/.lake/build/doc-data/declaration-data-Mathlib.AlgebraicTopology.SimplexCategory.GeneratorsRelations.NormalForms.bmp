{"name":"Mathlib.AlgebraicTopology.SimplexCategory.GeneratorsRelations.NormalForms","instances":[],"imports":["Init","Mathlib.Tactic.Zify","Mathlib.Data.List.Sort","Mathlib.Tactic.Linarith","Mathlib.Tactic.NormNum.Ineq","Mathlib.Tactic.Ring.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.lean#L134-L154","name":"SimplexCategoryGenRel.simplicialInsert_isAdmissible","line":134,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.simplicialInsert_isAdmissible","doc":"`simplicialInsert` preserves admissibility "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.simplicialInsert_isAdmissible\"><span class=\"name\">SimplexCategoryGenRel</span>.<span class=\"name\">simplicialInsert_isAdmissible</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hL</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible\">IsAdmissible</a> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hj</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible\">IsAdmissible</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.simplicialInsert\">simplicialInsert</a> <span class=\"fn\">j</span> <span class=\"fn\">L</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.lean#L125-L132","name":"SimplexCategoryGenRel.simplicialInsert_length","line":125,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.simplicialInsert_length","doc":"`simplicialInsert` just adds one to the length. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.simplicialInsert_length\"><span class=\"name\">SimplexCategoryGenRel</span>.<span class=\"name\">simplicialInsert_length</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.simplicialInsert\">simplicialInsert</a> <span class=\"fn\">a</span> <span class=\"fn\">L</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.lean#L113-L123","name":"SimplexCategoryGenRel.simplicialInsert","line":113,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.simplicialInsert","doc":"The construction `simplicialInsert` describes inserting an element in a list of integer and\nmoving it to its \"right place\" according to the simplicial relations. Somewhat miraculously,\nthe algorithm is the same for the first or the fifth simplicial relations, making it \"valid\"\nwhen we treat the list as a normal form for a morphism satisfying `P_δ`, or for a morphism\nsatisfying `P_σ`!\n\nThis is similar in nature to `List.orderedInsert`, but note that we increment one of the element\nevery time we perform an exchange, making it a different construction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.simplicialInsert\"><span class=\"name\">SimplexCategoryGenRel</span>.<span class=\"name\">simplicialInsert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.lean#L107-L107","name":"SimplexCategoryGenRel.IsAdmissible.head_val","line":107,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible.head_val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible.head_val\"><span class=\"name\">SimplexCategoryGenRel</span>.<span class=\"name\">IsAdmissible</span>.<span class=\"name\">head_val</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible\">IsAdmissible</a> <span class=\"fn\">m</span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible.head\">head</a> <span class=\"fn\">a</span> <span class=\"fn\">L</span> <span class=\"fn\">hl</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.lean#L106-L109","name":"SimplexCategoryGenRel.IsAdmissible.head","line":106,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible.head","doc":"The head of an `m`-admissible list. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible.head\"><span class=\"name\">SimplexCategoryGenRel</span>.<span class=\"name\">IsAdmissible</span>.<span class=\"name\">head</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible\">IsAdmissible</a> <span class=\"fn\">m</span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.lean#L101-L101","name":"SimplexCategoryGenRel.IsAdmissible.getElemAsFin_val","line":101,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible.getElemAsFin_val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible.getElemAsFin_val\"><span class=\"name\">SimplexCategoryGenRel</span>.<span class=\"name\">IsAdmissible</span>.<span class=\"name\">getElemAsFin_val</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible\">IsAdmissible</a> <span class=\"fn\">m</span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hK</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">hl</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible.getElemAsFin\">getElemAsFin</a></span> <span class=\"fn\">k</span> <span class=\"fn\">hK</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">k</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.lean#L100-L104","name":"SimplexCategoryGenRel.IsAdmissible.getElemAsFin","line":100,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible.getElemAsFin","doc":"An element of a `m`-admissible list, as an element of the appropriate `Fin` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible.getElemAsFin\"><span class=\"name\">SimplexCategoryGenRel</span>.<span class=\"name\">IsAdmissible</span>.<span class=\"name\">getElemAsFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible\">IsAdmissible</a> <span class=\"fn\">m</span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hK</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.lean#L93-L98","name":"SimplexCategoryGenRel.IsAdmissible.tail","line":93,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible.tail","doc":"The tail of an `m`-admissible list is (m+1)-admissible. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible.tail\"><span class=\"name\">SimplexCategoryGenRel</span>.<span class=\"name\">IsAdmissible</span>.<span class=\"name\">tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible\">IsAdmissible</a> <span class=\"fn\">m</span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible\">IsAdmissible</a> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.lean#L70-L91","name":"SimplexCategoryGenRel.IsAdmissible.cons","line":70,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible.cons","doc":"If `L` is a `(m + 1)`-admissible list, and `a` is natural number such that a ≤ m and a < L[0],\nthen `a::L` is `m`-admissible "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible.cons\"><span class=\"name\">SimplexCategoryGenRel</span>.<span class=\"name\">IsAdmissible</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hL</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible\">IsAdmissible</a> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha'</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>), <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">L</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">0</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible\">IsAdmissible</a> <span class=\"fn\">m</span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.lean#L66-L68","name":"SimplexCategoryGenRel.IsAdmissible.head_lt","line":66,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible.head_lt","doc":"If `(a :: l)` is `m`-admissible then a is less than all elements of `l` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible.head_lt\"><span class=\"name\">SimplexCategoryGenRel</span>.<span class=\"name\">IsAdmissible</span>.<span class=\"name\">head_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible\">IsAdmissible</a> <span class=\"fn\">m</span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">L</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.lean#L64-L64","name":"SimplexCategoryGenRel.IsAdmissible.le","line":64,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible.le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible.le\"><span class=\"name\">SimplexCategoryGenRel</span>.<span class=\"name\">IsAdmissible</span>.<span class=\"name\">le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hL</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible\">IsAdmissible</a> <span class=\"fn\">m</span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">L</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">k</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.lean#L62-L62","name":"SimplexCategoryGenRel.IsAdmissible.sorted","line":62,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible.sorted","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible.sorted\"><span class=\"name\">SimplexCategoryGenRel</span>.<span class=\"name\">IsAdmissible</span>.<span class=\"name\">sorted</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hL</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible\">IsAdmissible</a> <span class=\"fn\">m</span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/List/Sort.html#List.Sorted\">List.Sorted</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.lean#L58-L58","name":"SimplexCategoryGenRel.IsAdmissible.nil","line":58,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible.nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible.nil\"><span class=\"name\">SimplexCategoryGenRel</span>.<span class=\"name\">IsAdmissible</span>.<span class=\"name\">nil</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible\">IsAdmissible</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.lean#L49-L54","name":"SimplexCategoryGenRel.IsAdmissible","line":49,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible","doc":"A list of natural numbers [i₀, ⋯, iₙ]) is said to be `m`-admissible (for `m : ℕ`) if\n`i₀ < ⋯ < iₙ` and `iₖ ≤ m + k` for all `k`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplexCategory/GeneratorsRelations/NormalForms.html#SimplexCategoryGenRel.IsAdmissible\"><span class=\"name\">SimplexCategoryGenRel</span>.<span class=\"name\">IsAdmissible</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}