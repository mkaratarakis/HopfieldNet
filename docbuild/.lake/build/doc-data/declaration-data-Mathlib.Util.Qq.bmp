{"name":"Mathlib.Util.Qq","instances":[],"imports":["Init","Mathlib.Init","Qq"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Util/Qq.lean#L43-L62","name":"Qq.mkSetLiteralQ","line":43,"kind":"def","docLink":"./Mathlib/Util/Qq.html#Qq.mkSetLiteralQ","doc":"Join a list of elements of type `α` into a container `β`.\n\nUsually `β` is `q(Multiset α)` or `q(Finset α)` or `q(Set α)`.\n\nAs an example\n```lean\nmkSetLiteralQ q(Finset ℝ) (List.range 4 |>.map fun n : ℕ ↦ q($n•π))\n```\nproduces the expression `{0 • π, 1 • π, 2 • π, 3 • π} : Finset ℝ`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Qq.html#Qq.mkSetLiteralQ\"><span class=\"name\">Qq</span>.<span class=\"name\">mkSetLiteralQ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> v)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Tactics.html#autoParam\">autoParam</a> <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">«$β»</span></span>)</span> <a href=\"./Mathlib/Util/Qq.html#_auto._@.Mathlib.Util.Qq._hyg.374\">_auto✝</a></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Tactics.html#autoParam\">autoParam</a> <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Init/Core.html#Singleton\">Singleton</a> <span class=\"fn\">«$α»</span> <span class=\"fn\">«$β»</span></span>)</span> <a href=\"./Mathlib/Util/Qq.html#_auto._@.Mathlib.Util.Qq._hyg.385\">_auto✝¹</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Tactics.html#autoParam\">autoParam</a> <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Init/Core.html#Insert\">Insert</a> <span class=\"fn\">«$α»</span> <span class=\"fn\">«$β»</span></span>)</span> <a href=\"./Mathlib/Util/Qq.html#_auto._@.Mathlib.Util.Qq._hyg.397\">_auto✝²</a></span> → <span class=\"fn\">Q(<span class=\"fn\">«$β»</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Util/Qq.lean#L38-L41","name":"Qq.mkDecideProofQ","line":38,"kind":"def","docLink":"./Mathlib/Util/Qq.html#Qq.mkDecideProofQ","doc":"Returns a proof of `p : Prop` using `decide p`.\n\nThis is a Qq version of `Lean.Meta.mkDecideProof`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Qq.html#Qq.mkDecideProofQ\"><span class=\"name\">Qq</span>.<span class=\"name\">mkDecideProofQ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Prop</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">Q(<span class=\"fn\">«$p»</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Util/Qq.lean#L31-L36","name":"Qq.findLocalDeclWithTypeQ?","line":31,"kind":"def","docLink":"./Mathlib/Util/Qq.html#Qq.findLocalDeclWithTypeQ?","doc":"Return a local declaration whose type is definitionally equal to `sort`.\n\nThis is a Qq version of `Lean.Meta.findLocalDeclWithType?` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Qq.html#Qq.findLocalDeclWithTypeQ?\"><span class=\"name\">Qq</span>.<span class=\"name\">findLocalDeclWithTypeQ?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sort</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">Q(<span class=\"fn\">«$sort»</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Util/Qq.lean#L29-L29","name":"Qq.QuotedDefEq.rfl","line":29,"kind":"theorem","docLink":"./Mathlib/Util/Qq.html#Qq.QuotedDefEq.rfl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Qq.html#Qq.QuotedDefEq.rfl\"><span class=\"name\">Qq</span>.<span class=\"name\">QuotedDefEq</span>.<span class=\"name\">rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">«$a»</span> =Q <span class=\"fn\">«$a»</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/e9db98beeec1b415e419a3a8f0d96ed55b0f29ab/Mathlib/Util/Qq.lean#L19-L27","name":"Qq.inferTypeQ'","line":19,"kind":"def","docLink":"./Mathlib/Util/Qq.html#Qq.inferTypeQ'","doc":"Variant of `inferTypeQ` that yields a type in `Type u` rather than `Sort u`.\nThrows an error if the type is a `Prop` or if it's otherwise not possible to represent\nthe universe as `Type u` (for example due to universe level metavariables). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Qq.html#Qq.inferTypeQ'\"><span class=\"name\">Qq</span>.<span class=\"name\">inferTypeQ'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a>\n  <span class=\"fn\">((<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>) ×\n    <span class=\"fn\">(<span class=\"fn\">α</span> :\n      <span class=\"fn\">let <span class=\"fn\">u</span> := <span class=\"fn\">u</span>;\n      <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> u)</span></span>) ×\n      <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span></span>)</span></span></div></div>"}]}